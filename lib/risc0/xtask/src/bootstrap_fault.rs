// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use clap::Parser;
use risc0_fault::{FAULT_CHECKER_ID, FAULT_CHECKER_PATH};
#[derive(Parser)]
pub struct BootstrapFault;
const FAULT_CHECKER_ELF_RISC0_PATH: &str = "risc0/zkvm/src/fault_checker.elf";

impl BootstrapFault {
    pub fn run(&self) {
        // move the ELF locally
        std::fs::copy(FAULT_CHECKER_PATH, FAULT_CHECKER_ELF_RISC0_PATH).expect(
            format!(
                "failed to copy fault checker elf from {} to {}",
                FAULT_CHECKER_PATH, FAULT_CHECKER_ELF_RISC0_PATH
            )
            .as_str(),
        );

        let rust_code = format!(
            r##"// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Warning: this code is generated by cargo xtask and should not be modified by
// hand.

/// The image ID of the fault checker guest program
#[rustfmt::skip]
pub const FAULT_CHECKER_ID: [u32; 8] = {FAULT_CHECKER_ID:?};

/// The ELF of the fault checker guest program
#[rustfmt::skip]
pub const FAULT_CHECKER_ELF: &[u8] = include_bytes!("fault_checker.elf");
"##
        );

        std::fs::write("risc0/zkvm/src/fault_ids.rs", rust_code).unwrap();
    }
}
