// Copyright 2023 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code is automatically generated

#include "ffi.h"
#include "fp.h"

#include <array>
#include <cassert>
#include <stdexcept>

// clang-format off
namespace risc0::circuit::rv32im {

#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#endif

Fp step_exec(void* ctx, HostBridge host, size_t steps, size_t cycle, Fp** args) {
  size_t mask = steps - 1;
  std::array<Fp, 96> host_args;
  std::array<Fp, 32> host_outs;
  // loc("zirgen/circuit/rv32im/body.cpp":149:20)
  Fp x0(56361032);
  // loc("zirgen/circuit/rv32im/bigint.cpp":298:50)
  Fp x1(65280);
  // loc("zirgen/circuit/rv32im/bigint.cpp":128:38)
  Fp x2(8388608);
  // loc("zirgen/circuit/rv32im/page_fault.cpp":96:16)
  Fp x3(56361024);
  // loc("zirgen/circuit/rv32im/page_fault.cpp":94:19)
  Fp x4(54525952);
  // loc("zirgen/circuit/rv32im/page_fault.cpp":83:32)
  Fp x5(219862);
  // loc("zirgen/circuit/rv32im/sha.cpp":384:24)
  Fp x6(56361023);
  // loc("zirgen/circuit/rv32im/sha.cpp":344:18)
  Fp x7(47);
  // loc("zirgen/circuit/rv32im/sha.cpp":316:24)
  Fp x8(56360975);
  // loc("zirgen/circuit/rv32im/sha.cpp":312:24)
  Fp x9(56360967);
  // loc("zirgen/circuit/rv32im/sha.cpp":111:30)
  Fp x10(2013235201);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x11(2013204481);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x12(32768);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x13(2013143041);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x14(2013020161);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x15(8192);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x16(2012774401);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x17(4096);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x18(2012282881);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x19(2048);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x20(2011299841);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:46)
  Fp x21(2009333761);
  // loc("zirgen/circuit/rv32im/sha.cpp":104:34)
  Fp x22(512);
  // loc("zirgen/circuit/rv32im/page_fault.cpp":48:22)
  Fp x23(1024);
  // loc("zirgen/circuit/rv32im/sha.cpp":196:24)
  Fp x24(50331661);
  // loc("zirgen/circuit/rv32im/sha.cpp":195:24)
  Fp x25(50331660);
  // loc("zirgen/circuit/rv32im/ecall.cpp":115:25)
  Fp x26(50331662);
  // loc("zirgen/circuit/rv32im/ecall.cpp":22:43)
  Fp x27(50331658);
  // loc("zirgen/circuit/rv32im/ecall.cpp":18:42)
  Fp x28(50331659);
  // loc("zirgen/circuit/rv32im/ecall.cpp":147:49)
  Fp x29(50331653);
  // loc("zirgen/circuit/rv32im/ecall.cpp":142:21)
  Fp x30(115);
  // loc("zirgen/components/u32.cpp":238:19)
  Fp x31(131070);
  // loc("zirgen/components/u32.cpp":234:19)
  Fp x32(131072);
  // loc("zirgen/circuit/rv32im/multiply.cpp":65:32)
  Fp x33(31);
  // loc("zirgen/circuit/rv32im/multiply.cpp":63:34)
  Fp x34(192);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
  Fp x35(35);
  // loc("zirgen/circuit/rv32im/memio.cpp":79:79)
  Fp x36(16384);
  // loc("zirgen/circuit/rv32im/memio.cpp":79:56)
  Fp x37(4194304);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":60:68)
  Fp x38(23);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":59:68)
  Fp x39(55);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":58:68)
  Fp x40(103);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":57:68)
  Fp x41(111);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":51:68)
  Fp x42(99);
  // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
  Fp x43(240);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":45:68)
  Fp x44(19);
  // loc("./zirgen/circuit/rv32im/rv32im.inl":38:68)
  Fp x45(51);
  // loc("zirgen/components/u32.cpp":65:36)
  Fp x46(1996488705);
  // loc("zirgen/components/u32.cpp":65:28)
  Fp x47(465814468);
  // loc("zirgen/circuit/rv32im/compute.cpp":134:39)
  Fp x48(50331648);
  // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
  Fp x49(248);
  // loc("zirgen/circuit/rv32im/compute.cpp":45:13)
  Fp x50(2013265919);
  // loc("zirgen/circuit/rv32im/compute.cpp":17:12)
  Fp x51(2013265920);
  // loc("zirgen/circuit/rv32im/decode.cpp":28:34)
  Fp x52(127);
  // loc("zirgen/circuit/rv32im/decode.cpp":24:36)
  Fp x53(48);
  // loc("zirgen/circuit/rv32im/decode.cpp":23:43)
  Fp x54(1981808641);
  // loc("zirgen/circuit/rv32im/decode.cpp":23:35)
  Fp x55(64);
  // loc("zirgen/circuit/rv32im/decode.cpp":15:41)
  Fp x56(1006632961);
  // loc("zirgen/circuit/rv32im/decode.cpp":14:40)
  Fp x57(1761607681);
  // loc("zirgen/circuit/rv32im/decode.cpp":13:40)
  Fp x58(1887436801);
  // loc("zirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x59(1950351361);
  // loc("zirgen/circuit/rv32im/decode.cpp":12:41)
  Fp x60(32);
  // loc("zirgen/circuit/rv32im/decode.cpp":12:33)
  Fp x61(96);
  // loc("zirgen/circuit/rv32im/decode.cpp":11:40)
  Fp x62(1997537281);
  // loc("zirgen/circuit/rv32im/decode.cpp":11:32)
  Fp x63(128);
  // loc("zirgen/circuit/rv32im/body.cpp":109:18)
  Fp x64(16);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x65(15);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x66(14);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x67(13);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x68(12);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x69(11);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x70(10);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x71(9);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x72(8);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x73(7);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x74(6);
  // loc("./zirgen/components/onehot.h":46:19)
  Fp x75(5);
  // loc("zirgen/circuit/rv32im/body.cpp":31:21)
  Fp x76(67108864);
  // loc("zirgen/circuit/rv32im/body.cpp":18:43)
  Fp x77(1509949441);
  // loc("zirgen/circuit/rv32im/body.cpp":17:32)
  Fp x78(3);
  // loc("zirgen/circuit/rv32im/body.cpp":14:29)
  Fp x79(4);
  // loc("./zirgen/components/u32.h":27:12)
  Fp x80(16777216);
  // loc("./zirgen/components/u32.h":26:12)
  Fp x81(65536);
  // loc("zirgen/circuit/rv32im/body.cpp":61:37)
  Fp x82(56284855);
  // loc("zirgen/circuit/rv32im/body.cpp":61:37)
  Fp x83(56284854);
  // loc("zirgen/circuit/rv32im/body.cpp":61:37)
  Fp x84(56284853);
  // loc("zirgen/circuit/rv32im/body.cpp":61:37)
  Fp x85(56284852);
  // loc("zirgen/circuit/rv32im/body.cpp":55:20)
  Fp x86(56284851);
  // loc("zirgen/circuit/rv32im/body.cpp":55:20)
  Fp x87(56284850);
  // loc("zirgen/circuit/rv32im/body.cpp":55:20)
  Fp x88(56284849);
  // loc("zirgen/circuit/rv32im/body.cpp":55:20)
  Fp x89(56284848);
  // loc("zirgen/components/bytes.cpp":97:30)
  Fp x90(2005401601);
  // loc("zirgen/components/bytes.cpp":97:30)
  Fp x91(256);
  // loc("zirgen/components/bytes.cpp":96:26)
  Fp x92(255);
  // loc("zirgen/components/bytes.cpp":37:25)
  Fp x93(2);
  // loc("zirgen/components/bytes.cpp":34:29)
  Fp x94(254);
  // loc("zirgen/components/bytes.cpp":21:13)
  Fp x95(0);
  // loc("zirgen/circuit/rv32im/top.cpp":17:17)
  Fp x96(1);
  // loc("Top/Code/OneHot/hot[1](Reg)"("./zirgen/components/mux.h":49:25))
  auto x97 = args[0][2 * steps + ((cycle - 0) & mask)];
  assert(x97 != Fp::invalid());
  if (x97 != 0) {
    // loc("Top/Code/OneHot/hot[1](Reg)"("zirgen/circuit/rv32im/top.cpp":17:75))
    auto x98 = args[0][2 * steps + ((cycle - 1) & mask)];
    assert(x98 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/top.cpp":17:17)
    auto x99 = x96 - x98;
    // loc("Top/Code/Mux/1(SetupInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x100 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x100 != Fp::invalid());
    if (x99 != 0) {
      // loc("zirgen/components/bytes.cpp":21:3)
      {
        auto& reg = args[2][3 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":22:3)
      {
        auto& reg = args[2][4 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
    // loc("zirgen/components/bytes.cpp":117:17)
    auto x101 = x96 - x99;
    if (x101 != 0) {
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x102 = args[2][43 * steps + ((cycle - 1) & mask)];
      assert(x102 != Fp::invalid());
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x103 = args[2][44 * steps + ((cycle - 1) & mask)];
      assert(x103 != Fp::invalid());
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x104 = x103 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x105 = (x104 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x106 = x96 - x105;
        if (x106 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x102);
            reg = x102;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x107 = x103 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x107);
            reg = x107;
          }
        }
        if (x105 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x108 = x102 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][3 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x108);
            reg = x108;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][4 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x109 = args[2][3 * steps + ((cycle - 0) & mask)];
      assert(x109 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x110 = x109 - x102;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x111 = args[2][4 * steps + ((cycle - 0) & mask)];
      assert(x111 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x112 = x111 - x103;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x113 = x110 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x114 = x110 * x113;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x114 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x115 = x112 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x116 = x110 * x115;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x116 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x117 = x112 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x118 = x113 * x117;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x118 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x119 = args[2][3 * steps + ((cycle - 0) & mask)];
    assert(x119 != Fp::invalid());
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x120 = args[2][4 * steps + ((cycle - 0) & mask)];
    assert(x120 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x121 = x120 - x94;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x122 = (x121 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x123 = x96 - x122;
      if (x123 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x119);
          reg = x119;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x124 = x120 + x93;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x124);
          reg = x124;
        }
      }
      if (x122 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x125 = x119 + x96;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][5 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x125);
          reg = x125;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x126 = args[2][5 * steps + ((cycle - 0) & mask)];
    assert(x126 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x127 = x126 - x119;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x128 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x128 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x129 = x128 - x120;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x130 = x127 - x96;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x131 = x127 * x130;
    // loc("zirgen/components/bytes.cpp":48:7)
    if (x131 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x132 = x129 + x94;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x133 = x127 * x132;
    // loc("zirgen/components/bytes.cpp":51:7)
    if (x133 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x134 = x129 - x93;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x135 = x130 * x134;
    // loc("zirgen/components/bytes.cpp":54:7)
    if (x135 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x136 = x128 - x94;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x137 = (x136 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x138 = x96 - x137;
      if (x138 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x126);
          reg = x126;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x139 = x128 + x93;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x139);
          reg = x139;
        }
      }
      if (x137 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x140 = x126 + x96;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x140);
          reg = x140;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x141 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x141 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x142 = x141 - x126;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x143 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x143 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x144 = x143 - x128;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x145 = x142 - x96;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x146 = x142 * x145;
    // loc("zirgen/components/bytes.cpp":48:7)
    if (x146 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x147 = x144 + x94;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x148 = x142 * x147;
    // loc("zirgen/components/bytes.cpp":51:7)
    if (x148 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x149 = x144 - x93;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x150 = x145 * x149;
    // loc("zirgen/components/bytes.cpp":54:7)
    if (x150 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x151 = x143 - x94;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x152 = (x151 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x153 = x96 - x152;
      if (x153 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x141);
          reg = x141;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x154 = x143 + x93;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x154);
          reg = x154;
        }
      }
      if (x152 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x155 = x141 + x96;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x155);
          reg = x155;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x156 = args[2][9 * steps + ((cycle - 0) & mask)];
    assert(x156 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x157 = x156 - x141;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x158 = args[2][10 * steps + ((cycle - 0) & mask)];
    assert(x158 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x159 = x158 - x143;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x160 = x157 - x96;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x161 = x157 * x160;
    // loc("zirgen/components/bytes.cpp":48:7)
    if (x161 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x162 = x159 + x94;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x163 = x157 * x162;
    // loc("zirgen/components/bytes.cpp":51:7)
    if (x163 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x164 = x159 - x93;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x165 = x160 * x164;
    // loc("zirgen/components/bytes.cpp":54:7)
    if (x165 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x166 = x158 - x94;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x167 = (x166 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x168 = x96 - x167;
      if (x168 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x156);
          reg = x156;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x169 = x158 + x93;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x169);
          reg = x169;
        }
      }
      if (x167 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x170 = x156 + x96;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x170);
          reg = x170;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x171 = args[2][11 * steps + ((cycle - 0) & mask)];
    assert(x171 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x172 = x171 - x156;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x173 = args[2][12 * steps + ((cycle - 0) & mask)];
    assert(x173 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x174 = x173 - x158;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x175 = x172 - x96;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x176 = x172 * x175;
    // loc("zirgen/components/bytes.cpp":48:7)
    if (x176 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x177 = x174 + x94;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x178 = x172 * x177;
    // loc("zirgen/components/bytes.cpp":51:7)
    if (x178 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x179 = x174 - x93;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x180 = x175 * x179;
    // loc("zirgen/components/bytes.cpp":54:7)
    if (x180 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x181 = x173 - x94;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x182 = (x181 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x183 = x96 - x182;
      if (x183 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x171);
          reg = x171;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x184 = x173 + x93;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x184);
          reg = x184;
        }
      }
      if (x182 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x185 = x171 + x96;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x185);
          reg = x185;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x186 = args[2][13 * steps + ((cycle - 0) & mask)];
    assert(x186 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x187 = x186 - x171;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x188 = args[2][14 * steps + ((cycle - 0) & mask)];
    assert(x188 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x189 = x188 - x173;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x190 = x187 - x96;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x191 = x187 * x190;
    // loc("zirgen/components/bytes.cpp":48:7)
    if (x191 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x192 = x189 + x94;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x193 = x187 * x192;
    // loc("zirgen/components/bytes.cpp":51:7)
    if (x193 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x194 = x189 - x93;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x195 = x190 * x194;
    // loc("zirgen/components/bytes.cpp":54:7)
    if (x195 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x196 = x188 - x94;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x197 = (x196 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x198 = x96 - x197;
      if (x198 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x186);
          reg = x186;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x199 = x188 + x93;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x199);
          reg = x199;
        }
      }
      if (x197 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x200 = x186 + x96;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x200);
          reg = x200;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x201 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x201 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x202 = x201 - x186;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x203 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x203 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x204 = x203 - x188;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x205 = x202 - x96;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x206 = x202 * x205;
    // loc("zirgen/components/bytes.cpp":48:7)
    if (x206 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x207 = x204 + x94;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x208 = x202 * x207;
    // loc("zirgen/components/bytes.cpp":51:7)
    if (x208 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x209 = x204 - x93;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x210 = x205 * x209;
    // loc("zirgen/components/bytes.cpp":54:7)
    if (x210 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    {
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x211 = x203 - x94;
      // loc("zirgen/components/bytes.cpp":34:20)
      auto x212 = (x211 == 0) ? Fp(1) : Fp(0);
      // loc("zirgen/components/bytes.cpp":35:16)
      auto x213 = x96 - x212;
      if (x213 != 0) {
        // loc("zirgen/components/bytes.cpp":36:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x201);
          reg = x201;
        }
        // loc("zirgen/components/bytes.cpp":37:16)
        auto x214 = x203 + x93;
        // loc("zirgen/components/bytes.cpp":37:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x214);
          reg = x214;
        }
      }
      if (x212 != 0) {
        // loc("zirgen/components/bytes.cpp":40:17)
        auto x215 = x201 + x96;
        // loc("zirgen/components/bytes.cpp":40:7)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x215);
          reg = x215;
        }
        // loc("zirgen/components/bytes.cpp":41:7)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x216 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x216 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":44:18)
    auto x217 = x216 - x201;
    // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x218 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x218 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":45:17)
    auto x219 = x218 - x203;
    // loc("zirgen/components/bytes.cpp":48:19)
    auto x220 = x217 - x96;
    // loc("zirgen/components/bytes.cpp":48:7)
    auto x221 = x217 * x220;
    // loc("zirgen/components/bytes.cpp":48:7)
    if (x221 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
    // loc("zirgen/components/bytes.cpp":51:19)
    auto x222 = x219 + x94;
    // loc("zirgen/components/bytes.cpp":51:7)
    auto x223 = x217 * x222;
    // loc("zirgen/components/bytes.cpp":51:7)
    if (x223 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
    // loc("zirgen/components/bytes.cpp":54:25)
    auto x224 = x219 - x93;
    // loc("zirgen/components/bytes.cpp":54:7)
    auto x225 = x220 * x224;
    // loc("zirgen/components/bytes.cpp":54:7)
    if (x225 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    if (x100 != 0) {
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][37 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][38 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][39 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][40 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][41 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][42 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":126:7)
      {
        auto& reg = args[2][43 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/bytes.cpp":127:7)
      {
        auto& reg = args[2][44 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
    // loc("zirgen/components/bytes.cpp":130:16)
    auto x226 = x96 - x100;
    if (x226 != 0) {
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x227 = x218 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x228 = (x227 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x229 = x96 - x228;
        if (x229 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x216);
            reg = x216;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x230 = x218 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x230);
            reg = x230;
          }
        }
        if (x228 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x231 = x216 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x231);
            reg = x231;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x232 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x232 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x233 = x232 - x216;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x234 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x234 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x235 = x234 - x218;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x236 = x233 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x237 = x233 * x236;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x237 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x238 = x235 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x239 = x233 * x238;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x239 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x240 = x235 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x241 = x236 * x240;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x241 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x242 = x234 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x243 = (x242 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x244 = x96 - x243;
        if (x244 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x232);
            reg = x232;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x245 = x234 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x245);
            reg = x245;
          }
        }
        if (x243 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x246 = x232 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x246);
            reg = x246;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x247 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x247 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x248 = x247 - x232;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x249 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x249 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x250 = x249 - x234;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x251 = x248 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x252 = x248 * x251;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x252 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x253 = x250 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x254 = x248 * x253;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x254 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x255 = x250 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x256 = x251 * x255;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x256 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x257 = x249 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x258 = (x257 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x259 = x96 - x258;
        if (x259 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x247);
            reg = x247;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x260 = x249 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x260);
            reg = x260;
          }
        }
        if (x258 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x261 = x247 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x261);
            reg = x261;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x262 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x262 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x263 = x262 - x247;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x264 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x264 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x265 = x264 - x249;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x266 = x263 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x267 = x263 * x266;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x267 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x268 = x265 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x269 = x263 * x268;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x269 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x270 = x265 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x271 = x266 * x270;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x271 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x272 = x264 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x273 = (x272 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x274 = x96 - x273;
        if (x274 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x262);
            reg = x262;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x275 = x264 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x275);
            reg = x275;
          }
        }
        if (x273 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x276 = x262 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x276);
            reg = x276;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x277 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x277 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x278 = x277 - x262;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x279 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x279 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x280 = x279 - x264;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x281 = x278 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x282 = x278 * x281;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x282 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x283 = x280 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x284 = x278 * x283;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x284 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x285 = x280 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x286 = x281 * x285;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x286 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x287 = x279 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x288 = (x287 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x289 = x96 - x288;
        if (x289 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x277);
            reg = x277;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x290 = x279 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x290);
            reg = x290;
          }
        }
        if (x288 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x291 = x277 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x291);
            reg = x291;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x292 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x292 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x293 = x292 - x277;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x294 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x294 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x295 = x294 - x279;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x296 = x293 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x297 = x293 * x296;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x297 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x298 = x295 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x299 = x293 * x298;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x299 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x300 = x295 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x301 = x296 * x300;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x301 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x302 = x294 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x303 = (x302 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x304 = x96 - x303;
        if (x304 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x292);
            reg = x292;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x305 = x294 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x305);
            reg = x305;
          }
        }
        if (x303 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x306 = x292 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x306);
            reg = x306;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x307 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x307 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x308 = x307 - x292;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x309 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x309 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x310 = x309 - x294;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x311 = x308 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x312 = x308 * x311;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x312 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x313 = x310 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x314 = x308 * x313;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x314 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x315 = x310 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x316 = x311 * x315;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x316 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x317 = x309 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x318 = (x317 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x319 = x96 - x318;
        if (x319 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x307);
            reg = x307;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x320 = x309 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x320);
            reg = x320;
          }
        }
        if (x318 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x321 = x307 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x321);
            reg = x321;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x322 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x322 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x323 = x322 - x307;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x324 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x324 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x325 = x324 - x309;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x326 = x323 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x327 = x323 * x326;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x327 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x328 = x325 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x329 = x323 * x328;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x329 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x330 = x325 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x331 = x326 * x330;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x331 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x332 = x324 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x333 = (x332 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x334 = x96 - x333;
        if (x334 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x322);
            reg = x322;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x335 = x324 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x335);
            reg = x335;
          }
        }
        if (x333 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x336 = x322 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x336);
            reg = x336;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x337 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x337 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x338 = x337 - x322;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x339 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x339 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x340 = x339 - x324;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x341 = x338 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x342 = x338 * x341;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x342 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x343 = x340 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x344 = x338 * x343;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x344 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x345 = x340 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x346 = x341 * x345;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x346 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x347 = x339 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x348 = (x347 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x349 = x96 - x348;
        if (x349 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x337);
            reg = x337;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x350 = x339 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x350);
            reg = x350;
          }
        }
        if (x348 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x351 = x337 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x351);
            reg = x351;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x352 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x352 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x353 = x352 - x337;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x354 = args[2][36 * steps + ((cycle - 0) & mask)];
      assert(x354 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x355 = x354 - x339;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x356 = x353 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x357 = x353 * x356;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x357 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x358 = x355 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x359 = x353 * x358;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x359 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x360 = x355 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x361 = x356 * x360;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x361 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x362 = x354 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x363 = (x362 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x364 = x96 - x363;
        if (x364 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x352);
            reg = x352;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x365 = x354 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x365);
            reg = x365;
          }
        }
        if (x363 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x366 = x352 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][37 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x366);
            reg = x366;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][38 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x367 = args[2][37 * steps + ((cycle - 0) & mask)];
      assert(x367 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x368 = x367 - x352;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x369 = args[2][38 * steps + ((cycle - 0) & mask)];
      assert(x369 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x370 = x369 - x354;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x371 = x368 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x372 = x368 * x371;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x372 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x373 = x370 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x374 = x368 * x373;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x374 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x375 = x370 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x376 = x371 * x375;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x376 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x377 = x369 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x378 = (x377 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x379 = x96 - x378;
        if (x379 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x367);
            reg = x367;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x380 = x369 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x380);
            reg = x380;
          }
        }
        if (x378 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x381 = x367 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][39 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x381);
            reg = x381;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][40 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x382 = args[2][39 * steps + ((cycle - 0) & mask)];
      assert(x382 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x383 = x382 - x367;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x384 = args[2][40 * steps + ((cycle - 0) & mask)];
      assert(x384 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x385 = x384 - x369;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x386 = x383 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x387 = x383 * x386;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x387 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x388 = x385 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x389 = x383 * x388;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x389 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x390 = x385 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x391 = x386 * x390;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x391 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x392 = x384 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x393 = (x392 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x394 = x96 - x393;
        if (x394 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x382);
            reg = x382;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x395 = x384 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x395);
            reg = x395;
          }
        }
        if (x393 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x396 = x382 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][41 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x396);
            reg = x396;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][42 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x397 = args[2][41 * steps + ((cycle - 0) & mask)];
      assert(x397 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x398 = x397 - x382;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x399 = args[2][42 * steps + ((cycle - 0) & mask)];
      assert(x399 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x400 = x399 - x384;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x401 = x398 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x402 = x398 * x401;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x402 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x403 = x400 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x404 = x398 * x403;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x404 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x405 = x400 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x406 = x401 * x405;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x406 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
      {
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x407 = x399 - x94;
        // loc("zirgen/components/bytes.cpp":34:20)
        auto x408 = (x407 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/components/bytes.cpp":35:16)
        auto x409 = x96 - x408;
        if (x409 != 0) {
          // loc("zirgen/components/bytes.cpp":36:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x397);
            reg = x397;
          }
          // loc("zirgen/components/bytes.cpp":37:16)
          auto x410 = x399 + x93;
          // loc("zirgen/components/bytes.cpp":37:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x410);
            reg = x410;
          }
        }
        if (x408 != 0) {
          // loc("zirgen/components/bytes.cpp":40:17)
          auto x411 = x397 + x96;
          // loc("zirgen/components/bytes.cpp":40:7)
          {
            auto& reg = args[2][43 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x411);
            reg = x411;
          }
          // loc("zirgen/components/bytes.cpp":41:7)
          {
            auto& reg = args[2][44 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x412 = args[2][43 * steps + ((cycle - 0) & mask)];
      assert(x412 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":44:18)
      auto x413 = x412 - x397;
      // loc("Top/mux(Mux)/bytes_setup(BytesSetupStep)/BytesSetup/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x414 = args[2][44 * steps + ((cycle - 0) & mask)];
      assert(x414 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":45:17)
      auto x415 = x414 - x399;
      // loc("zirgen/components/bytes.cpp":48:19)
      auto x416 = x413 - x96;
      // loc("zirgen/components/bytes.cpp":48:7)
      auto x417 = x413 * x416;
      // loc("zirgen/components/bytes.cpp":48:7)
      if (x417 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:48");
      // loc("zirgen/components/bytes.cpp":51:19)
      auto x418 = x415 + x94;
      // loc("zirgen/components/bytes.cpp":51:7)
      auto x419 = x413 * x418;
      // loc("zirgen/components/bytes.cpp":51:7)
      if (x419 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:51");
      // loc("zirgen/components/bytes.cpp":54:25)
      auto x420 = x415 - x93;
      // loc("zirgen/components/bytes.cpp":54:7)
      auto x421 = x416 * x420;
      // loc("zirgen/components/bytes.cpp":54:7)
      if (x421 != 0) throw std::runtime_error("eqz failed at: zirgen/components/bytes.cpp:54");
    }
  }
  // loc("Top/Code/OneHot/hot[3](Reg)"("./zirgen/components/mux.h":49:25))
  auto x422 = args[0][4 * steps + ((cycle - 0) & mask)];
  assert(x422 != Fp::invalid());
  if (x422 != 0) {
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x423 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x423 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x424 = Fp(x423.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x424);
        reg = x424;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x425 = args[2][15 * steps + ((cycle - 0) & mask)];
    assert(x425 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x426 = x423 - x425;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x427 = x426 * x90;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][16 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x427);
      reg = x427;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x428 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x428 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x429 = Fp(x428.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x429);
        reg = x429;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x430 = args[2][17 * steps + ((cycle - 0) & mask)];
    assert(x430 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x431 = x428 - x430;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x432 = x431 * x90;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][18 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x432);
      reg = x432;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x433 = args[2][16 * steps + ((cycle - 0) & mask)];
    assert(x433 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x434 = args[2][18 * steps + ((cycle - 0) & mask)];
    assert(x434 != Fp::invalid());
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x435 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x435 != Fp::invalid());
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
    auto x436 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x436 != Fp::invalid());
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x425);
      reg = x425;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x433);
      reg = x433;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x430);
      reg = x430;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x434);
      reg = x434;
    }
    {
      host_args.at(0) = x436;
      host_args.at(1) = x425;
      host_args.at(2) = x433;
      host_args.at(3) = x430;
      host_args.at(4) = x434;
      host_args.at(5) = x95;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x437 = args[2][117 * steps + ((cycle - 0) & mask)];
    assert(x437 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x438 = args[2][118 * steps + ((cycle - 0) & mask)];
    assert(x438 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x439 = args[2][119 * steps + ((cycle - 0) & mask)];
    assert(x439 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x440 = args[2][120 * steps + ((cycle - 0) & mask)];
    assert(x440 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:3)
    {
      auto& reg = args[2][114 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x436);
      reg = x436;
    }
    // loc("zirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][115 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("zirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][116 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][117 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x437);
      reg = x437;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][118 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x438);
      reg = x438;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][119 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x439);
      reg = x439;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][120 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x440);
      reg = x440;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x441 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x441 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x442 = Fp(x441.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x442);
        reg = x442;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x443 = args[2][19 * steps + ((cycle - 0) & mask)];
    assert(x443 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x444 = x441 - x443;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x445 = x444 * x90;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][20 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x445);
      reg = x445;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x446 = args[0][13 * steps + ((cycle - 0) & mask)];
    assert(x446 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x447 = Fp(x446.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x447);
        reg = x447;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x448 = args[2][21 * steps + ((cycle - 0) & mask)];
    assert(x448 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x449 = x446 - x448;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x450 = x449 * x90;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][22 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x450);
      reg = x450;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x451 = args[2][20 * steps + ((cycle - 0) & mask)];
    assert(x451 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x452 = args[2][22 * steps + ((cycle - 0) & mask)];
    assert(x452 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/top.cpp":41:44)
    auto x453 = x436 + x96;
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x443);
      reg = x443;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x451);
      reg = x451;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x448);
      reg = x448;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x452);
      reg = x452;
    }
    {
      host_args.at(0) = x453;
      host_args.at(1) = x443;
      host_args.at(2) = x451;
      host_args.at(3) = x448;
      host_args.at(4) = x452;
      host_args.at(5) = x95;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x454 = args[2][124 * steps + ((cycle - 0) & mask)];
    assert(x454 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x455 = args[2][125 * steps + ((cycle - 0) & mask)];
    assert(x455 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x456 = args[2][126 * steps + ((cycle - 0) & mask)];
    assert(x456 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x457 = args[2][127 * steps + ((cycle - 0) & mask)];
    assert(x457 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:3)
    {
      auto& reg = args[2][121 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x453);
      reg = x453;
    }
    // loc("zirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][122 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("zirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][123 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][124 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x454);
      reg = x454;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][125 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x455);
      reg = x455;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][126 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x456);
      reg = x456;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][127 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x457);
      reg = x457;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x458 = args[0][14 * steps + ((cycle - 0) & mask)];
    assert(x458 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x459 = Fp(x458.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x459);
        reg = x459;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x460 = args[2][23 * steps + ((cycle - 0) & mask)];
    assert(x460 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x461 = x458 - x460;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x462 = x461 * x90;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][24 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x462);
      reg = x462;
    }
    // loc("Top/Code/Mux/3(RamLoadInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x463 = args[0][15 * steps + ((cycle - 0) & mask)];
    assert(x463 != Fp::invalid());
    {
      // loc("zirgen/components/bytes.cpp":96:21)
      auto x464 = Fp(x463.asUInt32() & x92.asUInt32());
      // loc("zirgen/components/bytes.cpp":96:12)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x464);
        reg = x464;
      }
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
    auto x465 = args[2][25 * steps + ((cycle - 0) & mask)];
    assert(x465 != Fp::invalid());
    // loc("zirgen/components/bytes.cpp":97:11)
    auto x466 = x463 - x465;
    // loc("zirgen/components/bytes.cpp":97:10)
    auto x467 = x466 * x90;
    // loc("zirgen/components/bytes.cpp":101:3)
    {
      auto& reg = args[2][26 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x467);
      reg = x467;
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x468 = args[2][24 * steps + ((cycle - 0) & mask)];
    assert(x468 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x469 = args[2][26 * steps + ((cycle - 0) & mask)];
    assert(x469 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/top.cpp":41:44)
    auto x470 = x436 + x93;
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x460);
      reg = x460;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x468);
      reg = x468;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x465);
      reg = x465;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x469);
      reg = x469;
    }
    {
      host_args.at(0) = x470;
      host_args.at(1) = x460;
      host_args.at(2) = x468;
      host_args.at(3) = x465;
      host_args.at(4) = x469;
      host_args.at(5) = x95;
      host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
    }
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x471 = args[2][131 * steps + ((cycle - 0) & mask)];
    assert(x471 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x472 = args[2][132 * steps + ((cycle - 0) & mask)];
    assert(x472 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x473 = args[2][133 * steps + ((cycle - 0) & mask)];
    assert(x473 != Fp::invalid());
    // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
    auto x474 = args[2][134 * steps + ((cycle - 0) & mask)];
    assert(x474 != Fp::invalid());
    // loc("zirgen/components/ram.cpp":168:3)
    {
      auto& reg = args[2][128 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x470);
      reg = x470;
    }
    // loc("zirgen/components/ram.cpp":169:3)
    {
      auto& reg = args[2][129 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x435);
      reg = x435;
    }
    // loc("zirgen/components/ram.cpp":170:3)
    {
      auto& reg = args[2][130 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][131 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x471);
      reg = x471;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][132 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x472);
      reg = x472;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][133 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x473);
      reg = x473;
    }
    // loc("zirgen/components/u32.cpp":34:5)
    {
      auto& reg = args[2][134 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x474);
      reg = x474;
    }
  }
  // loc("Top/Code/OneHot/hot[4](Reg)"("./zirgen/components/mux.h":49:25))
  auto x475 = args[0][5 * steps + ((cycle - 0) & mask)];
  assert(x475 != Fp::invalid());
  if (x475 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x476 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x476 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x477 = args[0][9 * steps + ((cycle - 0) & mask)];
    assert(x477 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x478 = args[0][10 * steps + ((cycle - 0) & mask)];
    assert(x478 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x479 = args[0][11 * steps + ((cycle - 0) & mask)];
    assert(x479 != Fp::invalid());
    // loc("Top/Code/Mux/4(ResetInfo)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x480 = args[0][12 * steps + ((cycle - 0) & mask)];
    assert(x480 != Fp::invalid());
    if (x478 != 0) {
      if (x477 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x481 = args[1][36];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x482 = args[1][37];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x483 = args[1][38];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[0](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x484 = args[1][39];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x481);
          reg = x481;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x482);
          reg = x482;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x483);
          reg = x483;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x484);
          reg = x484;
        }
        {
          host_args.at(0) = x89;
          host_args.at(1) = x481;
          host_args.at(2) = x482;
          host_args.at(3) = x483;
          host_args.at(4) = x484;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x485 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x485 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x486 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x486 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x487 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x487 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x488 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x488 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x485);
          reg = x485;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x486);
          reg = x486;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x487);
          reg = x487;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x488);
          reg = x488;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x489 = args[1][40];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x490 = args[1][41];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x491 = args[1][42];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[1](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x492 = args[1][43];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x489);
          reg = x489;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x490);
          reg = x490;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x491);
          reg = x491;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x492);
          reg = x492;
        }
        {
          host_args.at(0) = x88;
          host_args.at(1) = x489;
          host_args.at(2) = x490;
          host_args.at(3) = x491;
          host_args.at(4) = x492;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x493 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x493 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x494 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x494 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x495 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x495 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x496 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x496 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x493);
          reg = x493;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x494);
          reg = x494;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x495);
          reg = x495;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x496);
          reg = x496;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x497 = args[1][44];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x498 = args[1][45];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x499 = args[1][46];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[2](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x500 = args[1][47];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x497);
          reg = x497;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x498);
          reg = x498;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x499);
          reg = x499;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x500);
          reg = x500;
        }
        {
          host_args.at(0) = x87;
          host_args.at(1) = x497;
          host_args.at(2) = x498;
          host_args.at(3) = x499;
          host_args.at(4) = x500;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x501 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x501 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x502 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x502 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x503 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x503 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x504 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x504 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x501);
          reg = x501;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x502);
          reg = x502;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x503);
          reg = x503;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x504);
          reg = x504;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x505 = args[1][48];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x506 = args[1][49];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x507 = args[1][50];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[3](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x508 = args[1][51];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x505);
          reg = x505;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x506);
          reg = x506;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x507);
          reg = x507;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x508);
          reg = x508;
        }
        {
          host_args.at(0) = x86;
          host_args.at(1) = x505;
          host_args.at(2) = x506;
          host_args.at(3) = x507;
          host_args.at(4) = x508;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x509 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x509 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x510 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x510 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x511 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x511 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x512 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x512 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x509);
          reg = x509;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x510);
          reg = x510;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x511);
          reg = x511;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x512);
          reg = x512;
        }
      }
      // loc("zirgen/circuit/rv32im/body.cpp":58:17)
      auto x513 = x96 - x477;
      if (x513 != 0) {
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x514 = args[1][52];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x515 = args[1][53];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x516 = args[1][54];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[4](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x517 = args[1][55];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x514);
          reg = x514;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x515);
          reg = x515;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x516);
          reg = x516;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x517);
          reg = x517;
        }
        {
          host_args.at(0) = x85;
          host_args.at(1) = x514;
          host_args.at(2) = x515;
          host_args.at(3) = x516;
          host_args.at(4) = x517;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x518 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x518 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x519 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x519 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x520 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x520 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x521 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x521 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x518);
          reg = x518;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x519);
          reg = x519;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x520);
          reg = x520;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x521);
          reg = x521;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x522 = args[1][56];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x523 = args[1][57];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x524 = args[1][58];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[5](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x525 = args[1][59];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x522);
          reg = x522;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x523);
          reg = x523;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x524);
          reg = x524;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x525);
          reg = x525;
        }
        {
          host_args.at(0) = x84;
          host_args.at(1) = x522;
          host_args.at(2) = x523;
          host_args.at(3) = x524;
          host_args.at(4) = x525;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x526 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x526 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x527 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x527 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x528 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x528 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x529 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x529 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x526);
          reg = x526;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x527);
          reg = x527;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x528);
          reg = x528;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x529);
          reg = x529;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x530 = args[1][60];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x531 = args[1][61];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x532 = args[1][62];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[6](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x533 = args[1][63];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x530);
          reg = x530;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x531);
          reg = x531;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x532);
          reg = x532;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x533);
          reg = x533;
        }
        {
          host_args.at(0) = x83;
          host_args.at(1) = x530;
          host_args.at(2) = x531;
          host_args.at(3) = x532;
          host_args.at(4) = x533;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x534 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x534 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x535 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x535 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x536 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x536 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x537 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x537 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x534);
          reg = x534;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x535);
          reg = x535;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x536);
          reg = x536;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x537);
          reg = x537;
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x538 = args[1][64];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x539 = args[1][65];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x540 = args[1][66];
        // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/image_id(GlobalDigest)/word[7](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x541 = args[1][67];
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x538);
          reg = x538;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x539);
          reg = x539;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x540);
          reg = x540;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x541);
          reg = x541;
        }
        {
          host_args.at(0) = x82;
          host_args.at(1) = x538;
          host_args.at(2) = x539;
          host_args.at(3) = x540;
          host_args.at(4) = x541;
          host_args.at(5) = x95;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x542 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x542 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x543 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x543 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x544 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x544 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x545 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x545 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x542);
          reg = x542;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x543);
          reg = x543;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x544);
          reg = x544;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x545);
          reg = x545;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x546 = args[1][32];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x547 = args[1][33];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x548 = args[1][34];
      // loc("Top/mux(Mux)/reset(ResetStep)/Global/pre(SystemState)/pc(U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x549 = args[1][35];
      // loc("./zirgen/components/u32.h":25:12)
      auto x550 = x547 * x91;
      // loc("./zirgen/components/u32.h":24:12)
      auto x551 = x546 + x550;
      // loc("./zirgen/components/u32.h":26:12)
      auto x552 = x548 * x81;
      // loc("./zirgen/components/u32.h":24:12)
      auto x553 = x551 + x552;
      // loc("./zirgen/components/u32.h":27:12)
      auto x554 = x549 * x80;
      // loc("./zirgen/components/u32.h":24:12)
      auto x555 = x553 + x554;
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x556 = x555 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x557 = Fp(x556.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x557);
          reg = x557;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x558 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x558 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x559 = x556 - x558;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x560 = x559 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x561 = Fp(x560.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x561);
          reg = x561;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x562 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x562 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x563 = x560 - x562;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x564 = x563 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x565 = Fp(x564.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x565);
          reg = x565;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x566 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x566 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x567 = x564 - x566;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x568 = x567 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x569 = Fp(x568.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x569);
          reg = x569;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x570 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x570 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x571 = x568 - x570;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x572 = x571 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x572);
        reg = x572;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x573 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x573 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x574 = x96 - x573;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x575 = x573 * x574;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x575);
        reg = x575;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x576 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x576 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x577 = x93 - x573;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x578 = x576 * x577;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x578 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
    }
    if (x479 != 0) {
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x579 = args[2][6 * steps + ((cycle - 1) & mask)];
      assert(x579 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x580 = args[2][7 * steps + ((cycle - 1) & mask)];
      assert(x580 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":28:10)
      auto x581 = x580 * x91;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x582 = x579 + x581;
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x583 = args[2][8 * steps + ((cycle - 1) & mask)];
      assert(x583 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":29:10)
      auto x584 = x583 * x81;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x585 = x582 + x584;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x586 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x586 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":30:10)
      auto x587 = x586 * x80;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x588 = x585 + x587;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x589 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x589 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":31:10)
      auto x590 = x589 * x76;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x591 = x588 + x590;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x592 = x591 - x79;
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x593 = x592 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x594 = Fp(x593.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x594);
          reg = x594;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x595 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x595 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x596 = x593 - x595;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x597 = x596 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x598 = Fp(x597.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x598);
          reg = x598;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x599 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x599 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x600 = x597 - x599;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x601 = x600 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x602 = Fp(x601.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x602);
          reg = x602;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x603 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x603 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x604 = x601 - x603;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x605 = x604 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x606 = Fp(x605.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x606);
          reg = x606;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x607 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x607 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x608 = x605 - x607;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x609 = x608 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x609);
        reg = x609;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x610 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x610 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x611 = x96 - x610;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x612 = x610 * x611;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x612);
        reg = x612;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x613 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x613 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x614 = x93 - x610;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x615 = x613 * x614;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x615 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      if (x477 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x616 = args[2][101 * steps + ((cycle - 1) & mask)];
        assert(x616 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x617 = args[2][102 * steps + ((cycle - 1) & mask)];
        assert(x617 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x618 = x617 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x619 = x616 + x618;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x620 = args[2][103 * steps + ((cycle - 1) & mask)];
        assert(x620 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x621 = x620 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x622 = x619 + x621;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x623 = args[2][104 * steps + ((cycle - 1) & mask)];
        assert(x623 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x624 = x623 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x625 = x622 + x624;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x626 = args[2][105 * steps + ((cycle - 1) & mask)];
        assert(x626 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x627 = x626 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x628 = x625 + x627;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x629 = args[2][106 * steps + ((cycle - 1) & mask)];
        assert(x629 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x630 = x629 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x631 = x628 + x630;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x632 = args[2][107 * steps + ((cycle - 1) & mask)];
        assert(x632 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x633 = x632 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x634 = x631 + x633;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x635 = args[2][108 * steps + ((cycle - 1) & mask)];
        assert(x635 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x636 = x635 * x72;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x637 = x634 + x636;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x638 = args[2][109 * steps + ((cycle - 1) & mask)];
        assert(x638 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x639 = x638 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x640 = x637 + x639;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x641 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x641 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x642 = x641 * x70;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x643 = x640 + x642;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x644 = args[2][111 * steps + ((cycle - 1) & mask)];
        assert(x644 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x645 = x644 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x646 = x643 + x645;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x647 = args[2][112 * steps + ((cycle - 1) & mask)];
        assert(x647 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x648 = x647 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x649 = x646 + x648;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x650 = args[2][113 * steps + ((cycle - 1) & mask)];
        assert(x650 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x651 = x650 * x67;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x652 = x649 + x651;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x653 = args[2][114 * steps + ((cycle - 1) & mask)];
        assert(x653 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x654 = x653 * x66;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x655 = x652 + x654;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x656 = args[2][115 * steps + ((cycle - 1) & mask)];
        assert(x656 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x657 = x656 * x65;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x658 = x655 + x657;
        // loc("zirgen/circuit/rv32im/body.cpp":72:42)
        auto x659 = x658 - x65;
        // loc("zirgen/circuit/rv32im/body.cpp":72:42)
        if (x659 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:72");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/body.cpp":74:53))
        auto x660 = args[2][118 * steps + ((cycle - 1) & mask)];
        assert(x660 != Fp::invalid());
        {
          host_args.at(0) = x660;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x661 = host_outs.at(0);
          auto x662 = host_outs.at(1);
          auto x663 = host_outs.at(2);
          auto x664 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x661);
            reg = x661;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x662);
            reg = x662;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x663);
            reg = x663;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x664);
            reg = x664;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x665 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x665 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x666 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x666 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x667 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x667 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x668 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x668 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x660);
          reg = x660;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x665);
          reg = x665;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x666);
          reg = x666;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x667);
          reg = x667;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x668);
          reg = x668;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][106] = x665;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][107] = x666;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][108] = x667;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][109] = x668;
        // loc("zirgen/circuit/rv32im/body.cpp":77:55)
        auto x669 = x660 + x96;
        {
          host_args.at(0) = x669;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x670 = host_outs.at(0);
          auto x671 = host_outs.at(1);
          auto x672 = host_outs.at(2);
          auto x673 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x670);
            reg = x670;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x671);
            reg = x671;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x672);
            reg = x672;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x673);
            reg = x673;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x674 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x674 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x675 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x675 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x676 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x676 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x677 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x677 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x669);
          reg = x669;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x674);
          reg = x674;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x675);
          reg = x675;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x676);
          reg = x676;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x677);
          reg = x677;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][110] = x674;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][111] = x675;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][112] = x676;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][113] = x677;
        // loc("zirgen/circuit/rv32im/body.cpp":77:55)
        auto x678 = x660 + x93;
        {
          host_args.at(0) = x678;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x679 = host_outs.at(0);
          auto x680 = host_outs.at(1);
          auto x681 = host_outs.at(2);
          auto x682 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x679);
            reg = x679;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x680);
            reg = x680;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x681);
            reg = x681;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x682);
            reg = x682;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x683 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x683 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x684 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x684 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x685 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x685 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x686 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x686 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x678);
          reg = x678;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x683);
          reg = x683;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x684);
          reg = x684;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x685);
          reg = x685;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x686);
          reg = x686;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][114] = x683;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][115] = x684;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][116] = x685;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][117] = x686;
        // loc("zirgen/circuit/rv32im/body.cpp":77:55)
        auto x687 = x660 + x78;
        {
          host_args.at(0) = x687;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x688 = host_outs.at(0);
          auto x689 = host_outs.at(1);
          auto x690 = host_outs.at(2);
          auto x691 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x688);
            reg = x688;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x689);
            reg = x689;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x690);
            reg = x690;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x691);
            reg = x691;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x692 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x692 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x693 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x693 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x694 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x694 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x695 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x695 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x687);
          reg = x687;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x692);
          reg = x692;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x693);
          reg = x693;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x694);
          reg = x694;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x695);
          reg = x695;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][118] = x692;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][119] = x693;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][120] = x694;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][121] = x695;
      }
      // loc("zirgen/circuit/rv32im/body.cpp":81:17)
      auto x696 = x96 - x477;
      if (x696 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/body.cpp":83:53))
        auto x697 = args[2][118 * steps + ((cycle - 2) & mask)];
        assert(x697 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":87:45)
        auto x698 = x697 + x79;
        {
          host_args.at(0) = x698;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x699 = host_outs.at(0);
          auto x700 = host_outs.at(1);
          auto x701 = host_outs.at(2);
          auto x702 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x699);
            reg = x699;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x700);
            reg = x700;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x701);
            reg = x701;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x702);
            reg = x702;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x703 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x703 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x704 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x704 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x705 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x705 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x706 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x706 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x698);
          reg = x698;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x703);
          reg = x703;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x704);
          reg = x704;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x705);
          reg = x705;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x706);
          reg = x706;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][122] = x703;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][123] = x704;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][124] = x705;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][125] = x706;
        // loc("zirgen/circuit/rv32im/body.cpp":87:45)
        auto x707 = x698 + x96;
        {
          host_args.at(0) = x707;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x708 = host_outs.at(0);
          auto x709 = host_outs.at(1);
          auto x710 = host_outs.at(2);
          auto x711 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x708);
            reg = x708;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x709);
            reg = x709;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x710);
            reg = x710;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x711);
            reg = x711;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x712 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x712 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x713 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x713 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x714 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x714 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x715 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x715 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x707);
          reg = x707;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x712);
          reg = x712;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x713);
          reg = x713;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x714);
          reg = x714;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x715);
          reg = x715;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][126] = x712;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][127] = x713;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][128] = x714;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][129] = x715;
        // loc("zirgen/circuit/rv32im/body.cpp":87:45)
        auto x716 = x698 + x93;
        {
          host_args.at(0) = x716;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x717 = host_outs.at(0);
          auto x718 = host_outs.at(1);
          auto x719 = host_outs.at(2);
          auto x720 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x717);
            reg = x717;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x718);
            reg = x718;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x719);
            reg = x719;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x720);
            reg = x720;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x721 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x721 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x722 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x722 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x723 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x723 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x724 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x724 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x716);
          reg = x716;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x721);
          reg = x721;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x722);
          reg = x722;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x723);
          reg = x723;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x724);
          reg = x724;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][130] = x721;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][131] = x722;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][132] = x723;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][133] = x724;
        // loc("zirgen/circuit/rv32im/body.cpp":87:45)
        auto x725 = x698 + x78;
        {
          host_args.at(0) = x725;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x726 = host_outs.at(0);
          auto x727 = host_outs.at(1);
          auto x728 = host_outs.at(2);
          auto x729 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x726);
            reg = x726;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x727);
            reg = x727;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x728);
            reg = x728;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x729);
            reg = x729;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x730 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x730 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x731 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x731 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x732 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x732 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x733 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x733 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x725);
          reg = x725;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x730);
          reg = x730;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x731);
          reg = x731;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x732);
          reg = x732;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x733);
          reg = x733;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][134] = x730;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][135] = x731;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][136] = x732;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][137] = x733;
      }
    }
    if (x480 != 0) {
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x734 = args[2][6 * steps + ((cycle - 1) & mask)];
      assert(x734 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x735 = args[2][7 * steps + ((cycle - 1) & mask)];
      assert(x735 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":28:10)
      auto x736 = x735 * x91;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x737 = x734 + x736;
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x738 = args[2][8 * steps + ((cycle - 1) & mask)];
      assert(x738 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":29:10)
      auto x739 = x738 * x81;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x740 = x737 + x739;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x741 = args[2][70 * steps + ((cycle - 1) & mask)];
      assert(x741 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":30:10)
      auto x742 = x741 * x80;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x743 = x740 + x742;
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x744 = args[2][71 * steps + ((cycle - 1) & mask)];
      assert(x744 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":31:10)
      auto x745 = x744 * x76;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x746 = x743 + x745;
      // loc("zirgen/circuit/rv32im/body.cpp":27:10)
      auto x747 = x746 - x79;
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x748 = x747 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x749 = Fp(x748.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x749);
          reg = x749;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x750 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x750 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x751 = x748 - x750;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x752 = x751 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x753 = Fp(x752.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x753);
          reg = x753;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x754 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x754 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x755 = x752 - x754;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x756 = x755 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x757 = Fp(x756.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x757);
          reg = x757;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x758 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x758 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x759 = x756 - x758;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x760 = x759 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x761 = Fp(x760.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x761);
          reg = x761;
        }
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x762 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x762 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x763 = x760 - x762;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x764 = x763 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x764);
        reg = x764;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x765 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x765 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x766 = x96 - x765;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x767 = x765 * x766;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x767);
        reg = x767;
      }
      // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x768 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x768 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x769 = x93 - x765;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x770 = x768 * x769;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x770 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      if (x477 != 0) {
        {
          host_args.at(0) = x89;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x771 = host_outs.at(0);
          auto x772 = host_outs.at(1);
          auto x773 = host_outs.at(2);
          auto x774 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x771);
            reg = x771;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x772);
            reg = x772;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x773);
            reg = x773;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x774);
            reg = x774;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x775 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x775 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x776 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x776 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x777 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x777 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x778 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x778 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x89);
          reg = x89;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x775);
          reg = x775;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x776);
          reg = x776;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x777);
          reg = x777;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x778);
          reg = x778;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][72] = x775;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][73] = x776;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][74] = x777;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][75] = x778;
        {
          host_args.at(0) = x88;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x779 = host_outs.at(0);
          auto x780 = host_outs.at(1);
          auto x781 = host_outs.at(2);
          auto x782 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x779);
            reg = x779;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x780);
            reg = x780;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x781);
            reg = x781;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x782);
            reg = x782;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x783 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x783 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x784 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x784 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x785 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x785 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x786 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x786 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x88);
          reg = x88;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x783);
          reg = x783;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x784);
          reg = x784;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x785);
          reg = x785;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x786);
          reg = x786;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][76] = x783;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][77] = x784;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][78] = x785;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][79] = x786;
        {
          host_args.at(0) = x87;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x787 = host_outs.at(0);
          auto x788 = host_outs.at(1);
          auto x789 = host_outs.at(2);
          auto x790 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x787);
            reg = x787;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x788);
            reg = x788;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x789);
            reg = x789;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x790);
            reg = x790;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x791 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x791 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x792 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x792 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x793 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x793 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x794 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x794 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x87);
          reg = x87;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x791);
          reg = x791;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x792);
          reg = x792;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x793);
          reg = x793;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x794);
          reg = x794;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][80] = x791;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][81] = x792;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][82] = x793;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][83] = x794;
        {
          host_args.at(0) = x86;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x795 = host_outs.at(0);
          auto x796 = host_outs.at(1);
          auto x797 = host_outs.at(2);
          auto x798 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x795);
            reg = x795;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x796);
            reg = x796;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x797);
            reg = x797;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x798);
            reg = x798;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x799 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x799 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x800 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x800 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x801 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x801 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x802 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x802 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x86);
          reg = x86;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x799);
          reg = x799;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x800);
          reg = x800;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x801);
          reg = x801;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x802);
          reg = x802;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][84] = x799;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][85] = x800;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][86] = x801;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][87] = x802;
        // loc("zirgen/circuit/rv32im/body.cpp":35:52)
        auto x803 = x765 * x79;
        // loc("zirgen/circuit/rv32im/body.cpp":35:41)
        auto x804 = x762 + x803;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][68] = x750;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][69] = x754;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][70] = x758;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][71] = x804;
      }
      // loc("zirgen/circuit/rv32im/body.cpp":101:17)
      auto x805 = x96 - x477;
      if (x805 != 0) {
        {
          host_args.at(0) = x85;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x806 = host_outs.at(0);
          auto x807 = host_outs.at(1);
          auto x808 = host_outs.at(2);
          auto x809 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x806);
            reg = x806;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x807);
            reg = x807;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x808);
            reg = x808;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x809);
            reg = x809;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x810 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x810 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x811 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x811 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x812 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x812 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x813 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x813 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][114 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x85);
          reg = x85;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][115 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x810);
          reg = x810;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x811);
          reg = x811;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x812);
          reg = x812;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x813);
          reg = x813;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][88] = x810;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][89] = x811;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][90] = x812;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][91] = x813;
        {
          host_args.at(0) = x84;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x814 = host_outs.at(0);
          auto x815 = host_outs.at(1);
          auto x816 = host_outs.at(2);
          auto x817 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x814);
            reg = x814;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x815);
            reg = x815;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x816);
            reg = x816;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x817);
            reg = x817;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x818 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x818 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x819 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x819 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x820 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x820 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x821 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x821 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x84);
          reg = x84;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x818);
          reg = x818;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x819);
          reg = x819;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x820);
          reg = x820;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x821);
          reg = x821;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][92] = x818;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][93] = x819;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][94] = x820;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][95] = x821;
        {
          host_args.at(0) = x83;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x822 = host_outs.at(0);
          auto x823 = host_outs.at(1);
          auto x824 = host_outs.at(2);
          auto x825 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x822);
            reg = x822;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x823);
            reg = x823;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x824);
            reg = x824;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x825);
            reg = x825;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x826 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x826 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x827 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x827 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x828 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x828 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x829 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x829 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x83);
          reg = x83;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x826);
          reg = x826;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x827);
          reg = x827;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x828);
          reg = x828;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x829);
          reg = x829;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][96] = x826;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][97] = x827;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][98] = x828;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][99] = x829;
        {
          host_args.at(0) = x82;
          host_args.at(1) = x95;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x830 = host_outs.at(0);
          auto x831 = host_outs.at(1);
          auto x832 = host_outs.at(2);
          auto x833 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x830);
            reg = x830;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x831);
            reg = x831;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x832);
            reg = x832;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x833);
            reg = x833;
          }
        }
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x834 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x834 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x835 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x835 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x836 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x836 != Fp::invalid());
        // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x837 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x837 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x82);
          reg = x82;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x476);
          reg = x476;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x834);
          reg = x834;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x835);
          reg = x835;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x836);
          reg = x836;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x837);
          reg = x837;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][100] = x834;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][101] = x835;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][102] = x836;
        // loc("zirgen/components/u32.cpp":34:5)
        args[1][103] = x837;
      }
    }
    // loc("zirgen/circuit/rv32im/body.cpp":109:3)
    {
      auto& reg = args[2][99 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x64);
      reg = x64;
    }
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x838 = args[2][6 * steps + ((cycle - 0) & mask)];
    assert(x838 != Fp::invalid());
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x839 = args[2][7 * steps + ((cycle - 0) & mask)];
    assert(x839 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":28:10)
    auto x840 = x839 * x91;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x841 = x838 + x840;
    // loc("Top/mux(Mux)/reset(ResetStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x842 = args[2][8 * steps + ((cycle - 0) & mask)];
    assert(x842 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":29:10)
    auto x843 = x842 * x81;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x844 = x841 + x843;
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x845 = args[2][70 * steps + ((cycle - 0) & mask)];
    assert(x845 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":30:10)
    auto x846 = x845 * x80;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x847 = x844 + x846;
    // loc("Top/mux(Mux)/reset(ResetStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x848 = args[2][71 * steps + ((cycle - 0) & mask)];
    assert(x848 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":31:10)
    auto x849 = x848 * x76;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x850 = x847 + x849;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x851 = x850 - x79;
    host_args.at(0) = x476;
    host_args.at(1) = x851;
    host(ctx, "log", "%u: Reset: PC = %10x", host_args.data(), 2, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[5](Reg)"("./zirgen/components/mux.h":49:25))
  auto x852 = args[0][6 * steps + ((cycle - 0) & mask)];
  assert(x852 != Fp::invalid());
  if (x852 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x853 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x853 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x854 = args[2][6 * steps + ((cycle - 1) & mask)];
    assert(x854 != Fp::invalid());
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x855 = args[2][7 * steps + ((cycle - 1) & mask)];
    assert(x855 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":28:10)
    auto x856 = x855 * x91;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x857 = x854 + x856;
    // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
    auto x858 = args[2][8 * steps + ((cycle - 1) & mask)];
    assert(x858 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":29:10)
    auto x859 = x858 * x81;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x860 = x857 + x859;
    // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x861 = args[2][70 * steps + ((cycle - 1) & mask)];
    assert(x861 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":30:10)
    auto x862 = x861 * x80;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x863 = x860 + x862;
    // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x864 = args[2][71 * steps + ((cycle - 1) & mask)];
    assert(x864 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/body.cpp":31:10)
    auto x865 = x864 * x76;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x866 = x863 + x865;
    // loc("zirgen/circuit/rv32im/body.cpp":27:10)
    auto x867 = x866 - x79;
    {
      // loc("Top/mux(Mux)/body(BodyStep)/Reg"("zirgen/circuit/rv32im/body.cpp":173:45))
      auto x868 = args[2][99 * steps + ((cycle - 1) & mask)];
      assert(x868 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":174:24)
      auto x869 = x868 - x64;
      // loc("zirgen/circuit/rv32im/body.cpp":174:24)
      auto x870 = (x869 == 0) ? Fp(1) : Fp(0);
      if (x870 != 0) {
        host_args.at(0) = x853;
        host_args.at(1) = x867;
        host(ctx, "log", "%u: BODY pc: %10x", host_args.data(), 2, host_outs.data(), 0);
        host_args.at(0) = x867;
        host(ctx, "trace", "", host_args.data(), 1, host_outs.data(), 0);
        host_args.at(0) = x853;
        host_args.at(1) = x867;
        host(ctx, "getMajor", "", host_args.data(), 2, host_outs.data(), 1);
        auto x871 = host_outs.at(0);
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x872 = (x871 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x872);
            reg = x872;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x873 = x871 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x874 = (x873 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x874);
            reg = x874;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x875 = x871 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x876 = (x875 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x876);
            reg = x876;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x877 = x871 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x878 = (x877 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x878);
            reg = x878;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x879 = x871 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x880 = (x879 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x880);
            reg = x880;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x881 = x871 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x882 = (x881 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x882);
            reg = x882;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x883 = x871 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x884 = (x883 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x884);
            reg = x884;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x885 = x871 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x886 = (x885 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x886);
            reg = x886;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x887 = x871 - x72;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x888 = (x887 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x888);
            reg = x888;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x889 = x871 - x71;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x890 = (x889 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x890);
            reg = x890;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x891 = x871 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x892 = (x891 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x892);
            reg = x892;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x893 = x871 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x894 = (x893 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x894);
            reg = x894;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x895 = x871 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x896 = (x895 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x896);
            reg = x896;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x897 = x871 - x67;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x898 = (x897 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x898);
            reg = x898;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x899 = x871 - x66;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x900 = (x899 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x900);
            reg = x900;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x901 = x871 - x65;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x902 = (x901 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x902);
            reg = x902;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x903 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x903 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x904 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x904 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x905 = x904 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x906 = x903 + x905;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x907 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x907 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x908 = x907 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x909 = x906 + x908;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x910 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x910 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x911 = x910 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x912 = x909 + x911;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x913 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x913 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x914 = x913 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x915 = x912 + x914;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x916 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x916 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x917 = x916 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x918 = x915 + x917;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x919 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x919 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x920 = x919 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x921 = x918 + x920;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x922 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x922 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x923 = x922 * x72;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x924 = x921 + x923;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x925 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x925 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x926 = x925 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x927 = x924 + x926;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x928 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x928 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x929 = x928 * x70;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x930 = x927 + x929;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x931 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x931 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x932 = x931 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x933 = x930 + x932;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x934 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x934 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x935 = x934 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x936 = x933 + x935;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x937 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x937 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x938 = x937 * x67;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x939 = x936 + x938;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x940 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x940 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x941 = x940 * x66;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x942 = x939 + x941;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x943 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x943 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x944 = x943 * x65;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x945 = x942 + x944;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x946 = x945 - x871;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x946 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("zirgen/circuit/rv32im/body.cpp":181:20)
      auto x947 = x96 - x870;
      if (x947 != 0) {
        // loc("zirgen/circuit/rv32im/body.cpp":182:47)
        auto x948 = x868 - x65;
        // loc("zirgen/circuit/rv32im/body.cpp":182:47)
        auto x949 = (x948 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/circuit/rv32im/body.cpp":182:47)
        auto x950 = x96 - x949;
        if (x950 != 0) {
          host_args.at(0) = x853;
          host_args.at(1) = x867;
          host_args.at(2) = x868;
          host(ctx, "log", "%u: BODY pc: %10x, major = %u", host_args.data(), 3, host_outs.data(), 0);
        }
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x951 = (x868 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][100 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x951);
            reg = x951;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x952 = x868 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x953 = (x952 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][101 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x953);
            reg = x953;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x954 = x868 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x955 = (x954 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][102 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x955);
            reg = x955;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x956 = x868 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x957 = (x956 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][103 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x957);
            reg = x957;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x958 = x868 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x959 = (x958 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][104 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x959);
            reg = x959;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x960 = x868 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x961 = (x960 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][105 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x961);
            reg = x961;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x962 = x868 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x963 = (x962 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][106 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x963);
            reg = x963;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x964 = x868 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x965 = (x964 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][107 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x965);
            reg = x965;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x966 = x868 - x72;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x967 = (x966 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][108 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x967);
            reg = x967;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x968 = x868 - x71;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x969 = (x968 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][109 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x969);
            reg = x969;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x970 = x868 - x70;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x971 = (x970 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][110 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x971);
            reg = x971;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x972 = x868 - x69;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x973 = (x972 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][111 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x973);
            reg = x973;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x974 = x868 - x68;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x975 = (x974 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][112 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x975);
            reg = x975;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x976 = x868 - x67;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x977 = (x976 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][113 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x977);
            reg = x977;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x978 = x868 - x66;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x979 = (x978 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][114 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x979);
            reg = x979;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][115 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x949);
            reg = x949;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x980 = args[2][101 * steps + ((cycle - 0) & mask)];
        assert(x980 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x981 = args[2][102 * steps + ((cycle - 0) & mask)];
        assert(x981 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x982 = x981 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x983 = x980 + x982;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x984 = args[2][103 * steps + ((cycle - 0) & mask)];
        assert(x984 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x985 = x984 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x986 = x983 + x985;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x987 = args[2][104 * steps + ((cycle - 0) & mask)];
        assert(x987 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x988 = x987 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x989 = x986 + x988;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x990 = args[2][105 * steps + ((cycle - 0) & mask)];
        assert(x990 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x991 = x990 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x992 = x989 + x991;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x993 = args[2][106 * steps + ((cycle - 0) & mask)];
        assert(x993 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x994 = x993 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x995 = x992 + x994;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x996 = args[2][107 * steps + ((cycle - 0) & mask)];
        assert(x996 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x997 = x996 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x998 = x995 + x997;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x999 = args[2][108 * steps + ((cycle - 0) & mask)];
        assert(x999 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1000 = x999 * x72;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1001 = x998 + x1000;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1002 = args[2][109 * steps + ((cycle - 0) & mask)];
        assert(x1002 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1003 = x1002 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1004 = x1001 + x1003;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1005 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x1005 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1006 = x1005 * x70;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1007 = x1004 + x1006;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1008 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x1008 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1009 = x1008 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1010 = x1007 + x1009;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1011 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x1011 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1012 = x1011 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1013 = x1010 + x1012;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1014 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x1014 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1015 = x1014 * x67;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1016 = x1013 + x1015;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1017 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x1017 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1018 = x1017 * x66;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1019 = x1016 + x1018;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1020 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x1020 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1021 = x1020 * x65;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1022 = x1019 + x1021;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x1023 = x1022 - x868;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x1023 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[0](Reg)"("./zirgen/components/mux.h":49:25))
    auto x1024 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x1024 != Fp::invalid());
    if (x1024 != 0) {
      // loc("zirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1025 = x867 * x77;
      {
        host_args.at(0) = x1025;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1026 = host_outs.at(0);
        auto x1027 = host_outs.at(1);
        auto x1028 = host_outs.at(2);
        auto x1029 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1026);
          reg = x1026;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1027);
          reg = x1027;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1028);
          reg = x1028;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1029);
          reg = x1029;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1030 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1030 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1031 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1031 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1032 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1032 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1033 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x1033 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1025);
        reg = x1025;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1030);
        reg = x1030;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1031);
        reg = x1031;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1032);
        reg = x1032;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1033);
        reg = x1033;
      }
      {
        // loc("zirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1034 = Fp(x1033.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1035 = x1034 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1035);
          reg = x1035;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1036 = Fp(x1033.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1037 = x1036 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1037);
          reg = x1037;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1038 = Fp(x1033.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1039 = x1038 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1039);
          reg = x1039;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1040 = Fp(x1033.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1041 = x1040 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1041);
          reg = x1041;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1042 = Fp(x1033.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1043 = x1042 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1043);
          reg = x1043;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1044 = Fp(x1033.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1044);
          reg = x1044;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1045 = Fp(x1032.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1046 = x1045 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1046);
          reg = x1046;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1047 = Fp(x1032.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1048 = x1047 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1048);
          reg = x1048;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1049 = Fp(x1032.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1050 = x1049 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1050);
          reg = x1050;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1051 = Fp(x1032.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1052 = x1051 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1052);
          reg = x1052;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1053 = Fp(x1032.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1053);
          reg = x1053;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1054 = Fp(x1031.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1055 = x1054 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1055);
          reg = x1055;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1056 = Fp(x1031.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1057 = x1056 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1057);
          reg = x1057;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1058 = Fp(x1031.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1059 = x1058 * x58;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1059);
          reg = x1059;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1060 = Fp(x1031.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1061 = x1060 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1061);
          reg = x1061;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1062 = Fp(x1031.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1062);
          reg = x1062;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1063 = Fp(x1030.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1064 = x1063 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1064);
          reg = x1064;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1065 = Fp(x1030.asUInt32() & x52.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1065);
          reg = x1065;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1066 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1066 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1067 = x1066 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1068 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1068 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1069 = x1068 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1070 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1070 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1071 = x1070 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1072 = x1069 + x1071;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1073 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1073 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1074 = x1073 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1075 = x1072 + x1074;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1076 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1076 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1077 = x1075 + x1076;
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1078 = x1067 + x1077;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1079 = x1078 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1080 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1080 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1081 = x1079 + x1080;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1082 = x1033 - x1081;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1082 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1083 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1083 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1084 = x1083 * x72;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1085 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1085 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1086 = x1085 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1087 = x1084 + x1086;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1088 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1088 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1089 = x1087 + x1088;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1090 = x1089 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1091 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1091 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1092 = x1091 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1093 = x1090 + x1092;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1094 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1094 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1095 = x1093 + x1094;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1096 = x1032 - x1095;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1096 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1097 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1097 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1098 = x1097 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1099 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1099 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1100 = x1099 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1101 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1101 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1102 = x1100 + x1101;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1103 = x1102 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1104 = x1098 + x1103;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1105 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1105 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1106 = x1105 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1107 = x1104 + x1106;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1108 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1108 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1109 = x1107 + x1108;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1110 = x1031 - x1109;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1110 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1111 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1111 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1112 = x1111 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x1113 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1113 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1114 = x1112 + x1113;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1115 = x1030 - x1114;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1115 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1030;
        host_args.at(1) = x1031;
        host_args.at(2) = x1032;
        host_args.at(3) = x1033;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1116 = host_outs.at(0);
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1117 = (x1116 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1117);
            reg = x1117;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1118 = x1116 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1119 = (x1118 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1119);
            reg = x1119;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1120 = x1116 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1121 = (x1120 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1121);
            reg = x1121;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1122 = x1116 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1123 = (x1122 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1123);
            reg = x1123;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1124 = x1116 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1125 = (x1124 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1125);
            reg = x1125;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1126 = x1116 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1127 = (x1126 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1127);
            reg = x1127;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1128 = x1116 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1129 = (x1128 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1129);
            reg = x1129;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1130 = x1116 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1131 = (x1130 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1131);
            reg = x1131;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1132 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1132 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1133 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1133 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1134 = x1133 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1135 = x1132 + x1134;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1136 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1136 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1137 = x1136 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1138 = x1135 + x1137;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1139 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1139 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1140 = x1139 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1141 = x1138 + x1140;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1142 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1142 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1143 = x1142 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1144 = x1141 + x1143;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1145 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1145 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1146 = x1145 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1147 = x1144 + x1146;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1148 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1148 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1149 = x1148 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1150 = x1147 + x1149;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x1151 = x1150 - x1116;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x1151 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":38:68))
        auto x1152 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1152 != Fp::invalid());
        if (x1152 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":39:68))
        auto x1153 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1153 != Fp::invalid());
        if (x1153 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":40:69))
        auto x1154 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1154 != Fp::invalid());
        if (x1154 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":41:69))
        auto x1155 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1155 != Fp::invalid());
        if (x1155 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":42:69))
        auto x1156 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1156 != Fp::invalid());
        if (x1156 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":43:68))
        auto x1157 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1157 != Fp::invalid());
        if (x1157 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":44:68))
        auto x1158 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1158 != Fp::invalid());
        if (x1158 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":45:68))
        auto x1159 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1159 != Fp::invalid());
        if (x1159 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1160 = x1073 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1161 = x1076 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1162 = x1160 + x1161;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1163 = x1080 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1164 = x1163 + x1089;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1165 = x1162 + x1164;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1166 = x1066 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1167 = x1068 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1168 = x1166 + x1167;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1169 = x1168 + x1070;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1170 = x1066 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1165);
            reg = x1165;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1169);
            reg = x1169;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1170);
            reg = x1170;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1170);
            reg = x1170;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1171 = x1091 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1172 = x1094 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1173 = x1171 + x1172;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1174 = x1173 + x1097;
      // loc("zirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1175 = x1174 + x48;
      {
        host_args.at(0) = x1175;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1176 = host_outs.at(0);
        auto x1177 = host_outs.at(1);
        auto x1178 = host_outs.at(2);
        auto x1179 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1176);
          reg = x1176;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1177);
          reg = x1177;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1178);
          reg = x1178;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1179);
          reg = x1179;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1180 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1180 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1181 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1182 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1182 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1183 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x1183 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1175);
        reg = x1175;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1180);
        reg = x1180;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1181);
        reg = x1181;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1182);
        reg = x1182;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1183);
        reg = x1183;
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1184 = x1080 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1185 = x1184 + x1089;
      // loc("zirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1186 = x1185 + x48;
      {
        host_args.at(0) = x1186;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1187 = host_outs.at(0);
        auto x1188 = host_outs.at(1);
        auto x1189 = host_outs.at(2);
        auto x1190 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1187);
          reg = x1187;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1188);
          reg = x1188;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1189);
          reg = x1189;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1190);
          reg = x1190;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1191 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1191 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1192 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1192 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1193 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1193 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1194 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x1194 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1186);
        reg = x1186;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1191);
        reg = x1191;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1192);
        reg = x1192;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1193);
        reg = x1193;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1194);
        reg = x1194;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1195 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1195 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":139:17)
      auto x1196 = x96 - x1195;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1197 = x1196 * x1180;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1198 = x1196 * x1181;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1199 = x1196 * x1182;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1200 = x1196 * x1183;
      // loc("zirgen/circuit/rv32im/body.cpp":35:52)
      auto x1201 = x864 * x79;
      // loc("zirgen/circuit/rv32im/body.cpp":35:41)
      auto x1202 = x861 + x1201;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x1203 = x854 - x79;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1204 = x1195 * x1203;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1205 = x1195 * x855;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1206 = x1195 * x858;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1207 = x1195 * x1202;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1208 = x1197 + x1204;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1209 = x1198 + x1205;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1210 = x1199 + x1206;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1211 = x1200 + x1207;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1212 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1212 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":141:17)
      auto x1213 = x96 - x1212;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1214 = x1213 * x1191;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1215 = x1213 * x1192;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1216 = x1213 * x1193;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1217 = x1213 * x1194;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1218 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1218 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1219 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1219 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1220 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1220 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1221 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1221 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1222 = x1212 * x1218;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1223 = x1212 * x1219;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1224 = x1212 * x1220;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1225 = x1212 * x1221;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1226 = x1214 + x1222;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1227 = x1215 + x1223;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1228 = x1216 + x1224;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1229 = x1217 + x1225;
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x1230 = Fp(x1211.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x1231 = x1230 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1231);
          reg = x1231;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x1232 = Fp(x1211.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x1233 = x1232 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1233);
          reg = x1233;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1234 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1234 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1235 = x1234 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1236 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1236 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x1237 = x1236 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1238 = x1235 + x1237;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x1239 = x1211 - x1238;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x1239 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x1240 = Fp(x1229.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x1241 = x1240 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1241);
          reg = x1241;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x1242 = Fp(x1229.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x1243 = x1242 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1243);
          reg = x1243;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1244 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1244 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1245 = x1244 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1246 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x1246 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x1247 = x1246 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1248 = x1245 + x1247;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x1249 = x1229 - x1248;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x1249 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1226);
        reg = x1226;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1227);
        reg = x1227;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1228);
        reg = x1228;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1229);
        reg = x1229;
      }
      {
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1250 = Fp(x1208.asUInt32() & x1226.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1251 = Fp(x1209.asUInt32() & x1227.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1252 = Fp(x1210.asUInt32() & x1228.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1253 = Fp(x1211.asUInt32() & x1229.asUInt32());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1250);
          reg = x1250;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1251);
          reg = x1251;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1252);
          reg = x1252;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1253);
          reg = x1253;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1254 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1254 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1255 = x1254 * x1208;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1256 = x1254 * x1209;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1257 = x1254 * x1210;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1258 = x1254 * x1211;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1259 = x1255 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1260 = x1256 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1261 = x1257 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1262 = x1258 + x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1263 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1263 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1264 = x1263 * x1226;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1265 = x1263 * x1227;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1266 = x1263 * x1228;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1267 = x1263 * x1229;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1268 = x1259 + x1264;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1269 = x1260 + x1265;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1270 = x1261 + x1266;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1271 = x1262 + x1267;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1272 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1272 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1273 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1273 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1274 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1274 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1275 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1275 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1276 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x1276 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1277 = x1272 * x1273;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1278 = x1272 * x1274;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1279 = x1272 * x1275;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1280 = x1272 * x1276;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1281 = x1268 + x1277;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1282 = x1269 + x1278;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1283 = x1270 + x1279;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1284 = x1271 + x1280;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x1285 = x1282 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x1286 = x1281 + x1285;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1287 = Fp(x1286.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1287);
          reg = x1287;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1288 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x1288 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1289 = x1286 - x1288;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1290 = x1289 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1291 = Fp(x1290.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1291);
          reg = x1291;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1292 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1292 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1293 = x1290 - x1292;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1294 = x1293 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1294);
        reg = x1294;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1295 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1295 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x1296 = x1295 + x1283;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x1297 = x1284 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x1298 = x1296 + x1297;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1299 = Fp(x1298.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1299);
          reg = x1299;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1300 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1300 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1301 = x1298 - x1300;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1302 = x1301 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1303 = Fp(x1302.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1303);
          reg = x1303;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1304 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1304 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1305 = x1302 - x1304;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1306 = x1305 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1306);
        reg = x1306;
      }
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x1307 = Fp(x1304.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x1308 = x1307 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1308);
          reg = x1308;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x1309 = Fp(x1304.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x1310 = x1309 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1310);
          reg = x1310;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1311 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x1311 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1312 = x1311 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1313 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x1313 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x1314 = x1313 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1315 = x1312 + x1314;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x1316 = x1304 - x1315;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x1316 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/circuit/rv32im/compute.cpp":69:23)
      auto x1317 = x96 - x1244;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1318 = x1234 * x1317;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:34)
      auto x1319 = x96 - x1311;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1320 = x1318 * x1319;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:45)
      auto x1321 = x96 - x1234;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1322 = x1321 * x1244;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:44)
      auto x1323 = x1322 * x1311;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x1324 = x1320 + x1323;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1324);
        reg = x1324;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x1325 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x1325 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1326 = x1325 + x1311;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1327 = x1325 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:27)
      auto x1328 = x1327 * x1311;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:11)
      auto x1329 = x1326 - x1328;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1329);
        reg = x1329;
      }
      // loc("zirgen/components/u32.cpp":137:26)
      auto x1330 = x1292 * x91;
      // loc("zirgen/components/u32.cpp":137:12)
      auto x1331 = x1288 + x1330;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x1332 = (x1331 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1332);
          reg = x1332;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x1333 = inv(x1331);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1333);
          reg = x1333;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1334 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x1334 != Fp::invalid());
      if (x1334 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x1331 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x1335 = x96 - x1334;
      if (x1335 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1336 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x1336 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1337 = x1331 * x1336;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1338 = x1337 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x1338 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":138:27)
      auto x1339 = x1304 * x91;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x1340 = x1300 + x1339;
      // loc("zirgen/components/u32.cpp":138:47)
      auto x1341 = x1335 * x81;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x1342 = x1340 + x1341;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x1343 = (x1342 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1343);
          reg = x1343;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x1344 = inv(x1342);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1344);
          reg = x1344;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1345 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x1345 != Fp::invalid());
      if (x1345 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x1342 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x1346 = x96 - x1345;
      if (x1346 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1347 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x1347 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1348 = x1342 * x1347;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1349 = x1348 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x1349 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1350 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x1350 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1351 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x1351 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":97:10)
      auto x1352 = x96 - x1351;
      host_args.at(0) = x1218;
      host_args.at(1) = x1219;
      host_args.at(2) = x1220;
      host_args.at(3) = x1221;
      host_args.at(4) = x1174;
      host_args.at(5) = x1180;
      host_args.at(6) = x1181;
      host_args.at(7) = x1182;
      host_args.at(8) = x1183;
      host_args.at(9) = x1185;
      host_args.at(10) = x1191;
      host_args.at(11) = x1192;
      host_args.at(12) = x1193;
      host_args.at(13) = x1194;
      host_args.at(14) = x1208;
      host_args.at(15) = x1209;
      host_args.at(16) = x1210;
      host_args.at(17) = x1211;
      host_args.at(18) = x1226;
      host_args.at(19) = x1227;
      host_args.at(20) = x1228;
      host_args.at(21) = x1229;
      host_args.at(22) = x1288;
      host_args.at(23) = x1292;
      host_args.at(24) = x1300;
      host_args.at(25) = x1304;
      host_args.at(26) = x1345;
      host_args.at(27) = x1350;
      host_args.at(28) = x1352;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1353 = x1105 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
      auto x1354 = x1108 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1355 = x1353 + x1354;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x1356 = x1355 + x1111;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x1357 = (x1356 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1357);
          reg = x1357;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x1358 = inv(x1356);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1358);
          reg = x1358;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1359 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x1359 != Fp::invalid());
      if (x1359 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x1356 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x1360 = x96 - x1359;
      if (x1360 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1361 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x1361 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1362 = x1356 * x1361;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x1363 = x1362 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x1363 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/compute.cpp":161:13)
      auto x1364 = x867 + x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":38:68))
      auto x1365 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x1365 != Fp::invalid());
      if (x1365 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":38:68)
        auto x1366 = x1113 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1366 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1102 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:38");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":38:68)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:38");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1367 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1368 = Fp(x1367.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1368);
            reg = x1368;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1369 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1369 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1370 = x1367 - x1369;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1371 = x1370 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1372 = Fp(x1371.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1372);
            reg = x1372;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1373 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1373 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1374 = x1371 - x1373;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1375 = x1374 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1376 = Fp(x1375.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1376);
            reg = x1376;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1377 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1377 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1378 = x1375 - x1377;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1379 = x1378 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1380 = Fp(x1379.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1380);
            reg = x1380;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1381 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1381 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1382 = x1379 - x1381;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1383 = x1382 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1383);
          reg = x1383;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1384 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1384 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1385 = x96 - x1384;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1386 = x1384 * x1385;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1386);
          reg = x1386;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1387 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1387 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1388 = x93 - x1384;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1389 = x1387 * x1388;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1389 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1390 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1390 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":38:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1390);
          reg = x1390;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1288;
          host_args.at(2) = x1292;
          host_args.at(3) = x1300;
          host_args.at(4) = x1304;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":38:68)
          auto x1391 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1288);
            reg = x1288;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1292);
            reg = x1292;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1300);
            reg = x1300;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          {
            host_args.at(0) = x1391;
            host_args.at(1) = x1288;
            host_args.at(2) = x1292;
            host_args.at(3) = x1300;
            host_args.at(4) = x1304;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1392 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1392 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1393 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1393 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1394 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1394 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1395 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1395 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1391);
            reg = x1391;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1392);
            reg = x1392;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1393);
            reg = x1393;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1394);
            reg = x1394;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1395);
            reg = x1395;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":39:68))
      auto x1396 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x1396 != Fp::invalid());
      if (x1396 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1397 = x1113 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1397 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1102 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:39");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":39:68)
        auto x1398 = x1078 - x60;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":39:68)
        if (x1398 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:39");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1399 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1400 = Fp(x1399.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1400);
            reg = x1400;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1401 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1401 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1402 = x1399 - x1401;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1403 = x1402 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1404 = Fp(x1403.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1404);
            reg = x1404;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1405 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1405 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1406 = x1403 - x1405;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1407 = x1406 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1408 = Fp(x1407.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1408);
            reg = x1408;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1409 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1409 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1410 = x1407 - x1409;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1411 = x1410 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1412 = Fp(x1411.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1412);
            reg = x1412;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1413 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1413 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1414 = x1411 - x1413;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1415 = x1414 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1415);
          reg = x1415;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1416 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1416 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1417 = x96 - x1416;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1418 = x1416 * x1417;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1418);
          reg = x1418;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1419 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1419 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1420 = x93 - x1416;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1421 = x1419 * x1420;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1421 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1422 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1422 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":39:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1422);
          reg = x1422;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1288;
          host_args.at(2) = x1292;
          host_args.at(3) = x1300;
          host_args.at(4) = x1304;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":39:68)
          auto x1423 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1288);
            reg = x1288;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1292);
            reg = x1292;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1300);
            reg = x1300;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          {
            host_args.at(0) = x1423;
            host_args.at(1) = x1288;
            host_args.at(2) = x1292;
            host_args.at(3) = x1300;
            host_args.at(4) = x1304;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1424 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1424 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1425 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1425 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1426 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1426 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1427 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1427 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1423);
            reg = x1423;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1424);
            reg = x1424;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1425);
            reg = x1425;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1426);
            reg = x1426;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1427);
            reg = x1427;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":40:69))
      auto x1428 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x1428 != Fp::invalid());
      if (x1428 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1429 = x1113 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1429 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":40:69)
        auto x1430 = x1102 - x79;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1430 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:40");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":40:69)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:40");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1431 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1432 = Fp(x1431.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1432);
            reg = x1432;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1433 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1433 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1434 = x1431 - x1433;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1435 = x1434 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1436 = Fp(x1435.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1436);
            reg = x1436;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1437 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1437 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1438 = x1435 - x1437;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1439 = x1438 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1440 = Fp(x1439.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1440);
            reg = x1440;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1441 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1441 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1442 = x1439 - x1441;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1443 = x1442 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1444 = Fp(x1443.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1444);
            reg = x1444;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1445 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1445 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1446 = x1443 - x1445;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1447 = x1446 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1447);
          reg = x1447;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1448 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1448 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1449 = x96 - x1448;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1450 = x1448 * x1449;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1450);
          reg = x1450;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1451 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1451 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1452 = x93 - x1448;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1453 = x1451 * x1452;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1453 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1454 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1454 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":40:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1454);
          reg = x1454;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1288;
          host_args.at(2) = x1292;
          host_args.at(3) = x1300;
          host_args.at(4) = x1304;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":40:69)
          auto x1455 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1288);
            reg = x1288;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1292);
            reg = x1292;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1300);
            reg = x1300;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          {
            host_args.at(0) = x1455;
            host_args.at(1) = x1288;
            host_args.at(2) = x1292;
            host_args.at(3) = x1300;
            host_args.at(4) = x1304;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1456 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1456 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1457 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1457 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1458 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1458 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1459 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1459 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1455);
            reg = x1455;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1456);
            reg = x1456;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1457);
            reg = x1457;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1458);
            reg = x1458;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1459);
            reg = x1459;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":41:69))
      auto x1460 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x1460 != Fp::invalid());
      if (x1460 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1461 = x1113 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1461 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":41:69)
        auto x1462 = x1102 - x74;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1462 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:41");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":41:69)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:41");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1463 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1464 = Fp(x1463.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1464);
            reg = x1464;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1465 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1465 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1466 = x1463 - x1465;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1467 = x1466 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1468 = Fp(x1467.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1468);
            reg = x1468;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1469 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1469 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1470 = x1467 - x1469;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1471 = x1470 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1472 = Fp(x1471.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1472);
            reg = x1472;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1473 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1473 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1474 = x1471 - x1473;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1475 = x1474 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1476 = Fp(x1475.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1476);
            reg = x1476;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1477 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1477 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1478 = x1475 - x1477;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1479 = x1478 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1479);
          reg = x1479;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1480 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1480 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1481 = x96 - x1480;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1482 = x1480 * x1481;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1482);
          reg = x1482;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1483 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1483 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1484 = x93 - x1480;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1485 = x1483 * x1484;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1485 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1486 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1486 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":41:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1486);
          reg = x1486;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1288;
          host_args.at(2) = x1292;
          host_args.at(3) = x1300;
          host_args.at(4) = x1304;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":41:69)
          auto x1487 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1288);
            reg = x1288;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1292);
            reg = x1292;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1300);
            reg = x1300;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          {
            host_args.at(0) = x1487;
            host_args.at(1) = x1288;
            host_args.at(2) = x1292;
            host_args.at(3) = x1300;
            host_args.at(4) = x1304;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1488 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1488 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1489 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1489 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1490 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1490 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1491 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1491 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1487);
            reg = x1487;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1488);
            reg = x1488;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1489);
            reg = x1489;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1490);
            reg = x1490;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1491);
            reg = x1491;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":42:69))
      auto x1492 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x1492 != Fp::invalid());
      if (x1492 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1493 = x1113 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1493 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":42:69)
        auto x1494 = x1102 - x73;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1494 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:42");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":42:69)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:42");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1495 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1496 = Fp(x1495.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1496);
            reg = x1496;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1497 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1497 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1498 = x1495 - x1497;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1499 = x1498 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1500 = Fp(x1499.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1500);
            reg = x1500;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1501 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1501 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1502 = x1499 - x1501;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1503 = x1502 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1504 = Fp(x1503.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1504);
            reg = x1504;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1505 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1505 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1506 = x1503 - x1505;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1507 = x1506 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1508 = Fp(x1507.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1508);
            reg = x1508;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1509 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1509 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1510 = x1507 - x1509;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1511 = x1510 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1511);
          reg = x1511;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1512 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1512 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1513 = x96 - x1512;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1514 = x1512 * x1513;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1514);
          reg = x1514;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1515 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1515 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1516 = x93 - x1512;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1517 = x1515 * x1516;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1517 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1518 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1518 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":42:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1518);
          reg = x1518;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1288;
          host_args.at(2) = x1292;
          host_args.at(3) = x1300;
          host_args.at(4) = x1304;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":42:69)
          auto x1519 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1288);
            reg = x1288;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1292);
            reg = x1292;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1300);
            reg = x1300;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          {
            host_args.at(0) = x1519;
            host_args.at(1) = x1288;
            host_args.at(2) = x1292;
            host_args.at(3) = x1300;
            host_args.at(4) = x1304;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1520 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1520 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1521 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1521 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1522 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1522 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1523 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1523 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1519);
            reg = x1519;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1520);
            reg = x1520;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1521);
            reg = x1521;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1522);
            reg = x1522;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1523);
            reg = x1523;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":43:68))
      auto x1524 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x1524 != Fp::invalid());
      if (x1524 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1525 = x1113 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1525 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":43:68)
        auto x1526 = x1102 - x93;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1526 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:43");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":43:68)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:43");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1527 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1528 = Fp(x1527.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1528);
            reg = x1528;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1529 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1529 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1530 = x1527 - x1529;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1531 = x1530 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1532 = Fp(x1531.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1532);
            reg = x1532;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1533 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1533 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1534 = x1531 - x1533;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1535 = x1534 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1536 = Fp(x1535.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1536);
            reg = x1536;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1537 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1537 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1538 = x1535 - x1537;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1539 = x1538 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1540 = Fp(x1539.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1540);
            reg = x1540;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1541 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1541 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1542 = x1539 - x1541;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1543 = x1542 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1543);
          reg = x1543;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1544 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1544 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1545 = x96 - x1544;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1546 = x1544 * x1545;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1546);
          reg = x1546;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1547 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1547 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1548 = x93 - x1544;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1549 = x1547 * x1548;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1549 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1550 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1550 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":43:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1550);
          reg = x1550;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1350;
          host_args.at(2) = x95;
          host_args.at(3) = x95;
          host_args.at(4) = x95;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":43:68)
          auto x1551 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1350);
            reg = x1350;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            host_args.at(0) = x1551;
            host_args.at(1) = x1350;
            host_args.at(2) = x95;
            host_args.at(3) = x95;
            host_args.at(4) = x95;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1552 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1552 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1553 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1553 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1554 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1554 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1555 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1555 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1551);
            reg = x1551;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1552);
            reg = x1552;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1553);
            reg = x1553;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1554);
            reg = x1554;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1555);
            reg = x1555;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":44:68))
      auto x1556 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x1556 != Fp::invalid());
      if (x1556 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1557 = x1113 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1557 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":44:68)
        auto x1558 = x1102 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1558 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:44");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":44:68)
        if (x1078 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:44");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1559 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1560 = Fp(x1559.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1560);
            reg = x1560;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1561 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1561 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1562 = x1559 - x1561;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1563 = x1562 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1564 = Fp(x1563.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1564);
            reg = x1564;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1565 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1565 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1566 = x1563 - x1565;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1567 = x1566 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1568 = Fp(x1567.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1568);
            reg = x1568;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1569 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1569 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1570 = x1567 - x1569;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1571 = x1570 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1572 = Fp(x1571.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1572);
            reg = x1572;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1573 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1573 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1574 = x1571 - x1573;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1575 = x1574 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1575);
          reg = x1575;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1576 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1576 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1577 = x96 - x1576;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1578 = x1576 * x1577;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1578);
          reg = x1578;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1579 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1579 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1580 = x93 - x1576;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1581 = x1579 * x1580;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1581 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1582 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1582 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":44:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1582);
          reg = x1582;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1352;
          host_args.at(2) = x95;
          host_args.at(3) = x95;
          host_args.at(4) = x95;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":44:68)
          auto x1583 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1352);
            reg = x1352;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            host_args.at(0) = x1583;
            host_args.at(1) = x1352;
            host_args.at(2) = x95;
            host_args.at(3) = x95;
            host_args.at(4) = x95;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1584 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1584 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1585 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1585 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1586 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1586 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1587 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1587 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1583);
            reg = x1583;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1584);
            reg = x1584;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1585);
            reg = x1585;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1586);
            reg = x1586;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1587);
            reg = x1587;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":45:68))
      auto x1588 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x1588 != Fp::invalid());
      if (x1588 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":45:68)
        auto x1589 = x1113 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1589 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:45");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":45:68)
        if (x1102 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:45");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1590 = x1073 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x1591 = x1076 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1592 = x1590 + x1591;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x1593 = x1592 + x1185;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1594 = x1066 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x1595 = x1068 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1596 = x1594 + x1595;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x1597 = x1596 + x1070;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x1598 = x1066 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1593);
          reg = x1593;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1597);
          reg = x1597;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1598);
          reg = x1598;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1598);
          reg = x1598;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x1599 = x1364 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1600 = Fp(x1599.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1600);
            reg = x1600;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1601 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x1601 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1602 = x1599 - x1601;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1603 = x1602 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1604 = Fp(x1603.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1604);
            reg = x1604;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1605 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x1605 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1606 = x1603 - x1605;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1607 = x1606 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x1608 = Fp(x1607.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1608);
            reg = x1608;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x1609 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x1609 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x1610 = x1607 - x1609;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x1611 = x1610 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x1612 = Fp(x1611.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1612);
            reg = x1612;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1613 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x1613 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x1614 = x1611 - x1613;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x1615 = x1614 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1615);
          reg = x1615;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1616 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x1616 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x1617 = x96 - x1616;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x1618 = x1616 * x1617;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1618);
          reg = x1618;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1619 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x1619 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x1620 = x93 - x1616;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x1621 = x1619 * x1620;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x1621 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x1622 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x1622 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":45:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1622);
          reg = x1622;
        }
        if (x1360 != 0) {
          host_args.at(0) = x1356;
          host_args.at(1) = x1288;
          host_args.at(2) = x1292;
          host_args.at(3) = x1300;
          host_args.at(4) = x1304;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":45:68)
          auto x1623 = x1356 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1288);
            reg = x1288;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1292);
            reg = x1292;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1300);
            reg = x1300;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1304);
            reg = x1304;
          }
          {
            host_args.at(0) = x1623;
            host_args.at(1) = x1288;
            host_args.at(2) = x1292;
            host_args.at(3) = x1300;
            host_args.at(4) = x1304;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1624 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x1624 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1625 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x1625 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1626 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x1626 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x1627 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x1627 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1623);
            reg = x1623;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1624);
            reg = x1624;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1625);
            reg = x1625;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1626);
            reg = x1626;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1627);
            reg = x1627;
          }
        }
        if (x1359 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[1](Reg)"("./zirgen/components/mux.h":49:25))
    auto x1628 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x1628 != Fp::invalid());
    if (x1628 != 0) {
      // loc("zirgen/circuit/rv32im/compute.cpp":112:41)
      auto x1629 = x867 * x77;
      {
        host_args.at(0) = x1629;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1630 = host_outs.at(0);
        auto x1631 = host_outs.at(1);
        auto x1632 = host_outs.at(2);
        auto x1633 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1630);
          reg = x1630;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1631);
          reg = x1631;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1632);
          reg = x1632;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1633);
          reg = x1633;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1634 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x1634 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1635 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x1635 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1636 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x1636 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1637 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x1637 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1629);
        reg = x1629;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1634);
        reg = x1634;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1635);
        reg = x1635;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1636);
        reg = x1636;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1637);
        reg = x1637;
      }
      {
        // loc("zirgen/circuit/rv32im/decode.cpp":11:16)
        auto x1638 = Fp(x1637.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":11:15)
        auto x1639 = x1638 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1639);
          reg = x1639;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":12:17)
        auto x1640 = Fp(x1637.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":12:16)
        auto x1641 = x1640 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1641);
          reg = x1641;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":13:16)
        auto x1642 = Fp(x1637.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":13:15)
        auto x1643 = x1642 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1643);
          reg = x1643;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":14:16)
        auto x1644 = Fp(x1637.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":14:15)
        auto x1645 = x1644 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1645);
          reg = x1645;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":15:17)
        auto x1646 = Fp(x1637.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":15:16)
        auto x1647 = x1646 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1647);
          reg = x1647;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":16:17)
        auto x1648 = Fp(x1637.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1648);
          reg = x1648;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":17:17)
        auto x1649 = Fp(x1636.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":17:16)
        auto x1650 = x1649 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1650);
          reg = x1650;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":18:18)
        auto x1651 = Fp(x1636.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":18:17)
        auto x1652 = x1651 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1652);
          reg = x1652;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":19:17)
        auto x1653 = Fp(x1636.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":19:16)
        auto x1654 = x1653 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1654);
          reg = x1654;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":20:18)
        auto x1655 = Fp(x1636.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":20:17)
        auto x1656 = x1655 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1656);
          reg = x1656;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":21:18)
        auto x1657 = Fp(x1636.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1657);
          reg = x1657;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":22:17)
        auto x1658 = Fp(x1635.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":22:16)
        auto x1659 = x1658 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1659);
          reg = x1659;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":23:19)
        auto x1660 = Fp(x1635.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":23:18)
        auto x1661 = x1660 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1661);
          reg = x1661;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":24:20)
        auto x1662 = Fp(x1635.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":24:19)
        auto x1663 = x1662 * x58;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1663);
          reg = x1663;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":25:17)
        auto x1664 = Fp(x1635.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":25:16)
        auto x1665 = x1664 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1665);
          reg = x1665;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":26:17)
        auto x1666 = Fp(x1635.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1666);
          reg = x1666;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":27:16)
        auto x1667 = Fp(x1634.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":27:15)
        auto x1668 = x1667 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1668);
          reg = x1668;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":28:18)
        auto x1669 = Fp(x1634.asUInt32() & x52.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1669);
          reg = x1669;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1670 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x1670 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1671 = x1670 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1672 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x1672 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1673 = x1672 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1674 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x1674 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:25)
      auto x1675 = x1674 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1676 = x1673 + x1675;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1677 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x1677 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:39)
      auto x1678 = x1677 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1679 = x1676 + x1678;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1680 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x1680 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x1681 = x1679 + x1680;
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x1682 = x1671 + x1681;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1683 = x1682 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1684 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x1684 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x1685 = x1683 + x1684;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      auto x1686 = x1637 - x1685;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      if (x1686 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1687 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x1687 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1688 = x1687 * x72;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1689 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x1689 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:37)
      auto x1690 = x1689 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1691 = x1688 + x1690;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1692 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x1692 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x1693 = x1691 + x1692;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1694 = x1693 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1695 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x1695 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:69)
      auto x1696 = x1695 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1697 = x1694 + x1696;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1698 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x1698 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x1699 = x1697 + x1698;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      auto x1700 = x1636 - x1699;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      if (x1700 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1701 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x1701 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1702 = x1701 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1703 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x1703 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1704 = x1703 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1705 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x1705 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x1706 = x1704 + x1705;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:36)
      auto x1707 = x1706 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1708 = x1702 + x1707;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1709 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x1709 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:53)
      auto x1710 = x1709 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1711 = x1708 + x1710;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1712 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x1712 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x1713 = x1711 + x1712;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      auto x1714 = x1635 - x1713;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      if (x1714 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1715 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x1715 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1716 = x1715 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x1717 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x1717 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x1718 = x1716 + x1717;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      auto x1719 = x1634 - x1718;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      if (x1719 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x1634;
        host_args.at(1) = x1635;
        host_args.at(2) = x1636;
        host_args.at(3) = x1637;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x1720 = host_outs.at(0);
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1721 = (x1720 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1721);
            reg = x1721;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1722 = x1720 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1723 = (x1722 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1723);
            reg = x1723;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1724 = x1720 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1725 = (x1724 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1725);
            reg = x1725;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1726 = x1720 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1727 = (x1726 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1727);
            reg = x1727;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1728 = x1720 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1729 = (x1728 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1729);
            reg = x1729;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1730 = x1720 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1731 = (x1730 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1731);
            reg = x1731;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1732 = x1720 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1733 = (x1732 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1733);
            reg = x1733;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1734 = x1720 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x1735 = (x1734 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1735);
            reg = x1735;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1736 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1736 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1737 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1737 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1738 = x1737 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1739 = x1736 + x1738;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1740 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1740 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1741 = x1740 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1742 = x1739 + x1741;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1743 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1743 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1744 = x1743 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1745 = x1742 + x1744;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1746 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1746 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1747 = x1746 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1748 = x1745 + x1747;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1749 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1749 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1750 = x1749 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1751 = x1748 + x1750;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x1752 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1752 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x1753 = x1752 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x1754 = x1751 + x1753;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x1755 = x1754 - x1720;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x1755 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":46:69))
        auto x1756 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x1756 != Fp::invalid());
        if (x1756 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1757 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1758 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1759 = x1757 + x1758;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1760 = x1684 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1761 = x1760 + x1693;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1762 = x1759 + x1761;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1763 = x1670 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1764 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1765 = x1763 + x1764;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1766 = x1765 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1767 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1762);
            reg = x1762;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1766);
            reg = x1766;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1767);
            reg = x1767;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1767);
            reg = x1767;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":43:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":44:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":45:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x50);
            reg = x50;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":47:69))
        auto x1768 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x1768 != Fp::invalid());
        if (x1768 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1769 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1770 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1771 = x1769 + x1770;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1772 = x1684 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1773 = x1772 + x1693;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1774 = x1771 + x1773;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1775 = x1670 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1776 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1777 = x1775 + x1776;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1778 = x1777 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1779 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1774);
            reg = x1774;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1778);
            reg = x1778;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1779);
            reg = x1779;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1779);
            reg = x1779;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":38:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":39:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":40:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":48:69))
        auto x1780 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x1780 != Fp::invalid());
        if (x1780 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1781 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1782 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1783 = x1781 + x1782;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1784 = x1684 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1785 = x1784 + x1693;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1786 = x1783 + x1785;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1787 = x1670 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1788 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1789 = x1787 + x1788;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1790 = x1789 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1791 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1786);
            reg = x1786;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1790);
            reg = x1790;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1791);
            reg = x1791;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1791);
            reg = x1791;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":33:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":35:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x74);
            reg = x74;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":49:68))
        auto x1792 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x1792 != Fp::invalid());
        if (x1792 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1793 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1794 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1795 = x1793 + x1794;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1796 = x1684 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1797 = x1796 + x1693;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1798 = x1795 + x1797;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1799 = x1670 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1800 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1801 = x1799 + x1800;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1802 = x1801 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1803 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1798);
            reg = x1798;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1802);
            reg = x1802;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1803);
            reg = x1803;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1803);
            reg = x1803;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":50:68))
        auto x1804 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x1804 != Fp::invalid());
        if (x1804 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1805 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x1806 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1807 = x1805 + x1806;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1808 = x1684 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x1809 = x1808 + x1693;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x1810 = x1807 + x1809;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1811 = x1670 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x1812 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1813 = x1811 + x1812;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x1814 = x1813 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x1815 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1810);
            reg = x1810;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1814);
            reg = x1814;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1815);
            reg = x1815;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1815);
            reg = x1815;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":51:68))
        auto x1816 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x1816 != Fp::invalid());
        if (x1816 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1817 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1818 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1819 = x1817 + x1818;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1820 = x1709 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1821 = x1819 + x1820;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1822 = x1712 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1823 = x1821 + x1822;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1824 = x1670 * x43;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1825 = x1715 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1826 = x1824 + x1825;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1827 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1828 = x1826 + x1827;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1829 = x1828 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1830 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1823);
            reg = x1823;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1829);
            reg = x1829;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1830);
            reg = x1830;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1830);
            reg = x1830;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":52:68))
        auto x1831 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x1831 != Fp::invalid());
        if (x1831 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1832 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1833 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1834 = x1832 + x1833;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1835 = x1709 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1836 = x1834 + x1835;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1837 = x1712 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1838 = x1836 + x1837;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1839 = x1670 * x43;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1840 = x1715 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1841 = x1839 + x1840;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1842 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1843 = x1841 + x1842;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1844 = x1843 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1845 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1838);
            reg = x1838;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1844);
            reg = x1844;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1845);
            reg = x1845;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1845);
            reg = x1845;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":53:68))
        auto x1846 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x1846 != Fp::invalid());
        if (x1846 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1847 = x1677 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
          auto x1848 = x1680 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1849 = x1847 + x1848;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:36)
          auto x1850 = x1709 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1851 = x1849 + x1850;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:51)
          auto x1852 = x1712 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x1853 = x1851 + x1852;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1854 = x1670 * x43;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
          auto x1855 = x1715 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1856 = x1854 + x1855;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
          auto x1857 = x1672 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1858 = x1856 + x1857;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x1859 = x1858 + x1674;
          // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
          auto x1860 = x1670 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1853);
            reg = x1853;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1859);
            reg = x1859;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1860);
            reg = x1860;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1860);
            reg = x1860;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1861 = x1695 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:26)
      auto x1862 = x1698 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1863 = x1861 + x1862;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x1864 = x1863 + x1701;
      // loc("zirgen/circuit/rv32im/compute.cpp":134:39)
      auto x1865 = x1864 + x48;
      {
        host_args.at(0) = x1865;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1866 = host_outs.at(0);
        auto x1867 = host_outs.at(1);
        auto x1868 = host_outs.at(2);
        auto x1869 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1866);
          reg = x1866;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1867);
          reg = x1867;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1868);
          reg = x1868;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1869);
          reg = x1869;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1870 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x1870 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1871 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x1871 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1872 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x1872 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1873 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x1873 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1865);
        reg = x1865;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1870);
        reg = x1870;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1871);
        reg = x1871;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1872);
        reg = x1872;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1873);
        reg = x1873;
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1874 = x1684 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x1875 = x1874 + x1693;
      // loc("zirgen/circuit/rv32im/compute.cpp":135:39)
      auto x1876 = x1875 + x48;
      {
        host_args.at(0) = x1876;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x1877 = host_outs.at(0);
        auto x1878 = host_outs.at(1);
        auto x1879 = host_outs.at(2);
        auto x1880 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1877);
          reg = x1877;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1878);
          reg = x1878;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1879);
          reg = x1879;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1880);
          reg = x1880;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1881 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x1881 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1882 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x1882 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1883 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x1883 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1884 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x1884 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1876);
        reg = x1876;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1881);
        reg = x1881;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1882);
        reg = x1882;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1883);
        reg = x1883;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1884);
        reg = x1884;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1885 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x1885 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":139:17)
      auto x1886 = x96 - x1885;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1887 = x1886 * x1870;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1888 = x1886 * x1871;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1889 = x1886 * x1872;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1890 = x1886 * x1873;
      // loc("zirgen/circuit/rv32im/body.cpp":35:52)
      auto x1891 = x864 * x79;
      // loc("zirgen/circuit/rv32im/body.cpp":35:41)
      auto x1892 = x861 + x1891;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x1893 = x854 - x79;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1894 = x1885 * x1893;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1895 = x1885 * x855;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1896 = x1885 * x858;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1897 = x1885 * x1892;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1898 = x1887 + x1894;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1899 = x1888 + x1895;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1900 = x1889 + x1896;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1901 = x1890 + x1897;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1902 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x1902 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":141:17)
      auto x1903 = x96 - x1902;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1904 = x1903 * x1881;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1905 = x1903 * x1882;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1906 = x1903 * x1883;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1907 = x1903 * x1884;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1908 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x1908 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1909 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x1909 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1910 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x1910 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1911 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x1911 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1912 = x1902 * x1908;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1913 = x1902 * x1909;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1914 = x1902 * x1910;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1915 = x1902 * x1911;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1916 = x1904 + x1912;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1917 = x1905 + x1913;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1918 = x1906 + x1914;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1919 = x1907 + x1915;
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x1920 = Fp(x1901.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x1921 = x1920 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1921);
          reg = x1921;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x1922 = Fp(x1901.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x1923 = x1922 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1923);
          reg = x1923;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1924 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x1924 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1925 = x1924 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1926 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x1926 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x1927 = x1926 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1928 = x1925 + x1927;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x1929 = x1901 - x1928;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x1929 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x1930 = Fp(x1919.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x1931 = x1930 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1931);
          reg = x1931;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x1932 = Fp(x1919.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x1933 = x1932 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1933);
          reg = x1933;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1934 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x1934 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1935 = x1934 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x1936 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x1936 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x1937 = x1936 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x1938 = x1935 + x1937;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x1939 = x1919 - x1938;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x1939 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1916);
        reg = x1916;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1917);
        reg = x1917;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1918);
        reg = x1918;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1919);
        reg = x1919;
      }
      {
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1940 = Fp(x1898.asUInt32() & x1916.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1941 = Fp(x1899.asUInt32() & x1917.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1942 = Fp(x1900.asUInt32() & x1918.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x1943 = Fp(x1901.asUInt32() & x1919.asUInt32());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1940);
          reg = x1940;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1941);
          reg = x1941;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1942);
          reg = x1942;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1943);
          reg = x1943;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1944 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x1944 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1945 = x1944 * x1898;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1946 = x1944 * x1899;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1947 = x1944 * x1900;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1948 = x1944 * x1901;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1949 = x1945 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1950 = x1946 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1951 = x1947 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1952 = x1948 + x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1953 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x1953 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1954 = x1953 * x1916;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1955 = x1953 * x1917;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1956 = x1953 * x1918;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1957 = x1953 * x1919;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1958 = x1949 + x1954;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1959 = x1950 + x1955;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1960 = x1951 + x1956;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1961 = x1952 + x1957;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1962 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x1962 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1963 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x1963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1964 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x1964 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1965 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x1965 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1966 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x1966 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1967 = x1962 * x1963;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1968 = x1962 * x1964;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1969 = x1962 * x1965;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x1970 = x1962 * x1966;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1971 = x1958 + x1967;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1972 = x1959 + x1968;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1973 = x1960 + x1969;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x1974 = x1961 + x1970;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x1975 = x1972 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x1976 = x1971 + x1975;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1977 = Fp(x1976.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1977);
          reg = x1977;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1978 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x1978 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1979 = x1976 - x1978;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1980 = x1979 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1981 = Fp(x1980.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1981);
          reg = x1981;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1982 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x1982 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1983 = x1980 - x1982;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1984 = x1983 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1984);
        reg = x1984;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x1985 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x1985 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x1986 = x1985 + x1973;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x1987 = x1974 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x1988 = x1986 + x1987;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1989 = Fp(x1988.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1989);
          reg = x1989;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1990 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x1990 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1991 = x1988 - x1990;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1992 = x1991 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x1993 = Fp(x1992.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1993);
          reg = x1993;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x1994 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x1994 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x1995 = x1992 - x1994;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x1996 = x1995 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x1996);
        reg = x1996;
      }
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x1997 = Fp(x1994.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x1998 = x1997 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x1998);
          reg = x1998;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x1999 = Fp(x1994.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x2000 = x1999 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2000);
          reg = x2000;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2001 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x2001 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2002 = x2001 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2003 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x2003 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x2004 = x2003 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2005 = x2002 + x2004;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x2006 = x1994 - x2005;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x2006 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2007 = x96 - x1934;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2008 = x1924 * x2007;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2009 = x96 - x2001;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2010 = x2008 * x2009;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2011 = x96 - x1924;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2012 = x2011 * x1934;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2013 = x2012 * x2001;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2014 = x2010 + x2013;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2014);
        reg = x2014;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x2015 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x2015 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2016 = x2015 + x2001;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2017 = x2015 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2018 = x2017 * x2001;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2019 = x2016 - x2018;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2019);
        reg = x2019;
      }
      // loc("zirgen/components/u32.cpp":137:26)
      auto x2020 = x1982 * x91;
      // loc("zirgen/components/u32.cpp":137:12)
      auto x2021 = x1978 + x2020;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2022 = (x2021 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2022);
          reg = x2022;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2023 = inv(x2021);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2023);
          reg = x2023;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2024 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x2024 != Fp::invalid());
      if (x2024 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x2021 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2025 = x96 - x2024;
      if (x2025 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2026 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x2026 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2027 = x2021 * x2026;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2028 = x2027 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x2028 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":138:27)
      auto x2029 = x1994 * x91;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x2030 = x1990 + x2029;
      // loc("zirgen/components/u32.cpp":138:47)
      auto x2031 = x2025 * x81;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x2032 = x2030 + x2031;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2033 = (x2032 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2033);
          reg = x2033;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2034 = inv(x2032);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2034);
          reg = x2034;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2035 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x2035 != Fp::invalid());
      if (x2035 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x2032 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2036 = x96 - x2035;
      if (x2036 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2037 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x2037 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2038 = x2032 * x2037;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2039 = x2038 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x2039 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2040 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x2040 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2041 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2041 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2042 = x96 - x2041;
      host_args.at(0) = x1908;
      host_args.at(1) = x1909;
      host_args.at(2) = x1910;
      host_args.at(3) = x1911;
      host_args.at(4) = x1864;
      host_args.at(5) = x1870;
      host_args.at(6) = x1871;
      host_args.at(7) = x1872;
      host_args.at(8) = x1873;
      host_args.at(9) = x1875;
      host_args.at(10) = x1881;
      host_args.at(11) = x1882;
      host_args.at(12) = x1883;
      host_args.at(13) = x1884;
      host_args.at(14) = x1898;
      host_args.at(15) = x1899;
      host_args.at(16) = x1900;
      host_args.at(17) = x1901;
      host_args.at(18) = x1916;
      host_args.at(19) = x1917;
      host_args.at(20) = x1918;
      host_args.at(21) = x1919;
      host_args.at(22) = x1978;
      host_args.at(23) = x1982;
      host_args.at(24) = x1990;
      host_args.at(25) = x1994;
      host_args.at(26) = x2035;
      host_args.at(27) = x2040;
      host_args.at(28) = x2042;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2043 = x1709 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2044 = x1712 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2045 = x2043 + x2044;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2046 = x2045 + x1715;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2047 = (x2046 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2047);
          reg = x2047;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2048 = inv(x2046);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2048);
          reg = x2048;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2049 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x2049 != Fp::invalid());
      if (x2049 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x2046 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2050 = x96 - x2049;
      if (x2050 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2051 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x2051 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2052 = x2046 * x2051;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2053 = x2052 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x2053 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/compute.cpp":161:13)
      auto x2054 = x867 + x79;
      // loc("zirgen/components/u32.cpp":62:25)
      auto x2055 = x1909 * x91;
      // loc("zirgen/components/u32.cpp":62:13)
      auto x2056 = x1908 + x2055;
      // loc("zirgen/components/u32.cpp":62:49)
      auto x2057 = x1910 * x81;
      // loc("zirgen/components/u32.cpp":62:13)
      auto x2058 = x2056 + x2057;
      // loc("zirgen/components/u32.cpp":65:17)
      auto x2059 = x1911 * x47;
      // loc("zirgen/components/u32.cpp":65:16)
      auto x2060 = x2059 * x46;
      // loc("zirgen/components/u32.cpp":65:10)
      auto x2061 = x2058 + x2060;
      // loc("zirgen/circuit/rv32im/compute.cpp":162:14)
      auto x2062 = x867 + x2061;
      // loc("zirgen/circuit/rv32im/compute.cpp":169:13)
      auto x2063 = x2035 * x2062;
      // loc("zirgen/circuit/rv32im/compute.cpp":169:35)
      auto x2064 = x2036 * x2054;
      // loc("zirgen/circuit/rv32im/compute.cpp":169:13)
      auto x2065 = x2063 + x2064;
      // loc("zirgen/circuit/rv32im/compute.cpp":170:13)
      auto x2066 = x2035 * x2054;
      // loc("zirgen/circuit/rv32im/compute.cpp":170:34)
      auto x2067 = x2036 * x2062;
      // loc("zirgen/circuit/rv32im/compute.cpp":170:13)
      auto x2068 = x2066 + x2067;
      // loc("zirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2069 = x2040 * x2062;
      // loc("zirgen/circuit/rv32im/compute.cpp":171:36)
      auto x2070 = x96 - x2040;
      // loc("zirgen/circuit/rv32im/compute.cpp":171:35)
      auto x2071 = x2070 * x2054;
      // loc("zirgen/circuit/rv32im/compute.cpp":171:13)
      auto x2072 = x2069 + x2071;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":46:69))
      auto x2073 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2073 != Fp::invalid());
      if (x2073 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x2074 = x1717 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x2074 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:46");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":46:69)
        auto x2075 = x1706 - x79;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":46:69)
        if (x2075 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:46");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2076 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2077 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2078 = x2076 + x2077;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2079 = x2078 + x1875;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2080 = x1670 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2081 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2082 = x2080 + x2081;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2083 = x2082 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2084 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2079);
          reg = x2079;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2083);
          reg = x2083;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2084);
          reg = x2084;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2084);
          reg = x2084;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":43:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":44:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":45:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x50);
          reg = x50;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2085 = x2054 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2086 = Fp(x2085.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2086);
            reg = x2086;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2087 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2087 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2088 = x2085 - x2087;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2089 = x2088 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2090 = Fp(x2089.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2090);
            reg = x2090;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2091 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2091 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2092 = x2089 - x2091;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2093 = x2092 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2094 = Fp(x2093.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2094);
            reg = x2094;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2095 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2095 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2096 = x2093 - x2095;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2097 = x2096 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2098 = Fp(x2097.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2098);
            reg = x2098;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2099 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2099 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2100 = x2097 - x2099;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2101 = x2100 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2101);
          reg = x2101;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2102 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2102 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2103 = x96 - x2102;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2104 = x2102 * x2103;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2104);
          reg = x2104;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2105 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2105 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2106 = x93 - x2102;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2107 = x2105 * x2106;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2107 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2108 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2108 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":46:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2108);
          reg = x2108;
        }
        if (x2050 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x1978;
          host_args.at(2) = x1982;
          host_args.at(3) = x1990;
          host_args.at(4) = x1994;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":46:69)
          auto x2109 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1978);
            reg = x1978;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          {
            host_args.at(0) = x2109;
            host_args.at(1) = x1978;
            host_args.at(2) = x1982;
            host_args.at(3) = x1990;
            host_args.at(4) = x1994;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2110 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2110 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2111 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2111 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2112 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2112 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2113 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2113 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2109);
            reg = x2109;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2110);
            reg = x2110;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2111);
            reg = x2111;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2112);
            reg = x2112;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2113);
            reg = x2113;
          }
        }
        if (x2049 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":47:69))
      auto x2114 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2114 != Fp::invalid());
      if (x2114 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x2115 = x1717 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x2115 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:47");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":47:69)
        auto x2116 = x1706 - x74;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":47:69)
        if (x2116 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:47");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2117 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2118 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2119 = x2117 + x2118;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2120 = x2119 + x1875;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2121 = x1670 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2122 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2123 = x2121 + x2122;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2124 = x2123 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2125 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2120);
          reg = x2120;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2124);
          reg = x2124;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2125);
          reg = x2125;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2125);
          reg = x2125;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":38:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":39:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":40:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2126 = x2054 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2127 = Fp(x2126.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2127);
            reg = x2127;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2128 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2128 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2129 = x2126 - x2128;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2130 = x2129 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2131 = Fp(x2130.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2131);
            reg = x2131;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2132 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2132 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2133 = x2130 - x2132;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2134 = x2133 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2135 = Fp(x2134.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2135);
            reg = x2135;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2136 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2136 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2137 = x2134 - x2136;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2138 = x2137 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2139 = Fp(x2138.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2139);
            reg = x2139;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2140 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2140 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2141 = x2138 - x2140;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2142 = x2141 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2142);
          reg = x2142;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2143 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2143 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2144 = x96 - x2143;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2145 = x2143 * x2144;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2145);
          reg = x2145;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2146 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2146 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2147 = x93 - x2143;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2148 = x2146 * x2147;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2148 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2149 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2149 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":47:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2149);
          reg = x2149;
        }
        if (x2050 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x1978;
          host_args.at(2) = x1982;
          host_args.at(3) = x1990;
          host_args.at(4) = x1994;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":47:69)
          auto x2150 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1978);
            reg = x1978;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          {
            host_args.at(0) = x2150;
            host_args.at(1) = x1978;
            host_args.at(2) = x1982;
            host_args.at(3) = x1990;
            host_args.at(4) = x1994;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2151 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2151 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2152 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2152 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2153 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2153 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2154 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2154 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2150);
            reg = x2150;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2151);
            reg = x2151;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2152);
            reg = x2152;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2153);
            reg = x2153;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2154);
            reg = x2154;
          }
        }
        if (x2049 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":48:69))
      auto x2155 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2155 != Fp::invalid());
      if (x2155 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x2156 = x1717 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x2156 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:48");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":48:69)
        auto x2157 = x1706 - x73;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":48:69)
        if (x2157 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:48");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2158 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2159 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2160 = x2158 + x2159;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2161 = x2160 + x1875;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2162 = x1670 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2163 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2164 = x2162 + x2163;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2165 = x2164 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2166 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2161);
          reg = x2161;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2165);
          reg = x2165;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2166);
          reg = x2166;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2166);
          reg = x2166;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":33:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":34:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":35:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x74);
          reg = x74;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2167 = x2054 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2168 = Fp(x2167.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2168);
            reg = x2168;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2169 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2169 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2170 = x2167 - x2169;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2171 = x2170 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2172 = Fp(x2171.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2172);
            reg = x2172;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2173 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2173 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2174 = x2171 - x2173;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2175 = x2174 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2176 = Fp(x2175.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2176);
            reg = x2176;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2177 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2177 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2178 = x2175 - x2177;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2179 = x2178 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2180 = Fp(x2179.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2180);
            reg = x2180;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2181 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2181 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2182 = x2179 - x2181;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2183 = x2182 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2183);
          reg = x2183;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2184 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2184 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2185 = x96 - x2184;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2186 = x2184 * x2185;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2186);
          reg = x2186;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2187 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2187 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2188 = x93 - x2184;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2189 = x2187 * x2188;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2189 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2190 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2190 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":48:69)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2190);
          reg = x2190;
        }
        if (x2050 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x1978;
          host_args.at(2) = x1982;
          host_args.at(3) = x1990;
          host_args.at(4) = x1994;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":48:69)
          auto x2191 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1978);
            reg = x1978;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          {
            host_args.at(0) = x2191;
            host_args.at(1) = x1978;
            host_args.at(2) = x1982;
            host_args.at(3) = x1990;
            host_args.at(4) = x1994;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2192 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2192 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2193 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2193 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2194 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2194 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2195 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2195 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2191);
            reg = x2191;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2192);
            reg = x2192;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2193);
            reg = x2193;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2194);
            reg = x2194;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2195);
            reg = x2195;
          }
        }
        if (x2049 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":49:68))
      auto x2196 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2196 != Fp::invalid());
      if (x2196 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x2197 = x1717 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x2197 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:49");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":49:68)
        auto x2198 = x1706 - x93;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":49:68)
        if (x2198 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:49");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2199 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2200 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2201 = x2199 + x2200;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2202 = x2201 + x1875;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2203 = x1670 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2204 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2205 = x2203 + x2204;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2206 = x2205 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2207 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2202);
          reg = x2202;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2206);
          reg = x2206;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2207);
          reg = x2207;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2207);
          reg = x2207;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2208 = x2054 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2209 = Fp(x2208.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2209);
            reg = x2209;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2210 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2210 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2211 = x2208 - x2210;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2212 = x2211 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2213 = Fp(x2212.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2213);
            reg = x2213;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2214 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2214 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2215 = x2212 - x2214;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2216 = x2215 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2217 = Fp(x2216.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2217);
            reg = x2217;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2218 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2218 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2219 = x2216 - x2218;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2220 = x2219 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2221 = Fp(x2220.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2221);
            reg = x2221;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2222 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2222 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2223 = x2220 - x2222;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2224 = x2223 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2224);
          reg = x2224;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2225 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2225 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2226 = x96 - x2225;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2227 = x2225 * x2226;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2227);
          reg = x2227;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2228 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2228 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2229 = x93 - x2225;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2230 = x2228 * x2229;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2230 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2231 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2231 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":49:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2231);
          reg = x2231;
        }
        if (x2050 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x2040;
          host_args.at(2) = x95;
          host_args.at(3) = x95;
          host_args.at(4) = x95;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":49:68)
          auto x2232 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2040);
            reg = x2040;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            host_args.at(0) = x2232;
            host_args.at(1) = x2040;
            host_args.at(2) = x95;
            host_args.at(3) = x95;
            host_args.at(4) = x95;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2233 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2233 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2234 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2234 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2235 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2235 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2236 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2236 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2232);
            reg = x2232;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2233);
            reg = x2233;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2234);
            reg = x2234;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2235);
            reg = x2235;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2236);
            reg = x2236;
          }
        }
        if (x2049 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":50:68))
      auto x2237 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x2237 != Fp::invalid());
      if (x2237 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2238 = x1717 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x2238 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:50");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":50:68)
        auto x2239 = x1706 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":50:68)
        if (x2239 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:50");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2240 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x2241 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2242 = x2240 + x2241;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x2243 = x2242 + x1875;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2244 = x1670 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x2245 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2246 = x2244 + x2245;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x2247 = x2246 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x2248 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2243);
          reg = x2243;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2247);
          reg = x2247;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2248);
          reg = x2248;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2248);
          reg = x2248;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2249 = x2054 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2250 = Fp(x2249.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2250);
            reg = x2250;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2251 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2251 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2252 = x2249 - x2251;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2253 = x2252 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2254 = Fp(x2253.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2254);
            reg = x2254;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2255 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2255 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2256 = x2253 - x2255;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2257 = x2256 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2258 = Fp(x2257.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2258);
            reg = x2258;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2259 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2259 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2260 = x2257 - x2259;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2261 = x2260 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2262 = Fp(x2261.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2262);
            reg = x2262;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2263 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2263 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2264 = x2261 - x2263;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2265 = x2264 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2265);
          reg = x2265;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2266 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2266 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2267 = x96 - x2266;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2268 = x2266 * x2267;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2268);
          reg = x2268;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2269 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2269 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2270 = x93 - x2266;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2271 = x2269 * x2270;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2271 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2272 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2272 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":50:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2272);
          reg = x2272;
        }
        if (x2050 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x2042;
          host_args.at(2) = x95;
          host_args.at(3) = x95;
          host_args.at(4) = x95;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":50:68)
          auto x2273 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2042);
            reg = x2042;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          {
            host_args.at(0) = x2273;
            host_args.at(1) = x2042;
            host_args.at(2) = x95;
            host_args.at(3) = x95;
            host_args.at(4) = x95;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2274 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2274 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2275 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2275 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2276 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2276 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2277 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2277 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2273);
            reg = x2273;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2274);
            reg = x2274;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2275);
            reg = x2275;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2276);
            reg = x2276;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2277);
            reg = x2277;
          }
        }
        if (x2049 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":51:68))
      auto x2278 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x2278 != Fp::invalid());
      if (x2278 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2279 = x1717 - x42;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x2279 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:51");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":51:68)
        if (x1706 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:51");
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2280 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2281 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2282 = x2280 + x2281;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2283 = x2282 + x2043;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2284 = x2283 + x2044;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2285 = x1670 * x43;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2286 = x1715 * x72;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2287 = x2285 + x2286;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2288 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2289 = x2287 + x2288;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2290 = x2289 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2291 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2284);
          reg = x2284;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2290);
          reg = x2290;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2291);
          reg = x2291;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2291);
          reg = x2291;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2292 = x2065 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2293 = Fp(x2292.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2293);
            reg = x2293;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2294 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2294 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2295 = x2292 - x2294;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2296 = x2295 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2297 = Fp(x2296.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2297);
            reg = x2297;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2298 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2298 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2299 = x2296 - x2298;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2300 = x2299 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2301 = Fp(x2300.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2301);
            reg = x2301;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2302 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2302 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2303 = x2300 - x2302;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2304 = x2303 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2305 = Fp(x2304.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2305);
            reg = x2305;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2306 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2306 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2307 = x2304 - x2306;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2308 = x2307 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2308);
          reg = x2308;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2309 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2309 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2310 = x96 - x2309;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2311 = x2309 * x2310;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2311);
          reg = x2311;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2312 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2312 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2313 = x93 - x2309;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2314 = x2312 * x2313;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2314 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2315 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2315 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":51:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2315);
          reg = x2315;
        }
        if (x95 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x1978;
          host_args.at(2) = x1982;
          host_args.at(3) = x1990;
          host_args.at(4) = x1994;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":51:68)
          auto x2316 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1978);
            reg = x1978;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          {
            host_args.at(0) = x2316;
            host_args.at(1) = x1978;
            host_args.at(2) = x1982;
            host_args.at(3) = x1990;
            host_args.at(4) = x1994;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2317 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2317 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2318 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2318 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2319 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2319 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2320 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2320 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2316);
            reg = x2316;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2317);
            reg = x2317;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2318);
            reg = x2318;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2319);
            reg = x2319;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2320);
            reg = x2320;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":51:68)
        auto x2321 = x2049 + x96;
        if (x2321 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":52:68))
      auto x2322 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x2322 != Fp::invalid());
      if (x2322 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2323 = x1717 - x42;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2323 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:52");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2324 = x1706 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":52:68)
        if (x2324 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:52");
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2325 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2326 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2327 = x2325 + x2326;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2328 = x2327 + x2043;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2329 = x2328 + x2044;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2330 = x1670 * x43;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2331 = x1715 * x72;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2332 = x2330 + x2331;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2333 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2334 = x2332 + x2333;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2335 = x2334 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2336 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2329);
          reg = x2329;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2335);
          reg = x2335;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2336);
          reg = x2336;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2336);
          reg = x2336;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2337 = x2068 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2338 = Fp(x2337.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2338);
            reg = x2338;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2339 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2339 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2340 = x2337 - x2339;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2341 = x2340 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2342 = Fp(x2341.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2342);
            reg = x2342;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2343 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2343 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2344 = x2341 - x2343;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2345 = x2344 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2346 = Fp(x2345.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2346);
            reg = x2346;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2347 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2347 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2348 = x2345 - x2347;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2349 = x2348 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2350 = Fp(x2349.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2350);
            reg = x2350;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2351 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2351 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2352 = x2349 - x2351;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2353 = x2352 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2353);
          reg = x2353;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2354 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2354 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2355 = x96 - x2354;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2356 = x2354 * x2355;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2356);
          reg = x2356;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2357 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2357 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2358 = x93 - x2354;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2359 = x2357 * x2358;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2359 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2360 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2360 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":52:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2360);
          reg = x2360;
        }
        if (x95 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x1978;
          host_args.at(2) = x1982;
          host_args.at(3) = x1990;
          host_args.at(4) = x1994;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":52:68)
          auto x2361 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1978);
            reg = x1978;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          {
            host_args.at(0) = x2361;
            host_args.at(1) = x1978;
            host_args.at(2) = x1982;
            host_args.at(3) = x1990;
            host_args.at(4) = x1994;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2362 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2362 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2363 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2363 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2364 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2364 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2365 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2365 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2361);
            reg = x2361;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2362);
            reg = x2362;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2363);
            reg = x2363;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2364);
            reg = x2364;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2365);
            reg = x2365;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":52:68)
        auto x2366 = x2049 + x96;
        if (x2366 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":53:68))
      auto x2367 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x2367 != Fp::invalid());
      if (x2367 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2368 = x1717 - x42;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2368 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:53");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2369 = x1706 - x79;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":53:68)
        if (x2369 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:53");
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2370 = x1677 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2371 = x1680 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2372 = x2370 + x2371;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2373 = x2372 + x2043;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2374 = x2373 + x2044;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2375 = x1670 * x43;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2376 = x1715 * x72;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2377 = x2375 + x2376;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2378 = x1672 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2379 = x2377 + x2378;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2380 = x2379 + x1674;
        // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2381 = x1670 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2374);
          reg = x2374;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2380);
          reg = x2380;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2381);
          reg = x2381;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2381);
          reg = x2381;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2382 = x2072 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2383 = Fp(x2382.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2383);
            reg = x2383;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2384 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2384 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2385 = x2382 - x2384;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2386 = x2385 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2387 = Fp(x2386.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2387);
            reg = x2387;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2388 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2388 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2389 = x2386 - x2388;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2390 = x2389 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2391 = Fp(x2390.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2391);
            reg = x2391;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2392 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2392 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2393 = x2390 - x2392;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2394 = x2393 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2395 = Fp(x2394.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2395);
            reg = x2395;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2396 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2396 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2397 = x2394 - x2396;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2398 = x2397 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2398);
          reg = x2398;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2399 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2399 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2400 = x96 - x2399;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2401 = x2399 * x2400;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2401);
          reg = x2401;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2402 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2402 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2403 = x93 - x2399;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2404 = x2402 * x2403;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2404 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2405 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2405 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":53:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2405);
          reg = x2405;
        }
        if (x95 != 0) {
          host_args.at(0) = x2046;
          host_args.at(1) = x1978;
          host_args.at(2) = x1982;
          host_args.at(3) = x1990;
          host_args.at(4) = x1994;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":53:68)
          auto x2406 = x2046 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1978);
            reg = x1978;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1982);
            reg = x1982;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1990);
            reg = x1990;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x1994);
            reg = x1994;
          }
          {
            host_args.at(0) = x2406;
            host_args.at(1) = x1978;
            host_args.at(2) = x1982;
            host_args.at(3) = x1990;
            host_args.at(4) = x1994;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2407 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2407 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2408 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2408 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2409 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2409 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2410 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2410 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2406);
            reg = x2406;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2407);
            reg = x2407;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2408);
            reg = x2408;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2409);
            reg = x2409;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2410);
            reg = x2410;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":53:68)
        auto x2411 = x2049 + x96;
        if (x2411 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[2](Reg)"("./zirgen/components/mux.h":49:25))
    auto x2412 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x2412 != Fp::invalid());
    if (x2412 != 0) {
      // loc("zirgen/circuit/rv32im/compute.cpp":112:41)
      auto x2413 = x867 * x77;
      {
        host_args.at(0) = x2413;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2414 = host_outs.at(0);
        auto x2415 = host_outs.at(1);
        auto x2416 = host_outs.at(2);
        auto x2417 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2414);
          reg = x2414;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2415);
          reg = x2415;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2416);
          reg = x2416;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2417);
          reg = x2417;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2418 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x2418 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2419 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x2419 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2420 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x2420 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2421 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x2421 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2413);
        reg = x2413;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2418);
        reg = x2418;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2419);
        reg = x2419;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2420);
        reg = x2420;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2421);
        reg = x2421;
      }
      {
        // loc("zirgen/circuit/rv32im/decode.cpp":11:16)
        auto x2422 = Fp(x2421.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":11:15)
        auto x2423 = x2422 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2423);
          reg = x2423;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":12:17)
        auto x2424 = Fp(x2421.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":12:16)
        auto x2425 = x2424 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2425);
          reg = x2425;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":13:16)
        auto x2426 = Fp(x2421.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":13:15)
        auto x2427 = x2426 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2427);
          reg = x2427;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":14:16)
        auto x2428 = Fp(x2421.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":14:15)
        auto x2429 = x2428 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2429);
          reg = x2429;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":15:17)
        auto x2430 = Fp(x2421.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":15:16)
        auto x2431 = x2430 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2431);
          reg = x2431;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":16:17)
        auto x2432 = Fp(x2421.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2432);
          reg = x2432;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":17:17)
        auto x2433 = Fp(x2420.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":17:16)
        auto x2434 = x2433 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2434);
          reg = x2434;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":18:18)
        auto x2435 = Fp(x2420.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":18:17)
        auto x2436 = x2435 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2436);
          reg = x2436;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":19:17)
        auto x2437 = Fp(x2420.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":19:16)
        auto x2438 = x2437 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2438);
          reg = x2438;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":20:18)
        auto x2439 = Fp(x2420.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":20:17)
        auto x2440 = x2439 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2440);
          reg = x2440;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":21:18)
        auto x2441 = Fp(x2420.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2441);
          reg = x2441;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":22:17)
        auto x2442 = Fp(x2419.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":22:16)
        auto x2443 = x2442 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2443);
          reg = x2443;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":23:19)
        auto x2444 = Fp(x2419.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":23:18)
        auto x2445 = x2444 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2445);
          reg = x2445;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":24:20)
        auto x2446 = Fp(x2419.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":24:19)
        auto x2447 = x2446 * x58;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2447);
          reg = x2447;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":25:17)
        auto x2448 = Fp(x2419.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":25:16)
        auto x2449 = x2448 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2449);
          reg = x2449;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":26:17)
        auto x2450 = Fp(x2419.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2450);
          reg = x2450;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":27:16)
        auto x2451 = Fp(x2418.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":27:15)
        auto x2452 = x2451 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2452);
          reg = x2452;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":28:18)
        auto x2453 = Fp(x2418.asUInt32() & x52.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2453);
          reg = x2453;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2454 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x2454 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2455 = x2454 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2456 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x2456 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2457 = x2456 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2458 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x2458 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:25)
      auto x2459 = x2458 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2460 = x2457 + x2459;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2461 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x2461 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:39)
      auto x2462 = x2461 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2463 = x2460 + x2462;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2464 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x2464 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x2465 = x2463 + x2464;
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x2466 = x2455 + x2465;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2467 = x2466 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2468 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x2468 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x2469 = x2467 + x2468;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      auto x2470 = x2421 - x2469;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      if (x2470 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2471 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x2471 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2472 = x2471 * x72;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2473 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x2473 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:37)
      auto x2474 = x2473 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2475 = x2472 + x2474;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2476 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x2476 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x2477 = x2475 + x2476;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2478 = x2477 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2479 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x2479 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:69)
      auto x2480 = x2479 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2481 = x2478 + x2480;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2482 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x2482 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x2483 = x2481 + x2482;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      auto x2484 = x2420 - x2483;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      if (x2484 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2485 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x2485 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2486 = x2485 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2487 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x2487 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2488 = x2487 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2489 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x2489 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x2490 = x2488 + x2489;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:36)
      auto x2491 = x2490 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2492 = x2486 + x2491;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2493 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x2493 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:53)
      auto x2494 = x2493 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2495 = x2492 + x2494;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2496 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x2496 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x2497 = x2495 + x2496;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      auto x2498 = x2419 - x2497;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      if (x2498 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2499 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x2499 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2500 = x2499 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x2501 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x2501 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x2502 = x2500 + x2501;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      auto x2503 = x2418 - x2502;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      if (x2503 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x2418;
        host_args.at(1) = x2419;
        host_args.at(2) = x2420;
        host_args.at(3) = x2421;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x2504 = host_outs.at(0);
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2505 = (x2504 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2505);
            reg = x2505;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2506 = x2504 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2507 = (x2506 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2507);
            reg = x2507;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2508 = x2504 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2509 = (x2508 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2509);
            reg = x2509;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2510 = x2504 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2511 = (x2510 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2511);
            reg = x2511;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2512 = x2504 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2513 = (x2512 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2513);
            reg = x2513;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2514 = x2504 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2515 = (x2514 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2515);
            reg = x2515;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2516 = x2504 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2517 = (x2516 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2517);
            reg = x2517;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2518 = x2504 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x2519 = (x2518 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2519);
            reg = x2519;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2520 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2520 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2521 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2521 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2522 = x2521 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2523 = x2520 + x2522;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2524 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2524 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2525 = x2524 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2526 = x2523 + x2525;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2527 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2527 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2528 = x2527 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2529 = x2526 + x2528;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2530 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2530 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2531 = x2530 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2532 = x2529 + x2531;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2533 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2533 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2534 = x2533 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2535 = x2532 + x2534;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2536 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x2536 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x2537 = x2536 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x2538 = x2535 + x2537;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x2539 = x2538 - x2504;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x2539 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":54:68))
        auto x2540 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x2540 != Fp::invalid());
        if (x2540 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2541 = x2461 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2542 = x2464 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2543 = x2541 + x2542;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2544 = x2493 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2545 = x2543 + x2544;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2546 = x2496 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2547 = x2545 + x2546;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2548 = x2454 * x43;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2549 = x2499 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2550 = x2548 + x2549;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2551 = x2456 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2552 = x2550 + x2551;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2553 = x2552 + x2458;
          // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2554 = x2454 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2547);
            reg = x2547;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2553);
            reg = x2553;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2554);
            reg = x2554;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2554);
            reg = x2554;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":55:68))
        auto x2555 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x2555 != Fp::invalid());
        if (x2555 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2556 = x2461 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2557 = x2464 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2558 = x2556 + x2557;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2559 = x2493 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2560 = x2558 + x2559;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2561 = x2496 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2562 = x2560 + x2561;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2563 = x2454 * x43;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2564 = x2499 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2565 = x2563 + x2564;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2566 = x2456 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2567 = x2565 + x2566;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2568 = x2567 + x2458;
          // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2569 = x2454 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2562);
            reg = x2562;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2568);
            reg = x2568;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2569);
            reg = x2569;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2569);
            reg = x2569;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":56:68))
        auto x2570 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x2570 != Fp::invalid());
        if (x2570 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2571 = x2461 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
          auto x2572 = x2464 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2573 = x2571 + x2572;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:36)
          auto x2574 = x2493 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2575 = x2573 + x2574;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:51)
          auto x2576 = x2496 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
          auto x2577 = x2575 + x2576;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2578 = x2454 * x43;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
          auto x2579 = x2499 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2580 = x2578 + x2579;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
          auto x2581 = x2456 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2582 = x2580 + x2581;
          // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
          auto x2583 = x2582 + x2458;
          // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
          auto x2584 = x2454 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2577);
            reg = x2577;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2583);
            reg = x2583;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2584);
            reg = x2584;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2584);
            reg = x2584;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x51);
            reg = x51;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":57:68))
        auto x2585 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x2585 != Fp::invalid());
        if (x2585 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2586 = x2461 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":106:21)
          auto x2587 = x2464 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2588 = x2586 + x2587;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2589 = x2468 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2590 = x2589 + x2477;
          // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2591 = x2588 + x2590;
          // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
          auto x2592 = x2591 - x2476;
          // loc("zirgen/circuit/rv32im/decode.cpp":107:39)
          auto x2593 = x2476 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2594 = x2492 + x2593;
          // loc("zirgen/circuit/rv32im/decode.cpp":107:54)
          auto x2595 = x2456 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2596 = x2594 + x2595;
          // loc("zirgen/circuit/rv32im/decode.cpp":107:7)
          auto x2597 = x2596 + x2458;
          // loc("zirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2598 = x2454 * x43;
          // loc("zirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2599 = x2598 + x2480;
          // loc("zirgen/circuit/rv32im/decode.cpp":108:7)
          auto x2600 = x2599 + x2482;
          // loc("zirgen/circuit/rv32im/decode.cpp":109:7)
          auto x2601 = x2454 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2592);
            reg = x2592;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2597);
            reg = x2597;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2600);
            reg = x2600;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2601);
            reg = x2601;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":58:68))
        auto x2602 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x2602 != Fp::invalid());
        if (x2602 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2603 = x2461 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x2604 = x2464 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2605 = x2603 + x2604;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2606 = x2468 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x2607 = x2606 + x2477;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x2608 = x2605 + x2607;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2609 = x2454 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x2610 = x2456 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2611 = x2609 + x2610;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x2612 = x2611 + x2458;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x2613 = x2454 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2608);
            reg = x2608;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2612);
            reg = x2612;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2613);
            reg = x2613;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2613);
            reg = x2613;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":59:68))
        auto x2614 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x2614 != Fp::invalid());
        if (x2614 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2492);
            reg = x2492;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2483);
            reg = x2483;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":48:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":49:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":50:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":60:68))
        auto x2615 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x2615 != Fp::invalid());
        if (x2615 != 0) {
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2492);
            reg = x2492;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2483);
            reg = x2483;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2469);
            reg = x2469;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2616 = x2479 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:26)
      auto x2617 = x2482 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2618 = x2616 + x2617;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x2619 = x2618 + x2485;
      // loc("zirgen/circuit/rv32im/compute.cpp":134:39)
      auto x2620 = x2619 + x48;
      {
        host_args.at(0) = x2620;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2621 = host_outs.at(0);
        auto x2622 = host_outs.at(1);
        auto x2623 = host_outs.at(2);
        auto x2624 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2621);
          reg = x2621;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2622);
          reg = x2622;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2623);
          reg = x2623;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2624);
          reg = x2624;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2625 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x2625 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2626 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x2626 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2627 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x2627 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2628 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x2628 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2620);
        reg = x2620;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2625);
        reg = x2625;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2626);
        reg = x2626;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2627);
        reg = x2627;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2628);
        reg = x2628;
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2629 = x2468 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x2630 = x2629 + x2477;
      // loc("zirgen/circuit/rv32im/compute.cpp":135:39)
      auto x2631 = x2630 + x48;
      {
        host_args.at(0) = x2631;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x2632 = host_outs.at(0);
        auto x2633 = host_outs.at(1);
        auto x2634 = host_outs.at(2);
        auto x2635 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2632);
          reg = x2632;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2633);
          reg = x2633;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2634);
          reg = x2634;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2635);
          reg = x2635;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2636 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x2636 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2637 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x2637 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2638 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x2638 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2639 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x2639 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2631);
        reg = x2631;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2636);
        reg = x2636;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2637);
        reg = x2637;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2638);
        reg = x2638;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2639);
        reg = x2639;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2640 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x2640 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":139:17)
      auto x2641 = x96 - x2640;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2642 = x2641 * x2625;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2643 = x2641 * x2626;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2644 = x2641 * x2627;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2645 = x2641 * x2628;
      // loc("zirgen/circuit/rv32im/body.cpp":35:52)
      auto x2646 = x864 * x79;
      // loc("zirgen/circuit/rv32im/body.cpp":35:41)
      auto x2647 = x861 + x2646;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x2648 = x854 - x79;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2649 = x2640 * x2648;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2650 = x2640 * x855;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2651 = x2640 * x858;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2652 = x2640 * x2647;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2653 = x2642 + x2649;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2654 = x2643 + x2650;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2655 = x2644 + x2651;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2656 = x2645 + x2652;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2657 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x2657 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":141:17)
      auto x2658 = x96 - x2657;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2659 = x2658 * x2636;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2660 = x2658 * x2637;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2661 = x2658 * x2638;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2662 = x2658 * x2639;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2663 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x2663 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2664 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x2664 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2665 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x2665 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2666 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x2666 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2667 = x2657 * x2663;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2668 = x2657 * x2664;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2669 = x2657 * x2665;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2670 = x2657 * x2666;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2671 = x2659 + x2667;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2672 = x2660 + x2668;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2673 = x2661 + x2669;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2674 = x2662 + x2670;
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x2675 = Fp(x2656.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x2676 = x2675 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2676);
          reg = x2676;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x2677 = Fp(x2656.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x2678 = x2677 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2678);
          reg = x2678;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2679 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x2679 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2680 = x2679 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2681 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x2681 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x2682 = x2681 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2683 = x2680 + x2682;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x2684 = x2656 - x2683;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x2684 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x2685 = Fp(x2674.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x2686 = x2685 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2686);
          reg = x2686;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x2687 = Fp(x2674.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x2688 = x2687 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2688);
          reg = x2688;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2689 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x2689 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2690 = x2689 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2691 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x2691 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x2692 = x2691 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2693 = x2690 + x2692;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x2694 = x2674 - x2693;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x2694 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2671);
        reg = x2671;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2672);
        reg = x2672;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][203 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2673);
        reg = x2673;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][204 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2674);
        reg = x2674;
      }
      {
        // loc("zirgen/components/u32.cpp":113:20)
        auto x2695 = Fp(x2653.asUInt32() & x2671.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x2696 = Fp(x2654.asUInt32() & x2672.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x2697 = Fp(x2655.asUInt32() & x2673.asUInt32());
        // loc("zirgen/components/u32.cpp":113:20)
        auto x2698 = Fp(x2656.asUInt32() & x2674.asUInt32());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2695);
          reg = x2695;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2696);
          reg = x2696;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2697);
          reg = x2697;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2698);
          reg = x2698;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2699 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x2699 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2700 = x2699 * x2653;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2701 = x2699 * x2654;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2702 = x2699 * x2655;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2703 = x2699 * x2656;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2704 = x2700 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2705 = x2701 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2706 = x2702 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2707 = x2703 + x92;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2708 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x2708 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2709 = x2708 * x2671;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2710 = x2708 * x2672;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2711 = x2708 * x2673;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2712 = x2708 * x2674;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2713 = x2704 + x2709;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2714 = x2705 + x2710;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2715 = x2706 + x2711;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2716 = x2707 + x2712;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2717 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x2717 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2718 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x2718 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2719 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x2719 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2720 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x2720 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2721 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x2721 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2722 = x2717 * x2718;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2723 = x2717 * x2719;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2724 = x2717 * x2720;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x2725 = x2717 * x2721;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2726 = x2713 + x2722;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2727 = x2714 + x2723;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2728 = x2715 + x2724;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x2729 = x2716 + x2725;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x2730 = x2727 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x2731 = x2726 + x2730;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2732 = Fp(x2731.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2732);
          reg = x2732;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2733 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x2733 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2734 = x2731 - x2733;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2735 = x2734 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2736 = Fp(x2735.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2736);
          reg = x2736;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2737 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x2737 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2738 = x2735 - x2737;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2739 = x2738 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2739);
        reg = x2739;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2740 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x2740 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x2741 = x2740 + x2728;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x2742 = x2729 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x2743 = x2741 + x2742;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2744 = Fp(x2743.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2744);
          reg = x2744;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2745 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x2745 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2746 = x2743 - x2745;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2747 = x2746 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x2748 = Fp(x2747.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2748);
          reg = x2748;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x2749 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x2749 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x2750 = x2747 - x2749;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x2751 = x2750 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2751);
        reg = x2751;
      }
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x2752 = Fp(x2749.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x2753 = x2752 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2753);
          reg = x2753;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x2754 = Fp(x2749.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x2755 = x2754 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2755);
          reg = x2755;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2756 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x2756 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2757 = x2756 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x2758 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x2758 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x2759 = x2758 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x2760 = x2757 + x2759;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x2761 = x2749 - x2760;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x2761 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/circuit/rv32im/compute.cpp":69:23)
      auto x2762 = x96 - x2689;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2763 = x2679 * x2762;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:34)
      auto x2764 = x96 - x2756;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2765 = x2763 * x2764;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:45)
      auto x2766 = x96 - x2679;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2767 = x2766 * x2689;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:44)
      auto x2768 = x2767 * x2756;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:17)
      auto x2769 = x2765 + x2768;
      // loc("zirgen/circuit/rv32im/compute.cpp":69:3)
      {
        auto& reg = args[2][210 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2769);
        reg = x2769;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x2770 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x2770 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2771 = x2770 + x2756;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2772 = x2770 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:27)
      auto x2773 = x2772 * x2756;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:11)
      auto x2774 = x2771 - x2773;
      // loc("zirgen/circuit/rv32im/compute.cpp":71:3)
      {
        auto& reg = args[2][211 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x2774);
        reg = x2774;
      }
      // loc("zirgen/components/u32.cpp":137:26)
      auto x2775 = x2737 * x91;
      // loc("zirgen/components/u32.cpp":137:12)
      auto x2776 = x2733 + x2775;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2777 = (x2776 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2777);
          reg = x2777;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2778 = inv(x2776);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2778);
          reg = x2778;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2779 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x2779 != Fp::invalid());
      if (x2779 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x2776 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2780 = x96 - x2779;
      if (x2780 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2781 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x2781 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2782 = x2776 * x2781;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2783 = x2782 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x2783 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":138:27)
      auto x2784 = x2749 * x91;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x2785 = x2745 + x2784;
      // loc("zirgen/components/u32.cpp":138:47)
      auto x2786 = x2780 * x81;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x2787 = x2785 + x2786;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2788 = (x2787 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2788);
          reg = x2788;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2789 = inv(x2787);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2789);
          reg = x2789;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2790 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x2790 != Fp::invalid());
      if (x2790 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x2787 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2791 = x96 - x2790;
      if (x2791 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2792 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x2792 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2793 = x2787 * x2792;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2794 = x2793 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x2794 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2795 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x2795 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ALU/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2796 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x2796 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":97:10)
      auto x2797 = x96 - x2796;
      host_args.at(0) = x2663;
      host_args.at(1) = x2664;
      host_args.at(2) = x2665;
      host_args.at(3) = x2666;
      host_args.at(4) = x2619;
      host_args.at(5) = x2625;
      host_args.at(6) = x2626;
      host_args.at(7) = x2627;
      host_args.at(8) = x2628;
      host_args.at(9) = x2630;
      host_args.at(10) = x2636;
      host_args.at(11) = x2637;
      host_args.at(12) = x2638;
      host_args.at(13) = x2639;
      host_args.at(14) = x2653;
      host_args.at(15) = x2654;
      host_args.at(16) = x2655;
      host_args.at(17) = x2656;
      host_args.at(18) = x2671;
      host_args.at(19) = x2672;
      host_args.at(20) = x2673;
      host_args.at(21) = x2674;
      host_args.at(22) = x2733;
      host_args.at(23) = x2737;
      host_args.at(24) = x2745;
      host_args.at(25) = x2749;
      host_args.at(26) = x2790;
      host_args.at(27) = x2795;
      host_args.at(28) = x2797;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, inA = %w, inB = %w, ALU output = %w, EQ:%u, LT:%u, LTU:%u", host_args.data(), 29, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2798 = x2493 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
      auto x2799 = x2496 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2800 = x2798 + x2799;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x2801 = x2800 + x2499;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x2802 = (x2801 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2802);
          reg = x2802;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x2803 = inv(x2801);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2803);
          reg = x2803;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x2804 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x2804 != Fp::invalid());
      if (x2804 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x2801 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x2805 = x96 - x2804;
      if (x2805 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2806 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x2806 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2807 = x2801 * x2806;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x2808 = x2807 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x2808 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/compute.cpp":161:13)
      auto x2809 = x867 + x79;
      // loc("zirgen/components/u32.cpp":62:25)
      auto x2810 = x2664 * x91;
      // loc("zirgen/components/u32.cpp":62:13)
      auto x2811 = x2663 + x2810;
      // loc("zirgen/components/u32.cpp":62:49)
      auto x2812 = x2665 * x81;
      // loc("zirgen/components/u32.cpp":62:13)
      auto x2813 = x2811 + x2812;
      // loc("zirgen/components/u32.cpp":65:17)
      auto x2814 = x2666 * x47;
      // loc("zirgen/components/u32.cpp":65:16)
      auto x2815 = x2814 * x46;
      // loc("zirgen/components/u32.cpp":65:10)
      auto x2816 = x2813 + x2815;
      // loc("zirgen/circuit/rv32im/compute.cpp":162:14)
      auto x2817 = x867 + x2816;
      // loc("zirgen/circuit/rv32im/compute.cpp":167:57)
      auto x2818 = x2745 * x81;
      // loc("zirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2819 = x2776 + x2818;
      // loc("zirgen/circuit/rv32im/compute.cpp":168:14)
      auto x2820 = x2749 * x80;
      // loc("zirgen/circuit/rv32im/compute.cpp":167:13)
      auto x2821 = x2819 + x2820;
      // loc("zirgen/circuit/rv32im/compute.cpp":172:13)
      auto x2822 = x2795 * x2809;
      // loc("zirgen/circuit/rv32im/compute.cpp":172:35)
      auto x2823 = x96 - x2795;
      // loc("zirgen/circuit/rv32im/compute.cpp":172:34)
      auto x2824 = x2823 * x2817;
      // loc("zirgen/circuit/rv32im/compute.cpp":172:13)
      auto x2825 = x2822 + x2824;
      // loc("zirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2826 = x2797 * x2817;
      // loc("zirgen/circuit/rv32im/compute.cpp":173:38)
      auto x2827 = x96 - x2797;
      // loc("zirgen/circuit/rv32im/compute.cpp":173:37)
      auto x2828 = x2827 * x2809;
      // loc("zirgen/circuit/rv32im/compute.cpp":173:14)
      auto x2829 = x2826 + x2828;
      // loc("zirgen/circuit/rv32im/compute.cpp":174:14)
      auto x2830 = x2797 * x2809;
      // loc("zirgen/circuit/rv32im/compute.cpp":174:36)
      auto x2831 = x2827 * x2817;
      // loc("zirgen/circuit/rv32im/compute.cpp":174:14)
      auto x2832 = x2830 + x2831;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":54:68))
      auto x2833 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x2833 != Fp::invalid());
      if (x2833 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2834 = x2501 - x42;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2834 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:54");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2835 = x2490 - x75;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":54:68)
        if (x2835 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:54");
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2836 = x2461 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2837 = x2464 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2838 = x2836 + x2837;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2839 = x2838 + x2798;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2840 = x2839 + x2799;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2841 = x2454 * x43;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2842 = x2499 * x72;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2843 = x2841 + x2842;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2844 = x2456 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2845 = x2843 + x2844;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2846 = x2845 + x2458;
        // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2847 = x2454 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2840);
          reg = x2840;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2846);
          reg = x2846;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2847);
          reg = x2847;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2848 = x2825 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2849 = Fp(x2848.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2849);
            reg = x2849;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2850 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2850 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2851 = x2848 - x2850;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2852 = x2851 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2853 = Fp(x2852.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2853);
            reg = x2853;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2854 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2854 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2855 = x2852 - x2854;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2856 = x2855 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2857 = Fp(x2856.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2857);
            reg = x2857;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2858 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2858 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2859 = x2856 - x2858;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2860 = x2859 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2861 = Fp(x2860.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2861);
            reg = x2861;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2862 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2862 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2863 = x2860 - x2862;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2864 = x2863 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2864);
          reg = x2864;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2865 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2865 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2866 = x96 - x2865;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2867 = x2865 * x2866;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2867);
          reg = x2867;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2868 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2868 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2869 = x93 - x2865;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2870 = x2868 * x2869;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2870 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2871 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2871 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":54:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2871);
          reg = x2871;
        }
        if (x95 != 0) {
          host_args.at(0) = x2801;
          host_args.at(1) = x2733;
          host_args.at(2) = x2737;
          host_args.at(3) = x2745;
          host_args.at(4) = x2749;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":54:68)
          auto x2872 = x2801 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2733);
            reg = x2733;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2737);
            reg = x2737;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
          {
            host_args.at(0) = x2872;
            host_args.at(1) = x2733;
            host_args.at(2) = x2737;
            host_args.at(3) = x2745;
            host_args.at(4) = x2749;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2873 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2873 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2874 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2874 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2875 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2875 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2876 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2876 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2872);
            reg = x2872;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2873);
            reg = x2873;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2874);
            reg = x2874;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2875);
            reg = x2875;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2876);
            reg = x2876;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":54:68)
        auto x2877 = x2804 + x96;
        if (x2877 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":55:68))
      auto x2878 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x2878 != Fp::invalid());
      if (x2878 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2879 = x2501 - x42;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2879 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:55");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2880 = x2490 - x74;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":55:68)
        if (x2880 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:55");
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2881 = x2461 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2882 = x2464 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2883 = x2881 + x2882;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2884 = x2883 + x2798;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2885 = x2884 + x2799;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2886 = x2454 * x43;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2887 = x2499 * x72;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2888 = x2886 + x2887;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2889 = x2456 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2890 = x2888 + x2889;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2891 = x2890 + x2458;
        // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2892 = x2454 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2885);
          reg = x2885;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2891);
          reg = x2891;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2892);
          reg = x2892;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2892);
          reg = x2892;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2893 = x2829 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2894 = Fp(x2893.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2894);
            reg = x2894;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2895 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2895 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2896 = x2893 - x2895;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2897 = x2896 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2898 = Fp(x2897.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2898);
            reg = x2898;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2899 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2899 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2900 = x2897 - x2899;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2901 = x2900 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2902 = Fp(x2901.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2902);
            reg = x2902;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2903 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2903 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2904 = x2901 - x2903;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2905 = x2904 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2906 = Fp(x2905.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2906);
            reg = x2906;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2907 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2907 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2908 = x2905 - x2907;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2909 = x2908 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2909);
          reg = x2909;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2910 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2910 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2911 = x96 - x2910;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2912 = x2910 * x2911;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2912);
          reg = x2912;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2913 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2913 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2914 = x93 - x2910;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2915 = x2913 * x2914;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2915 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2916 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2916 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":55:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2916);
          reg = x2916;
        }
        if (x95 != 0) {
          host_args.at(0) = x2801;
          host_args.at(1) = x2733;
          host_args.at(2) = x2737;
          host_args.at(3) = x2745;
          host_args.at(4) = x2749;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":55:68)
          auto x2917 = x2801 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2733);
            reg = x2733;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2737);
            reg = x2737;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
          {
            host_args.at(0) = x2917;
            host_args.at(1) = x2733;
            host_args.at(2) = x2737;
            host_args.at(3) = x2745;
            host_args.at(4) = x2749;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2918 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2918 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2919 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2919 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2920 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2920 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2921 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2921 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2917);
            reg = x2917;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2918);
            reg = x2918;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2919);
            reg = x2919;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2920);
            reg = x2920;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2921);
            reg = x2921;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":55:68)
        auto x2922 = x2804 + x96;
        if (x2922 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":56:68))
      auto x2923 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x2923 != Fp::invalid());
      if (x2923 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2924 = x2501 - x42;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2924 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:56");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2925 = x2490 - x73;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":56:68)
        if (x2925 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:56");
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2926 = x2461 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:21)
        auto x2927 = x2464 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2928 = x2926 + x2927;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2929 = x2928 + x2798;
        // loc("zirgen/circuit/rv32im/decode.cpp":88:7)
        auto x2930 = x2929 + x2799;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2931 = x2454 * x43;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:21)
        auto x2932 = x2499 * x72;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2933 = x2931 + x2932;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:35)
        auto x2934 = x2456 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2935 = x2933 + x2934;
        // loc("zirgen/circuit/rv32im/decode.cpp":89:7)
        auto x2936 = x2935 + x2458;
        // loc("zirgen/circuit/rv32im/decode.cpp":90:7)
        auto x2937 = x2454 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2930);
          reg = x2930;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2936);
          reg = x2936;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2937);
          reg = x2937;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2937);
          reg = x2937;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":28:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":29:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x51);
          reg = x51;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":30:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2938 = x2832 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2939 = Fp(x2938.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2939);
            reg = x2939;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2940 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2940 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2941 = x2938 - x2940;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2942 = x2941 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2943 = Fp(x2942.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2943);
            reg = x2943;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2944 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2944 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2945 = x2942 - x2944;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2946 = x2945 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2947 = Fp(x2946.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2947);
            reg = x2947;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2948 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2948 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2949 = x2946 - x2948;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2950 = x2949 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2951 = Fp(x2950.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2951);
            reg = x2951;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2952 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2952 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2953 = x2950 - x2952;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x2954 = x2953 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2954);
          reg = x2954;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2955 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x2955 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x2956 = x96 - x2955;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x2957 = x2955 * x2956;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2957);
          reg = x2957;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x2958 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x2958 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x2959 = x93 - x2955;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x2960 = x2958 * x2959;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x2960 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2961 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x2961 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":56:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2961);
          reg = x2961;
        }
        if (x95 != 0) {
          host_args.at(0) = x2801;
          host_args.at(1) = x2733;
          host_args.at(2) = x2737;
          host_args.at(3) = x2745;
          host_args.at(4) = x2749;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":56:68)
          auto x2962 = x2801 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2733);
            reg = x2733;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2737);
            reg = x2737;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
          {
            host_args.at(0) = x2962;
            host_args.at(1) = x2733;
            host_args.at(2) = x2737;
            host_args.at(3) = x2745;
            host_args.at(4) = x2749;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2963 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x2963 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2964 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x2964 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2965 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x2965 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x2966 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x2966 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2962);
            reg = x2962;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2963);
            reg = x2963;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2964);
            reg = x2964;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2965);
            reg = x2965;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2966);
            reg = x2966;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":56:68)
        auto x2967 = x2804 + x96;
        if (x2967 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":57:68))
      auto x2968 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x2968 != Fp::invalid());
      if (x2968 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":57:68)
        auto x2969 = x2501 - x41;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":57:68)
        if (x2969 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:57");
        // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2970 = x2461 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":106:21)
        auto x2971 = x2464 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2972 = x2970 + x2971;
        // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2973 = x2972 + x2630;
        // loc("zirgen/circuit/rv32im/decode.cpp":106:7)
        auto x2974 = x2973 - x2476;
        // loc("zirgen/circuit/rv32im/decode.cpp":107:39)
        auto x2975 = x2476 * x72;
        // loc("zirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2976 = x2492 + x2975;
        // loc("zirgen/circuit/rv32im/decode.cpp":107:54)
        auto x2977 = x2456 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2978 = x2976 + x2977;
        // loc("zirgen/circuit/rv32im/decode.cpp":107:7)
        auto x2979 = x2978 + x2458;
        // loc("zirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2980 = x2454 * x43;
        // loc("zirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2981 = x2980 + x2480;
        // loc("zirgen/circuit/rv32im/decode.cpp":108:7)
        auto x2982 = x2981 + x2482;
        // loc("zirgen/circuit/rv32im/decode.cpp":109:7)
        auto x2983 = x2454 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2974);
          reg = x2974;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2979);
          reg = x2979;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2982);
          reg = x2982;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2983);
          reg = x2983;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x2984 = x2817 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2985 = Fp(x2984.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2985);
            reg = x2985;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2986 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x2986 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2987 = x2984 - x2986;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2988 = x2987 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2989 = Fp(x2988.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2989);
            reg = x2989;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2990 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x2990 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2991 = x2988 - x2990;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2992 = x2991 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x2993 = Fp(x2992.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2993);
            reg = x2993;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x2994 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x2994 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x2995 = x2992 - x2994;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x2996 = x2995 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x2997 = Fp(x2996.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2997);
            reg = x2997;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x2998 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x2998 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x2999 = x2996 - x2998;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x3000 = x2999 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3000);
          reg = x3000;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3001 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3001 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x3002 = x96 - x3001;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x3003 = x3001 * x3002;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3003);
          reg = x3003;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3004 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3004 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x3005 = x93 - x3001;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x3006 = x3004 * x3005;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x3006 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3007 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3007 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":57:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3007);
          reg = x3007;
        }
        if (x2805 != 0) {
          host_args.at(0) = x2801;
          host_args.at(1) = x854;
          host_args.at(2) = x855;
          host_args.at(3) = x858;
          host_args.at(4) = x2647;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":57:68)
          auto x3008 = x2801 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x854);
            reg = x854;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x855);
            reg = x855;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x858);
            reg = x858;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2647);
            reg = x2647;
          }
          {
            host_args.at(0) = x3008;
            host_args.at(1) = x854;
            host_args.at(2) = x855;
            host_args.at(3) = x858;
            host_args.at(4) = x2647;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3009 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3009 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3010 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3010 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3011 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3011 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3012 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3012 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3008);
            reg = x3008;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3009);
            reg = x3009;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3010);
            reg = x3010;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3011);
            reg = x3011;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3012);
            reg = x3012;
          }
        }
        if (x2804 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":58:68))
      auto x3013 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x3013 != Fp::invalid());
      if (x3013 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":58:68)
        auto x3014 = x2501 - x40;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x3014 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:58");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":58:68)
        if (x2490 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:58");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3015 = x2461 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3016 = x2464 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3017 = x3015 + x3016;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3018 = x3017 + x2630;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3019 = x2454 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3020 = x2456 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3021 = x3019 + x3020;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3022 = x3021 + x2458;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3023 = x2454 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3018);
          reg = x3018;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3022);
          reg = x3022;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3023);
          reg = x3023;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3023);
          reg = x3023;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x3024 = x2821 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3025 = Fp(x3024.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3025);
            reg = x3025;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3026 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3026 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3027 = x3024 - x3026;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3028 = x3027 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3029 = Fp(x3028.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3029);
            reg = x3029;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3030 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3030 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3031 = x3028 - x3030;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3032 = x3031 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3033 = Fp(x3032.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3033);
            reg = x3033;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3034 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3034 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3035 = x3032 - x3034;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3036 = x3035 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x3037 = Fp(x3036.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3037);
            reg = x3037;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3038 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3038 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x3039 = x3036 - x3038;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x3040 = x3039 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3040);
          reg = x3040;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3041 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3041 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x3042 = x96 - x3041;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x3043 = x3041 * x3042;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3043);
          reg = x3043;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3044 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3044 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x3045 = x93 - x3041;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x3046 = x3044 * x3045;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x3046 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3047 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3047 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":58:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3047);
          reg = x3047;
        }
        if (x2805 != 0) {
          host_args.at(0) = x2801;
          host_args.at(1) = x854;
          host_args.at(2) = x855;
          host_args.at(3) = x858;
          host_args.at(4) = x2647;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":58:68)
          auto x3048 = x2801 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x854);
            reg = x854;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x855);
            reg = x855;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x858);
            reg = x858;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2647);
            reg = x2647;
          }
          {
            host_args.at(0) = x3048;
            host_args.at(1) = x854;
            host_args.at(2) = x855;
            host_args.at(3) = x858;
            host_args.at(4) = x2647;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3049 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3049 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3050 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3050 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3051 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3051 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3052 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3052 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3048);
            reg = x3048;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3049);
            reg = x3049;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3050);
            reg = x3050;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3051);
            reg = x3051;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3052);
            reg = x3052;
          }
        }
        if (x2804 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":59:68))
      auto x3053 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x3053 != Fp::invalid());
      if (x3053 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":59:68)
        auto x3054 = x2501 - x39;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":59:68)
        if (x3054 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:59");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2492);
          reg = x2492;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2483);
          reg = x2483;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2469);
          reg = x2469;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":48:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":49:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":50:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x3055 = x2809 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3056 = Fp(x3055.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3056);
            reg = x3056;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3057 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3057 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3058 = x3055 - x3057;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3059 = x3058 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3060 = Fp(x3059.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3060);
            reg = x3060;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3061 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3061 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3062 = x3059 - x3061;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3063 = x3062 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3064 = Fp(x3063.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3064);
            reg = x3064;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3065 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3065 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3066 = x3063 - x3065;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3067 = x3066 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x3068 = Fp(x3067.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3068);
            reg = x3068;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3069 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3069 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x3070 = x3067 - x3069;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x3071 = x3070 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3071);
          reg = x3071;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3072 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3072 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x3073 = x96 - x3072;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x3074 = x3072 * x3073;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3074);
          reg = x3074;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3075 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3075 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x3076 = x93 - x3072;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x3077 = x3075 * x3076;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x3077 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3078 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3078 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":59:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3078);
          reg = x3078;
        }
        if (x2805 != 0) {
          host_args.at(0) = x2801;
          host_args.at(1) = x2733;
          host_args.at(2) = x2737;
          host_args.at(3) = x2745;
          host_args.at(4) = x2749;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":59:68)
          auto x3079 = x2801 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2733);
            reg = x2733;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2737);
            reg = x2737;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
          {
            host_args.at(0) = x3079;
            host_args.at(1) = x2733;
            host_args.at(2) = x2737;
            host_args.at(3) = x2745;
            host_args.at(4) = x2749;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3080 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3080 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3081 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3081 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3082 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3082 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3083 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3083 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3079);
            reg = x3079;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3080);
            reg = x3080;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3081);
            reg = x3081;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3082);
            reg = x3082;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3083);
            reg = x3083;
          }
        }
        if (x2804 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":60:68))
      auto x3084 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3084 != Fp::invalid());
      if (x3084 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":60:68)
        auto x3085 = x2501 - x38;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":60:68)
        if (x3085 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:60");
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2492);
          reg = x2492;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2483);
          reg = x2483;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x2469);
          reg = x2469;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":19:3)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":20:3)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":23:5)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":24:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":25:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":53:3)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x3086 = x2809 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3087 = Fp(x3086.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3087);
            reg = x3087;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3088 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x3088 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3089 = x3086 - x3088;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3090 = x3089 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3091 = Fp(x3090.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3091);
            reg = x3091;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3092 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x3092 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3093 = x3090 - x3092;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3094 = x3093 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3095 = Fp(x3094.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3095);
            reg = x3095;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x3096 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x3096 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x3097 = x3094 - x3096;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x3098 = x3097 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x3099 = Fp(x3098.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3099);
            reg = x3099;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3100 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x3100 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x3101 = x3098 - x3100;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x3102 = x3101 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3102);
          reg = x3102;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3103 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x3103 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x3104 = x96 - x3103;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x3105 = x3103 * x3104;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3105);
          reg = x3105;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3106 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x3106 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x3107 = x93 - x3103;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x3108 = x3106 * x3107;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x3108 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/ComputeControl/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3109 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x3109 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":60:68)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3109);
          reg = x3109;
        }
        if (x2805 != 0) {
          host_args.at(0) = x2801;
          host_args.at(1) = x2733;
          host_args.at(2) = x2737;
          host_args.at(3) = x2745;
          host_args.at(4) = x2749;
          host(ctx, "log", "  Writing to rd=x%u, val = %w", host_args.data(), 5, host_outs.data(), 0);
          // loc("./zirgen/circuit/rv32im/rv32im.inl":60:68)
          auto x3110 = x2801 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2733);
            reg = x2733;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2737);
            reg = x2737;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2745);
            reg = x2745;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x2749);
            reg = x2749;
          }
          {
            host_args.at(0) = x3110;
            host_args.at(1) = x2733;
            host_args.at(2) = x2737;
            host_args.at(3) = x2745;
            host_args.at(4) = x2749;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3111 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x3111 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3112 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x3112 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3113 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x3113 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3114 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x3114 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3110);
            reg = x3110;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3111);
            reg = x3111;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3112);
            reg = x3112;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3113);
            reg = x3113;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3114);
            reg = x3114;
          }
        }
        if (x2804 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[3](Reg)"("./zirgen/components/mux.h":49:25))
    auto x3115 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x3115 != Fp::invalid());
    if (x3115 != 0) {
      // loc("zirgen/circuit/rv32im/memio.cpp":20:41)
      auto x3116 = x867 * x77;
      {
        host_args.at(0) = x3116;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3117 = host_outs.at(0);
        auto x3118 = host_outs.at(1);
        auto x3119 = host_outs.at(2);
        auto x3120 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3117);
          reg = x3117;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3118);
          reg = x3118;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3119);
          reg = x3119;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3120);
          reg = x3120;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3121 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3122 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3122 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3123 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3123 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3124 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3124 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3116);
        reg = x3116;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3121);
        reg = x3121;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3122);
        reg = x3122;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3123);
        reg = x3123;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3124);
        reg = x3124;
      }
      {
        // loc("zirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3125 = Fp(x3124.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3126 = x3125 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3126);
          reg = x3126;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3127 = Fp(x3124.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3128 = x3127 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3128);
          reg = x3128;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3129 = Fp(x3124.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3130 = x3129 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3130);
          reg = x3130;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3131 = Fp(x3124.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3132 = x3131 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3132);
          reg = x3132;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3133 = Fp(x3124.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3134 = x3133 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3134);
          reg = x3134;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3135 = Fp(x3124.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3135);
          reg = x3135;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3136 = Fp(x3123.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3137 = x3136 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3137);
          reg = x3137;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3138 = Fp(x3123.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3139 = x3138 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3139);
          reg = x3139;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3140 = Fp(x3123.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3141 = x3140 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3141);
          reg = x3141;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3142 = Fp(x3123.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3143 = x3142 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3143);
          reg = x3143;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3144 = Fp(x3123.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3144);
          reg = x3144;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3145 = Fp(x3122.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3146 = x3145 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3146);
          reg = x3146;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3147 = Fp(x3122.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3148 = x3147 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3148);
          reg = x3148;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3149 = Fp(x3122.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3150 = x3149 * x58;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3150);
          reg = x3150;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3151 = Fp(x3122.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3152 = x3151 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3152);
          reg = x3152;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3153 = Fp(x3122.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3153);
          reg = x3153;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3154 = Fp(x3121.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3155 = x3154 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3155);
          reg = x3155;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3156 = Fp(x3121.asUInt32() & x52.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3156);
          reg = x3156;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3157 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x3157 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3158 = x3157 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3159 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3159 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3160 = x3159 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3161 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x3161 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3162 = x3161 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3163 = x3160 + x3162;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3164 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x3164 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3165 = x3164 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3166 = x3163 + x3165;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3167 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3167 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3168 = x3166 + x3167;
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3169 = x3158 + x3168;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3170 = x3169 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3171 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x3171 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3172 = x3170 + x3171;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3173 = x3124 - x3172;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3173 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3174 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x3174 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3175 = x3174 * x72;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3176 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3176 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3177 = x3176 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3178 = x3175 + x3177;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3179 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x3179 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3180 = x3178 + x3179;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3181 = x3180 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3182 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3182 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3183 = x3182 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3184 = x3181 + x3183;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3185 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3185 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3186 = x3184 + x3185;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3187 = x3123 - x3186;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3187 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3188 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x3188 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3189 = x3188 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3190 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x3190 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3191 = x3190 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3192 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3192 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3193 = x3191 + x3192;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3194 = x3193 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3195 = x3189 + x3194;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3196 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x3196 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3197 = x3196 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3198 = x3195 + x3197;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3199 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3199 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3200 = x3198 + x3199;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3201 = x3122 - x3200;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3201 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3202 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x3202 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3203 = x3202 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3204 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x3204 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3205 = x3203 + x3204;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3206 = x3121 - x3205;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3206 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3121;
        host_args.at(1) = x3122;
        host_args.at(2) = x3123;
        host_args.at(3) = x3124;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3207 = host_outs.at(0);
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3208 = (x3207 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3208);
            reg = x3208;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3209 = x3207 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3210 = (x3209 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3210);
            reg = x3210;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3211 = x3207 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3212 = (x3211 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3212);
            reg = x3212;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3213 = x3207 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3214 = (x3213 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3214);
            reg = x3214;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3215 = x3207 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3216 = (x3215 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3216);
            reg = x3216;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3217 = x3207 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3218 = (x3217 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3218);
            reg = x3218;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3219 = x3207 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3220 = (x3219 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3220);
            reg = x3220;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3221 = x3207 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3222 = (x3221 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3222);
            reg = x3222;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3223 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3223 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3224 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3224 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3225 = x3224 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3226 = x3223 + x3225;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3227 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3227 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3228 = x3227 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3229 = x3226 + x3228;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3230 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3230 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3231 = x3230 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3232 = x3229 + x3231;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3233 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3233 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3234 = x3233 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3235 = x3232 + x3234;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3236 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3236 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3237 = x3236 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3238 = x3235 + x3237;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3239 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3239 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3240 = x3239 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3241 = x3238 + x3240;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x3242 = x3241 - x3207;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x3242 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3243 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x3243 != Fp::invalid());
        if (x3243 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3244 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3245 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3246 = x3244 + x3245;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3247 = x3171 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3248 = x3247 + x3180;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3249 = x3246 + x3248;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3250 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3251 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3252 = x3250 + x3251;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3253 = x3252 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3254 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3249);
            reg = x3249;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3253);
            reg = x3253;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3254);
            reg = x3254;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3254);
            reg = x3254;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3255 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x3255 != Fp::invalid());
        if (x3255 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3256 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3257 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3258 = x3256 + x3257;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3259 = x3171 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3260 = x3259 + x3180;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3261 = x3258 + x3260;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3262 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3263 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3264 = x3262 + x3263;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3265 = x3264 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3266 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3261);
            reg = x3261;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3265);
            reg = x3265;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3266);
            reg = x3266;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3266);
            reg = x3266;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3267 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x3267 != Fp::invalid());
        if (x3267 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3268 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3269 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3270 = x3268 + x3269;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3271 = x3171 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3272 = x3271 + x3180;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3273 = x3270 + x3272;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3274 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3275 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3276 = x3274 + x3275;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3277 = x3276 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3278 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3273);
            reg = x3273;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3277);
            reg = x3277;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3278);
            reg = x3278;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3278);
            reg = x3278;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3279 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x3279 != Fp::invalid());
        if (x3279 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3280 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3281 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3282 = x3280 + x3281;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3283 = x3171 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3284 = x3283 + x3180;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3285 = x3282 + x3284;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3286 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3287 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3288 = x3286 + x3287;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3289 = x3288 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3290 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3285);
            reg = x3285;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3289);
            reg = x3289;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3290);
            reg = x3290;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3290);
            reg = x3290;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3291 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x3291 != Fp::invalid());
        if (x3291 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3292 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
          auto x3293 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3294 = x3292 + x3293;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3295 = x3171 * x64;
          // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
          auto x3296 = x3295 + x3180;
          // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
          auto x3297 = x3294 + x3296;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3298 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
          auto x3299 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3300 = x3298 + x3299;
          // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
          auto x3301 = x3300 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
          auto x3302 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3297);
            reg = x3297;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3301);
            reg = x3301;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3302);
            reg = x3302;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3302);
            reg = x3302;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3303 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x3303 != Fp::invalid());
        if (x3303 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3304 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3305 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3306 = x3304 + x3305;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3307 = x3196 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3308 = x3199 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3309 = x3307 + x3308;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3310 = x3309 + x3202;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3311 = x3306 + x3310;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3312 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3313 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3314 = x3312 + x3313;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3315 = x3314 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3316 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3311);
            reg = x3311;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3315);
            reg = x3315;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3316);
            reg = x3316;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3316);
            reg = x3316;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3317 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x3317 != Fp::invalid());
        if (x3317 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3318 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3319 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3320 = x3318 + x3319;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3321 = x3196 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3322 = x3199 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3323 = x3321 + x3322;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3324 = x3323 + x3202;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3325 = x3320 + x3324;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3326 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3327 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3328 = x3326 + x3327;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3329 = x3328 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3330 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3325);
            reg = x3325;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3329);
            reg = x3329;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3330);
            reg = x3330;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3330);
            reg = x3330;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3331 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x3331 != Fp::invalid());
        if (x3331 != 0) {
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3332 = x3164 * x63;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:21)
          auto x3333 = x3167 * x60;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3334 = x3332 + x3333;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3335 = x3196 * x72;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
          auto x3336 = x3199 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3337 = x3335 + x3336;
          // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
          auto x3338 = x3337 + x3202;
          // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
          auto x3339 = x3334 + x3338;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3340 = x3157 * x49;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:21)
          auto x3341 = x3159 * x93;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3342 = x3340 + x3341;
          // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
          auto x3343 = x3342 + x3161;
          // loc("zirgen/circuit/rv32im/decode.cpp":81:7)
          auto x3344 = x3157 * x92;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3339);
            reg = x3339;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3343);
            reg = x3343;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3344);
            reg = x3344;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3344);
            reg = x3344;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3345 = x3182 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:26)
      auto x3346 = x3185 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3347 = x3345 + x3346;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x3348 = x3347 + x3188;
      // loc("zirgen/circuit/rv32im/memio.cpp":38:39)
      auto x3349 = x3348 + x48;
      {
        host_args.at(0) = x3349;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3350 = host_outs.at(0);
        auto x3351 = host_outs.at(1);
        auto x3352 = host_outs.at(2);
        auto x3353 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3350);
          reg = x3350;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3351);
          reg = x3351;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3352);
          reg = x3352;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3353);
          reg = x3353;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3354 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x3354 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3355 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x3355 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3356 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x3356 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3357 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x3357 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3349);
        reg = x3349;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3354);
        reg = x3354;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3355);
        reg = x3355;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3356);
        reg = x3356;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3357);
        reg = x3357;
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3358 = x3171 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x3359 = x3358 + x3180;
      // loc("zirgen/circuit/rv32im/memio.cpp":39:39)
      auto x3360 = x3359 + x48;
      {
        host_args.at(0) = x3360;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3361 = host_outs.at(0);
        auto x3362 = host_outs.at(1);
        auto x3363 = host_outs.at(2);
        auto x3364 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3361);
          reg = x3361;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3362);
          reg = x3362;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3363);
          reg = x3363;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3364);
          reg = x3364;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3365 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x3365 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3366 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x3366 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3367 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x3367 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3368 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x3368 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3360);
        reg = x3360;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3365);
        reg = x3365;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3366);
        reg = x3366;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3367);
        reg = x3367;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3368);
        reg = x3368;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3369 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x3369 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3370 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x3370 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3371 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x3371 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3372 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x3372 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3373 = x3196 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
      auto x3374 = x3199 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3375 = x3373 + x3374;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x3376 = x3375 + x3202;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x3377 = (x3376 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3377);
          reg = x3377;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x3378 = inv(x3376);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3378);
          reg = x3378;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3379 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x3379 != Fp::invalid());
      if (x3379 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x3376 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x3380 = x96 - x3379;
      if (x3380 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3381 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x3381 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x3382 = x3376 * x3381;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x3383 = x3382 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x3383 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      {
        // loc("zirgen/circuit/rv32im/memio.cpp":47:17)
        auto x3384 = x3354 + x3369;
        // loc("zirgen/circuit/rv32im/memio.cpp":48:18)
        auto x3385 = Fp(x3384.asUInt32() & x78.asUInt32());
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3386 = (x3385 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3386);
            reg = x3386;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3387 = x3385 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3388 = (x3387 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3388);
            reg = x3388;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3389 = x3385 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3390 = (x3389 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3390);
            reg = x3390;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3391 = x3385 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3392 = (x3391 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3392);
            reg = x3392;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3393 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x3393 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3394 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x3394 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3395 = x3394 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3396 = x3393 + x3395;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3397 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x3397 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3398 = x3397 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3399 = x3396 + x3398;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x3400 = x3399 - x3385;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x3400 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("zirgen/circuit/rv32im/memio.cpp":49:20)
        auto x3401 = Fp(x3384.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/memio.cpp":49:19)
        auto x3402 = x3401 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3403 = Fp(x3402.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3403);
            reg = x3403;
          }
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":50:15)
        auto x3404 = x3384 - x3399;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3405 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x3405 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/memio.cpp":50:33)
        auto x3406 = x3405 * x91;
        // loc("zirgen/circuit/rv32im/memio.cpp":50:15)
        auto x3407 = x3404 - x3406;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3407);
          reg = x3407;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":52:22)
        auto x3408 = x3407 * x77;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3408);
          reg = x3408;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3409 = x3355 + x3370;
        // loc("zirgen/circuit/rv32im/memio.cpp":53:17)
        auto x3410 = x3409 + x3405;
        // loc("zirgen/circuit/rv32im/memio.cpp":54:24)
        auto x3411 = Fp(x3410.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3411);
          reg = x3411;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":55:25)
        auto x3412 = Fp(x3410.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/memio.cpp":55:24)
        auto x3413 = x3412 * x90;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3413);
          reg = x3413;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3414 = x3356 + x3371;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3415 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x3415 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/memio.cpp":56:17)
        auto x3416 = x3414 + x3415;
        // loc("zirgen/circuit/rv32im/memio.cpp":57:24)
        auto x3417 = Fp(x3416.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3417);
          reg = x3417;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":58:25)
        auto x3418 = Fp(x3416.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/memio.cpp":58:24)
        auto x3419 = x3418 * x90;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3419);
          reg = x3419;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":59:17)
        auto x3420 = x3357 + x3372;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3421 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x3421 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/memio.cpp":59:17)
        auto x3422 = x3420 + x3421;
        // loc("zirgen/circuit/rv32im/memio.cpp":60:23)
        auto x3423 = Fp(x3422.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3423);
          reg = x3423;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":61:24)
        auto x3424 = Fp(x3422.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/memio.cpp":61:23)
        auto x3425 = x3424 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3425);
          reg = x3425;
        }
        // loc("zirgen/circuit/rv32im/memio.cpp":62:20)
        auto x3426 = Fp(x3422.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/memio.cpp":62:19)
        auto x3427 = x3426 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x3428 = Fp(x3427.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3428);
            reg = x3428;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3429 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x3429 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3430 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x3430 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":65:16)
      auto x3431 = x3430 * x79;
      // loc("zirgen/circuit/rv32im/memio.cpp":65:6)
      auto x3432 = x3429 - x3431;
      // loc("zirgen/circuit/rv32im/memio.cpp":65:6)
      if (x3432 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/memio.cpp:65");
      // loc("zirgen/circuit/rv32im/memio.cpp":67:6)
      auto x3433 = x3354 + x3369;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3434 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x3434 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3435 = x3434 * x91;
      // loc("zirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3436 = x3435 + x3429;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3437 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x3437 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3438 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x3438 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x3439 = x3438 * x93;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x3440 = x3437 + x3439;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3441 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x3441 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x3442 = x3441 * x78;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x3443 = x3440 + x3442;
      // loc("zirgen/circuit/rv32im/memio.cpp":67:35)
      auto x3444 = x3436 + x3443;
      // loc("zirgen/circuit/rv32im/memio.cpp":67:6)
      auto x3445 = x3433 - x3444;
      // loc("zirgen/circuit/rv32im/memio.cpp":67:6)
      if (x3445 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/memio.cpp:67");
      // loc("zirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3446 = x3355 + x3370;
      // loc("zirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3447 = x3446 + x3434;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3448 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x3448 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":69:46)
      auto x3449 = x3448 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3450 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x3450 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":69:46)
      auto x3451 = x3449 + x3450;
      // loc("zirgen/circuit/rv32im/memio.cpp":69:6)
      auto x3452 = x3447 - x3451;
      // loc("zirgen/circuit/rv32im/memio.cpp":69:6)
      if (x3452 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/memio.cpp:69");
      // loc("zirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3453 = x3356 + x3371;
      // loc("zirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3454 = x3453 + x3448;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3455 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x3455 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":71:46)
      auto x3456 = x3455 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3457 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x3457 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":71:46)
      auto x3458 = x3456 + x3457;
      // loc("zirgen/circuit/rv32im/memio.cpp":71:6)
      auto x3459 = x3454 - x3458;
      // loc("zirgen/circuit/rv32im/memio.cpp":71:6)
      if (x3459 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/memio.cpp:71");
      // loc("zirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3460 = x3357 + x3372;
      // loc("zirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3461 = x3460 + x3455;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x3462 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x3462 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3463 = x3462 * x91;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3464 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x3464 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":73:63)
      auto x3465 = x3464 * x79;
      // loc("zirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3466 = x3463 + x3465;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3467 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x3467 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/memio.cpp":73:46)
      auto x3468 = x3466 + x3467;
      // loc("zirgen/circuit/rv32im/memio.cpp":73:6)
      auto x3469 = x3461 - x3468;
      // loc("zirgen/circuit/rv32im/memio.cpp":73:6)
      if (x3469 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/memio.cpp:73");
      // loc("zirgen/circuit/rv32im/memio.cpp":76:15)
      auto x3470 = x96 - x3464;
      // loc("zirgen/circuit/rv32im/memio.cpp":76:7)
      auto x3471 = x3464 * x3470;
      // loc("zirgen/circuit/rv32im/memio.cpp":76:28)
      auto x3472 = x93 - x3464;
      // loc("zirgen/circuit/rv32im/memio.cpp":76:7)
      auto x3473 = x3471 * x3472;
      // loc("zirgen/circuit/rv32im/memio.cpp":76:7)
      if (x3473 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/memio.cpp:76");
      // loc("zirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3474 = x3464 * x80;
      // loc("zirgen/circuit/rv32im/memio.cpp":79:41)
      auto x3475 = x3467 * x37;
      // loc("zirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3476 = x3474 + x3475;
      // loc("zirgen/circuit/rv32im/memio.cpp":79:68)
      auto x3477 = x3457 * x36;
      // loc("zirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3478 = x3476 + x3477;
      // loc("zirgen/circuit/rv32im/memio.cpp":80:14)
      auto x3479 = x3450 * x55;
      // loc("zirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3480 = x3478 + x3479;
      // loc("zirgen/circuit/rv32im/memio.cpp":79:14)
      auto x3481 = x3480 + x3430;
      {
        host_args.at(0) = x3481;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3482 = host_outs.at(0);
        auto x3483 = host_outs.at(1);
        auto x3484 = host_outs.at(2);
        auto x3485 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3482);
          reg = x3482;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3483);
          reg = x3483;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3484);
          reg = x3484;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3485);
          reg = x3485;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3486 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x3486 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3487 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x3487 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3488 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x3488 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3489 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x3489 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3481);
        reg = x3481;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3486);
        reg = x3486;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3487);
        reg = x3487;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3488);
        reg = x3488;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][143 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3489);
        reg = x3489;
      }
      host_args.at(0) = x3369;
      host_args.at(1) = x3370;
      host_args.at(2) = x3371;
      host_args.at(3) = x3372;
      host_args.at(4) = x3348;
      host_args.at(5) = x3354;
      host_args.at(6) = x3355;
      host_args.at(7) = x3356;
      host_args.at(8) = x3357;
      host_args.at(9) = x3359;
      host_args.at(10) = x3365;
      host_args.at(11) = x3366;
      host_args.at(12) = x3367;
      host_args.at(13) = x3368;
      host_args.at(14) = x3481;
      host_args.at(15) = x3443;
      host_args.at(16) = x3486;
      host_args.at(17) = x3487;
      host_args.at(18) = x3488;
      host_args.at(19) = x3489;
      host(ctx, "log", "  imm=%w, rs1=x%u -> %w, rs2=x%u -> %w, Addr = %10x, lowBits = %u, loaded = %w", host_args.data(), 20, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/memio.cpp":92:17)
      auto x3490 = x867 + x79;
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x3491 = x3490 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x3492 = Fp(x3491.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3492);
          reg = x3492;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x3493 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x3493 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x3494 = x3491 - x3493;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x3495 = x3494 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x3496 = Fp(x3495.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3496);
          reg = x3496;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x3497 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x3497 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x3498 = x3495 - x3497;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x3499 = x3498 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x3500 = Fp(x3499.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3500);
          reg = x3500;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x3501 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x3501 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x3502 = x3499 - x3501;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x3503 = x3502 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x3504 = Fp(x3503.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3504);
          reg = x3504;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3505 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x3505 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x3506 = x3503 - x3505;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x3507 = x3506 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3507);
        reg = x3507;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3508 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x3508 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x3509 = x96 - x3508;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x3510 = x3508 * x3509;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3510);
        reg = x3510;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3511 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x3511 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x3512 = x93 - x3508;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x3513 = x3511 * x3512;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x3513 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("zirgen/circuit/rv32im/memio.cpp":93:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x64);
        reg = x64;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":76:46))
      auto x3514 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x3514 != Fp::invalid());
      if (x3514 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3515 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3515 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3516 = x3515 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3516 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:76");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":76:46))
          auto x3517 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3517 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3518 = x3517 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3519 = x3518 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          if (x3519 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:76");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":76:46))
        auto x3520 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3520 != Fp::invalid());
        if (x3520 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3521 = Fp(x3486.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3521);
              reg = x3521;
            }
          }
        }
        if (x3437 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3522 = Fp(x3487.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3522);
              reg = x3522;
            }
          }
        }
        if (x3438 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3523 = Fp(x3488.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3523);
              reg = x3523;
            }
          }
        }
        if (x3441 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3524 = Fp(x3489.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3524);
              reg = x3524;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3525 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3525 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3526 = Fp(x3525.asUInt32() & x63.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3527 = x3526 * x62;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3527);
            reg = x3527;
          }
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3528 = Fp(x3525.asUInt32() & x52.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3529 = x3528 * x93;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3529);
            reg = x3529;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3530 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3530 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3531 = x96 - x3530;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3532 = x3530 * x3531;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3532 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:76");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3533 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3533 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3534 = x3530 * x63;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3535 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3535 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3536 = x3535 * x56;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3537 = x3534 + x3536;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3538 = x3533 - x3537;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3538 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3539 = x3530 * x92;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3540 = x3520 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3541 = x3437 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3542 = x3540 + x3541;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3543 = x3438 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3544 = x3542 + x3543;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3545 = x3441 * x3489;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3546 = x3544 + x3545;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3546);
          reg = x3546;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3539);
          reg = x3539;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3539);
          reg = x3539;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3539);
          reg = x3539;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3547 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3547 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3548 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3548 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3549 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3549 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3550 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3550 != Fp::invalid());
        host_args.at(0) = x3539;
        host_args.at(1) = x3547;
        host_args.at(2) = x3548;
        host_args.at(3) = x3549;
        host_args.at(4) = x3550;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3380 != 0) {
          // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
          auto x3551 = x3376 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3547);
            reg = x3547;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3548);
            reg = x3548;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3549);
            reg = x3549;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3550);
            reg = x3550;
          }
          {
            host_args.at(0) = x3551;
            host_args.at(1) = x3547;
            host_args.at(2) = x3548;
            host_args.at(3) = x3549;
            host_args.at(4) = x3550;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3552 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3552 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3553 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3553 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3554 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3554 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3555 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3555 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3551);
            reg = x3551;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3552);
            reg = x3552;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3553);
            reg = x3553;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3554);
            reg = x3554;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3555);
            reg = x3555;
          }
        }
        if (x3379 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        auto x3556 = x3204 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3556 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:76");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":76:46)
        if (x3193 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:76");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3557 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3558 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3559 = x3557 + x3558;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3560 = x3559 + x3359;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3561 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3562 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3563 = x3561 + x3562;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3564 = x3563 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3565 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3560);
          reg = x3560;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3564);
          reg = x3564;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3565);
          reg = x3565;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3565);
          reg = x3565;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":77:46))
      auto x3566 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x3566 != Fp::invalid());
      if (x3566 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3567 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3567 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3568 = x3567 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3568 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:77");
        }
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":77:46))
          auto x3569 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3569 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3570 = x3569 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3571 = x3570 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          if (x3571 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:77");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":77:46))
        auto x3572 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3572 != Fp::invalid());
        if (x3572 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3573 = Fp(x3487.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3573);
              reg = x3573;
            }
          }
        }
        if (x3438 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3574 = Fp(x3489.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3574);
              reg = x3574;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3575 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3575 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3576 = Fp(x3575.asUInt32() & x63.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3577 = x3576 * x62;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3577);
            reg = x3577;
          }
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3578 = Fp(x3575.asUInt32() & x52.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3579 = x3578 * x93;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3579);
            reg = x3579;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3580 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3580 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3581 = x96 - x3580;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3582 = x3580 * x3581;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3582 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:77");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3583 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3583 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3584 = x3580 * x63;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3585 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3585 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3586 = x3585 * x56;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3587 = x3584 + x3586;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3588 = x3583 - x3587;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3588 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3589 = x3580 * x92;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3590 = x3572 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3591 = x3438 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3592 = x3590 + x3591;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3593 = x3572 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3594 = x3438 * x3489;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3595 = x3593 + x3594;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3592);
          reg = x3592;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3595);
          reg = x3595;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3589);
          reg = x3589;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3596 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3596 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3597 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3597 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3598 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3598 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3599 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3599 != Fp::invalid());
        host_args.at(0) = x3589;
        host_args.at(1) = x3596;
        host_args.at(2) = x3597;
        host_args.at(3) = x3598;
        host_args.at(4) = x3599;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3380 != 0) {
          // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
          auto x3600 = x3376 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3596);
            reg = x3596;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3597);
            reg = x3597;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3598);
            reg = x3598;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3599);
            reg = x3599;
          }
          {
            host_args.at(0) = x3600;
            host_args.at(1) = x3596;
            host_args.at(2) = x3597;
            host_args.at(3) = x3598;
            host_args.at(4) = x3599;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3601 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3601 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3602 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3602 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3603 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3603 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3604 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3604 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3600);
            reg = x3600;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3601);
            reg = x3601;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3602);
            reg = x3602;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3603);
            reg = x3603;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3604);
            reg = x3604;
          }
        }
        if (x3379 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3605 = x3204 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3605 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:77");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        auto x3606 = x3193 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":77:46)
        if (x3606 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:77");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3607 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3608 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3609 = x3607 + x3608;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3610 = x3609 + x3359;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3611 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3612 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3613 = x3611 + x3612;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3614 = x3613 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3615 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3610);
          reg = x3610;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3614);
          reg = x3614;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3615);
          reg = x3615;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3615);
          reg = x3615;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":78:46))
      auto x3616 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x3616 != Fp::invalid());
      if (x3616 != 0) {
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3617 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3617 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3618 = x3617 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3618 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:78");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":78:46))
          auto x3619 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3619 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3620 = x3619 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3621 = x3620 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          if (x3621 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:78");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":78:46))
        auto x3622 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3622 != Fp::invalid());
        if (x3622 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3623 = Fp(x3489.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3623);
              reg = x3623;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3624 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3624 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3625 = Fp(x3624.asUInt32() & x63.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3626 = x3625 * x62;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3626);
            reg = x3626;
          }
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3627 = Fp(x3624.asUInt32() & x52.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3628 = x3627 * x93;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3628);
            reg = x3628;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3629 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3629 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3630 = x96 - x3629;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3631 = x3629 * x3630;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3631 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:78");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3632 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3632 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3633 = x3629 * x63;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3634 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3634 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3635 = x3634 * x56;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3636 = x3633 + x3635;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3637 = x3632 - x3636;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3637 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3638 = x3622 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3639 = x3622 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3640 = x3622 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3641 = x3622 * x3489;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3638);
          reg = x3638;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3639);
          reg = x3639;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3640);
          reg = x3640;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3641);
          reg = x3641;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3642 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3642 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3643 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3643 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3644 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3644 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3645 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3645 != Fp::invalid());
        host_args.at(0) = x95;
        host_args.at(1) = x3642;
        host_args.at(2) = x3643;
        host_args.at(3) = x3644;
        host_args.at(4) = x3645;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3380 != 0) {
          // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
          auto x3646 = x3376 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3642);
            reg = x3642;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3643);
            reg = x3643;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3644);
            reg = x3644;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3645);
            reg = x3645;
          }
          {
            host_args.at(0) = x3646;
            host_args.at(1) = x3642;
            host_args.at(2) = x3643;
            host_args.at(3) = x3644;
            host_args.at(4) = x3645;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3647 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3647 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3648 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3648 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3649 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3649 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3650 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3650 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3646);
            reg = x3646;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3647);
            reg = x3647;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3648);
            reg = x3648;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3649);
            reg = x3649;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3650);
            reg = x3650;
          }
        }
        if (x3379 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3651 = x3204 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3651 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:78");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        auto x3652 = x3193 - x93;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":78:46)
        if (x3652 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:78");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3653 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3654 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3655 = x3653 + x3654;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3656 = x3655 + x3359;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3657 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3658 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3659 = x3657 + x3658;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3660 = x3659 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3661 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3656);
          reg = x3656;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3660);
          reg = x3660;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3661);
          reg = x3661;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3661);
          reg = x3661;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":79:46))
      auto x3662 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x3662 != Fp::invalid());
      if (x3662 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3663 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3663 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3664 = x3663 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3664 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:79");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":79:46))
          auto x3665 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3665 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3666 = x3665 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3667 = x3666 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          if (x3667 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:79");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":79:46))
        auto x3668 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3668 != Fp::invalid());
        if (x3668 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3669 = Fp(x3486.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3669);
              reg = x3669;
            }
          }
        }
        if (x3437 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3670 = Fp(x3487.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3670);
              reg = x3670;
            }
          }
        }
        if (x3438 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3671 = Fp(x3488.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3671);
              reg = x3671;
            }
          }
        }
        if (x3441 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3672 = Fp(x3489.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3672);
              reg = x3672;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3673 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3673 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3674 = Fp(x3673.asUInt32() & x63.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3675 = x3674 * x62;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3675);
            reg = x3675;
          }
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3676 = Fp(x3673.asUInt32() & x52.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3677 = x3676 * x93;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3677);
            reg = x3677;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3678 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3678 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3679 = x96 - x3678;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3680 = x3678 * x3679;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3680 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:79");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3681 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3681 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3682 = x3678 * x63;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3683 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3683 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3684 = x3683 * x56;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3685 = x3682 + x3684;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3686 = x3681 - x3685;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3686 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3687 = x3668 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3688 = x3437 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3689 = x3687 + x3688;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3690 = x3438 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3691 = x3689 + x3690;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3692 = x3441 * x3489;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3693 = x3691 + x3692;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3693);
          reg = x3693;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3694 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3694 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3695 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3695 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3696 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3696 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3697 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3697 != Fp::invalid());
        host_args.at(0) = x95;
        host_args.at(1) = x3694;
        host_args.at(2) = x3695;
        host_args.at(3) = x3696;
        host_args.at(4) = x3697;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3380 != 0) {
          // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
          auto x3698 = x3376 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3694);
            reg = x3694;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3695);
            reg = x3695;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3696);
            reg = x3696;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3697);
            reg = x3697;
          }
          {
            host_args.at(0) = x3698;
            host_args.at(1) = x3694;
            host_args.at(2) = x3695;
            host_args.at(3) = x3696;
            host_args.at(4) = x3697;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3699 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3699 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3700 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3700 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3701 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3701 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3702 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3702 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3698);
            reg = x3698;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3699);
            reg = x3699;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3700);
            reg = x3700;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3701);
            reg = x3701;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3702);
            reg = x3702;
          }
        }
        if (x3379 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3703 = x3204 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3703 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:79");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        auto x3704 = x3193 - x79;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":79:46)
        if (x3704 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:79");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3705 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3706 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3707 = x3705 + x3706;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3708 = x3707 + x3359;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3709 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3710 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3711 = x3709 + x3710;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3712 = x3711 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3713 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3708);
          reg = x3708;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3712);
          reg = x3712;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3713);
          reg = x3713;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3713);
          reg = x3713;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":80:46))
      auto x3714 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x3714 != Fp::invalid());
      if (x3714 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3715 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3715 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3716 = x3715 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3716 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:80");
        }
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":80:46))
          auto x3717 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3717 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3718 = x3717 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3719 = x3718 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          if (x3719 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:80");
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":80:46))
        auto x3720 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3720 != Fp::invalid());
        if (x3720 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3721 = Fp(x3487.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3721);
              reg = x3721;
            }
          }
        }
        if (x3438 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:21)
            auto x3722 = Fp(x3489.asUInt32() & x92.asUInt32());
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x3722);
              reg = x3722;
            }
          }
        }
        {
          // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
          auto x3723 = args[2][29 * steps + ((cycle - 0) & mask)];
          assert(x3723 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3724 = Fp(x3723.asUInt32() & x63.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3725 = x3724 * x62;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3725);
            reg = x3725;
          }
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3726 = Fp(x3723.asUInt32() & x52.asUInt32());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3727 = x3726 * x93;
          // loc("zirgen/components/bytes.cpp":101:3)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3727);
            reg = x3727;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3728 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x3728 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3729 = x96 - x3728;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3730 = x3728 * x3729;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3730 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:80");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3731 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x3731 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3732 = x3728 * x63;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x3733 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x3733 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3734 = x3733 * x56;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3735 = x3732 + x3734;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3736 = x3731 - x3735;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3736 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3737 = x3720 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3738 = x3438 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3739 = x3737 + x3738;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3740 = x3720 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3741 = x3438 * x3489;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3742 = x3740 + x3741;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3739);
          reg = x3739;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3742);
          reg = x3742;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3743 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x3743 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3744 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x3744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3745 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x3745 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3746 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x3746 != Fp::invalid());
        host_args.at(0) = x95;
        host_args.at(1) = x3743;
        host_args.at(2) = x3744;
        host_args.at(3) = x3745;
        host_args.at(4) = x3746;
        host(ctx, "log", "  fillByte = %4x, extended: %w", host_args.data(), 5, host_outs.data(), 0);
        if (x3380 != 0) {
          // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
          auto x3747 = x3376 + x48;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3743);
            reg = x3743;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3744);
            reg = x3744;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3745);
            reg = x3745;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3746);
            reg = x3746;
          }
          {
            host_args.at(0) = x3747;
            host_args.at(1) = x3743;
            host_args.at(2) = x3744;
            host_args.at(3) = x3745;
            host_args.at(4) = x3746;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3748 = args[2][147 * steps + ((cycle - 0) & mask)];
          assert(x3748 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3749 = args[2][148 * steps + ((cycle - 0) & mask)];
          assert(x3749 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3750 = args[2][149 * steps + ((cycle - 0) & mask)];
          assert(x3750 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x3751 = args[2][150 * steps + ((cycle - 0) & mask)];
          assert(x3751 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3747);
            reg = x3747;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3748);
            reg = x3748;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3749);
            reg = x3749;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3750);
            reg = x3750;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3751);
            reg = x3751;
          }
        }
        if (x3379 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3752 = x3204 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3752 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:80");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        auto x3753 = x3193 - x75;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":80:46)
        if (x3753 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:80");
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3754 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
        auto x3755 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3756 = x3754 + x3755;
        // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
        auto x3757 = x3756 + x3359;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3758 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:21)
        auto x3759 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3760 = x3758 + x3759;
        // loc("zirgen/circuit/rv32im/decode.cpp":71:7)
        auto x3761 = x3760 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":72:7)
        auto x3762 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3757);
          reg = x3757;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3761);
          reg = x3761;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3762);
          reg = x3762;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3762);
          reg = x3762;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":81:46))
      auto x3763 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x3763 != Fp::invalid());
      if (x3763 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3764 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3764 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3765 = x3764 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3765 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:81");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":81:46))
          auto x3766 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3766 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3767 = x3766 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
          auto x3768 = x3767 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
          if (x3768 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:81");
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":81:46))
        auto x3769 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3769 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3770 = x3769 * x3365;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3771 = x96 - x3769;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3772 = x3771 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3773 = x3770 + x3772;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3774 = x3437 * x3365;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3775 = x96 - x3437;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3776 = x3775 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3777 = x3774 + x3776;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3778 = x3438 * x3365;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3779 = x96 - x3438;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3780 = x3779 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3781 = x3778 + x3780;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3782 = x3441 * x3365;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3783 = x96 - x3441;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3784 = x3783 * x3489;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3785 = x3782 + x3784;
        host_args.at(0) = x3773;
        host_args.at(1) = x3777;
        host_args.at(2) = x3781;
        host_args.at(3) = x3785;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3773);
          reg = x3773;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3777);
          reg = x3777;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3781);
          reg = x3781;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3785);
          reg = x3785;
        }
        {
          host_args.at(0) = x3481;
          host_args.at(1) = x3773;
          host_args.at(2) = x3777;
          host_args.at(3) = x3781;
          host_args.at(4) = x3785;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3786 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3786 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3787 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3787 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3788 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3788 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3789 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3789 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3481);
          reg = x3481;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3786);
          reg = x3786;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3787);
          reg = x3787;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3788);
          reg = x3788;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3789);
          reg = x3789;
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        auto x3790 = x3204 - x35;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3790 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:81");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":81:46)
        if (x3193 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:81");
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3791 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3792 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3793 = x3791 + x3792;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3794 = x3793 + x3376;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3795 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3796 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3797 = x3795 + x3796;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3798 = x3797 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3799 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3794);
          reg = x3794;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3798);
          reg = x3798;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3799);
          reg = x3799;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3799);
          reg = x3799;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":82:46))
      auto x3800 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x3800 != Fp::invalid());
      if (x3800 != 0) {
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3801 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3801 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3802 = x3801 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3802 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:82");
        }
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":82:46))
          auto x3803 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3803 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3804 = x3803 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
          auto x3805 = x3804 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
          if (x3805 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:82");
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":82:46))
        auto x3806 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3806 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3807 = x3806 * x3365;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3808 = x96 - x3806;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3809 = x3808 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3810 = x3807 + x3809;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3811 = x3438 * x3365;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3812 = x96 - x3438;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3813 = x3812 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3814 = x3811 + x3813;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3815 = x3806 * x3366;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3816 = x3808 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3817 = x3815 + x3816;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3818 = x3438 * x3366;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3819 = x3812 * x3489;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3820 = x3818 + x3819;
        host_args.at(0) = x3810;
        host_args.at(1) = x3817;
        host_args.at(2) = x3814;
        host_args.at(3) = x3820;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3810);
          reg = x3810;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3817);
          reg = x3817;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3814);
          reg = x3814;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3820);
          reg = x3820;
        }
        {
          host_args.at(0) = x3481;
          host_args.at(1) = x3810;
          host_args.at(2) = x3817;
          host_args.at(3) = x3814;
          host_args.at(4) = x3820;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3821 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3821 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3822 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3822 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3823 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3823 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3824 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3824 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3481);
          reg = x3481;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3821);
          reg = x3821;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3822);
          reg = x3822;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3823);
          reg = x3823;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3824);
          reg = x3824;
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3825 = x3204 - x35;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3825 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:82");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        auto x3826 = x3193 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":82:46)
        if (x3826 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:82");
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3827 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3828 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3829 = x3827 + x3828;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3830 = x3829 + x3376;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3831 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3832 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3833 = x3831 + x3832;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3834 = x3833 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3835 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3830);
          reg = x3830;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3834);
          reg = x3834;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3835);
          reg = x3835;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3835);
          reg = x3835;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":83:46))
      auto x3836 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x3836 != Fp::invalid());
      if (x3836 != 0) {
        if (x96 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3837 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3837 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3838 = x3837 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3838 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:83");
        }
        if (x95 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":83:46))
          auto x3839 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x3839 != Fp::invalid());
          // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3840 = x3839 + x3438;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
          auto x3841 = x3840 - x96;
          // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
          if (x3841 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:83");
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":83:46))
        auto x3842 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x3842 != Fp::invalid());
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3843 = x3842 * x3365;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3844 = x96 - x3842;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3845 = x3844 * x3486;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3846 = x3843 + x3845;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3847 = x3842 * x3366;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3848 = x3844 * x3487;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3849 = x3847 + x3848;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3850 = x3842 * x3367;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3851 = x3844 * x3488;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3852 = x3850 + x3851;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3853 = x3842 * x3368;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3854 = x3844 * x3489;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3855 = x3853 + x3854;
        host_args.at(0) = x3846;
        host_args.at(1) = x3849;
        host_args.at(2) = x3852;
        host_args.at(3) = x3855;
        host(ctx, "log", "  writeVal = %w", host_args.data(), 4, host_outs.data(), 0);
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3846);
          reg = x3846;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3849);
          reg = x3849;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3852);
          reg = x3852;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3855);
          reg = x3855;
        }
        {
          host_args.at(0) = x3481;
          host_args.at(1) = x3846;
          host_args.at(2) = x3849;
          host_args.at(3) = x3852;
          host_args.at(4) = x3855;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3856 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x3856 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3857 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x3857 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3858 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x3858 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x3859 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x3859 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3481);
          reg = x3481;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3856);
          reg = x3856;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3857);
          reg = x3857;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3858);
          reg = x3858;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3859);
          reg = x3859;
        }
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3860 = x3204 - x35;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3860 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:83");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        auto x3861 = x3193 - x93;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":83:46)
        if (x3861 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:83");
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3862 = x3164 * x63;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:21)
        auto x3863 = x3167 * x60;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3864 = x3862 + x3863;
        // loc("zirgen/circuit/rv32im/decode.cpp":79:7)
        auto x3865 = x3864 + x3376;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3866 = x3157 * x49;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:21)
        auto x3867 = x3159 * x93;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3868 = x3866 + x3867;
        // loc("zirgen/circuit/rv32im/decode.cpp":80:7)
        auto x3869 = x3868 + x3161;
        // loc("zirgen/circuit/rv32im/decode.cpp":81:7)
        auto x3870 = x3157 * x92;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3865);
          reg = x3865;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3869);
          reg = x3869;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3870);
          reg = x3870;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3870);
          reg = x3870;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[4](Reg)"("./zirgen/components/mux.h":49:25))
    auto x3871 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x3871 != Fp::invalid());
    if (x3871 != 0) {
      // loc("zirgen/circuit/rv32im/multiply.cpp":20:41)
      auto x3872 = x867 * x77;
      {
        host_args.at(0) = x3872;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x3873 = host_outs.at(0);
        auto x3874 = host_outs.at(1);
        auto x3875 = host_outs.at(2);
        auto x3876 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3873);
          reg = x3873;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3874);
          reg = x3874;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3875);
          reg = x3875;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3876);
          reg = x3876;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3877 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x3877 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3878 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x3878 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3879 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x3879 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3880 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x3880 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3872);
        reg = x3872;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3877);
        reg = x3877;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3878);
        reg = x3878;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3879);
        reg = x3879;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3880);
        reg = x3880;
      }
      {
        // loc("zirgen/circuit/rv32im/decode.cpp":11:16)
        auto x3881 = Fp(x3880.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":11:15)
        auto x3882 = x3881 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3882);
          reg = x3882;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":12:17)
        auto x3883 = Fp(x3880.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":12:16)
        auto x3884 = x3883 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3884);
          reg = x3884;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":13:16)
        auto x3885 = Fp(x3880.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":13:15)
        auto x3886 = x3885 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3886);
          reg = x3886;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":14:16)
        auto x3887 = Fp(x3880.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":14:15)
        auto x3888 = x3887 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3888);
          reg = x3888;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":15:17)
        auto x3889 = Fp(x3880.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":15:16)
        auto x3890 = x3889 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3890);
          reg = x3890;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":16:17)
        auto x3891 = Fp(x3880.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3891);
          reg = x3891;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":17:17)
        auto x3892 = Fp(x3879.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":17:16)
        auto x3893 = x3892 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3893);
          reg = x3893;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":18:18)
        auto x3894 = Fp(x3879.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":18:17)
        auto x3895 = x3894 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3895);
          reg = x3895;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":19:17)
        auto x3896 = Fp(x3879.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":19:16)
        auto x3897 = x3896 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3897);
          reg = x3897;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":20:18)
        auto x3898 = Fp(x3879.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":20:17)
        auto x3899 = x3898 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3899);
          reg = x3899;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":21:18)
        auto x3900 = Fp(x3879.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3900);
          reg = x3900;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":22:17)
        auto x3901 = Fp(x3878.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":22:16)
        auto x3902 = x3901 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3902);
          reg = x3902;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":23:19)
        auto x3903 = Fp(x3878.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":23:18)
        auto x3904 = x3903 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3904);
          reg = x3904;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":24:20)
        auto x3905 = Fp(x3878.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":24:19)
        auto x3906 = x3905 * x58;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3906);
          reg = x3906;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":25:17)
        auto x3907 = Fp(x3878.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":25:16)
        auto x3908 = x3907 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3908);
          reg = x3908;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":26:17)
        auto x3909 = Fp(x3878.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3909);
          reg = x3909;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":27:16)
        auto x3910 = Fp(x3877.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":27:15)
        auto x3911 = x3910 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3911);
          reg = x3911;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":28:18)
        auto x3912 = Fp(x3877.asUInt32() & x52.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x3912);
          reg = x3912;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3913 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x3913 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3914 = x3913 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3915 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x3915 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3916 = x3915 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3917 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x3917 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:25)
      auto x3918 = x3917 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3919 = x3916 + x3918;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3920 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x3920 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:39)
      auto x3921 = x3920 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3922 = x3919 + x3921;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3923 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x3923 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x3924 = x3922 + x3923;
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x3925 = x3914 + x3924;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3926 = x3925 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3927 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x3927 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x3928 = x3926 + x3927;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      auto x3929 = x3880 - x3928;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      if (x3929 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3930 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x3930 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3931 = x3930 * x72;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3932 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x3932 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:37)
      auto x3933 = x3932 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3934 = x3931 + x3933;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3935 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x3935 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x3936 = x3934 + x3935;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3937 = x3936 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3938 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x3938 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:69)
      auto x3939 = x3938 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3940 = x3937 + x3939;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3941 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x3941 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x3942 = x3940 + x3941;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      auto x3943 = x3879 - x3942;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      if (x3943 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3944 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x3944 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3945 = x3944 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3946 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x3946 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3947 = x3946 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3948 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x3948 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x3949 = x3947 + x3948;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:36)
      auto x3950 = x3949 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3951 = x3945 + x3950;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3952 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x3952 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:53)
      auto x3953 = x3952 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3954 = x3951 + x3953;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3955 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x3955 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x3956 = x3954 + x3955;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      auto x3957 = x3878 - x3956;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      if (x3957 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x3958 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x3958 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3959 = x3958 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x3960 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x3960 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x3961 = x3959 + x3960;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      auto x3962 = x3877 - x3961;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      if (x3962 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x3877;
        host_args.at(1) = x3878;
        host_args.at(2) = x3879;
        host_args.at(3) = x3880;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x3963 = host_outs.at(0);
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3964 = (x3963 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3964);
            reg = x3964;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3965 = x3963 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3966 = (x3965 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3966);
            reg = x3966;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3967 = x3963 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3968 = (x3967 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3968);
            reg = x3968;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3969 = x3963 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3970 = (x3969 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3970);
            reg = x3970;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3971 = x3963 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3972 = (x3971 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3972);
            reg = x3972;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3973 = x3963 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3974 = (x3973 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3974);
            reg = x3974;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3975 = x3963 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3976 = (x3975 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3976);
            reg = x3976;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3977 = x3963 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x3978 = (x3977 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x3978);
            reg = x3978;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3979 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x3979 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3980 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x3980 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3981 = x3980 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3982 = x3979 + x3981;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3983 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x3983 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3984 = x3983 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3985 = x3982 + x3984;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3986 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x3986 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3987 = x3986 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3988 = x3985 + x3987;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3989 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x3989 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3990 = x3989 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3991 = x3988 + x3990;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3992 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x3992 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3993 = x3992 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3994 = x3991 + x3993;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x3995 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x3995 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x3996 = x3995 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x3997 = x3994 + x3996;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x3998 = x3997 - x3963;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x3998 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      host_args.at(0) = x95;
      host_args.at(1) = x95;
      host_args.at(2) = x95;
      host_args.at(3) = x95;
      host_args.at(4) = x95;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signedA=%u, signedB=%u, useHigh=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":102:49))
      auto x3999 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x3999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":103:49))
      auto x4000 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4000 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":103:49)
      auto x4001 = x3999 + x4000;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":104:49))
      auto x4002 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4002 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":104:49)
      auto x4003 = x4001 + x4002;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":105:49))
      auto x4004 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4004 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":106:49))
      auto x4005 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4005 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":106:49)
      auto x4006 = x4004 + x4005;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4007 = x3938 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4008 = x3941 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4009 = x4007 + x4008;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4010 = x4009 + x3944;
      // loc("zirgen/circuit/rv32im/multiply.cpp":54:39)
      auto x4011 = x4010 + x48;
      {
        host_args.at(0) = x4011;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4012 = host_outs.at(0);
        auto x4013 = host_outs.at(1);
        auto x4014 = host_outs.at(2);
        auto x4015 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4012);
          reg = x4012;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4013);
          reg = x4013;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4014);
          reg = x4014;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4015);
          reg = x4015;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4016 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4017 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4018 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4019 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4019 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4011);
        reg = x4011;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4016);
        reg = x4016;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4017);
        reg = x4017;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4018);
        reg = x4018;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4019);
        reg = x4019;
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4020 = x3927 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4021 = x4020 + x3936;
      // loc("zirgen/circuit/rv32im/multiply.cpp":55:39)
      auto x4022 = x4021 + x48;
      {
        host_args.at(0) = x4022;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4023 = host_outs.at(0);
        auto x4024 = host_outs.at(1);
        auto x4025 = host_outs.at(2);
        auto x4026 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4023);
          reg = x4023;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4024);
          reg = x4024;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4025);
          reg = x4025;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4026);
          reg = x4026;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4027 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4027 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4028 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4028 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4029 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4030 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4030 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4022);
        reg = x4022;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4027);
        reg = x4027;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4028);
        reg = x4028;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4029);
        reg = x4029;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4030);
        reg = x4030;
      }
      host_args.at(0) = x4010;
      host_args.at(1) = x4016;
      host_args.at(2) = x4017;
      host_args.at(3) = x4018;
      host_args.at(4) = x4019;
      host_args.at(5) = x4021;
      host_args.at(6) = x4027;
      host_args.at(7) = x4028;
      host_args.at(8) = x4029;
      host_args.at(9) = x4030;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4031 = x3920 * x63;
      // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4032 = x3923 * x60;
      // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4033 = x4031 + x4032;
      // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4034 = x4033 + x4021;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4035 = x4005 * x4034;
      // loc("zirgen/circuit/rv32im/multiply.cpp":61:35)
      auto x4036 = x96 - x4005;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4037 = x4036 * x4027;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4038 = x4035 + x4037;
      {
        // loc("zirgen/circuit/rv32im/multiply.cpp":63:16)
        auto x4039 = Fp(x4038.asUInt32() & x34.asUInt32());
        // loc("zirgen/circuit/rv32im/multiply.cpp":63:15)
        auto x4040 = x4039 * x54;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4040);
          reg = x4040;
        }
        // loc("zirgen/circuit/rv32im/multiply.cpp":64:16)
        auto x4041 = Fp(x4038.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/multiply.cpp":64:15)
        auto x4042 = x4041 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4042);
          reg = x4042;
        }
        // loc("zirgen/circuit/rv32im/multiply.cpp":65:14)
        auto x4043 = Fp(x4038.asUInt32() & x33.asUInt32());
        {
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4044 = Fp(x4043.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4044);
            reg = x4044;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4045 = Fp(x4043.asUInt32() & x93.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4046 = x4045 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4046);
            reg = x4046;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4047 = Fp(x4043.asUInt32() & x79.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4048 = x4047 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4048);
            reg = x4048;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4049 = Fp(x4043.asUInt32() & x72.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4050 = x4049 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4050);
            reg = x4050;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4051 = Fp(x4043.asUInt32() & x64.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4052 = x4051 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4052);
            reg = x4052;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4053 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x4053 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":189:21)
          auto x4054 = x4053 * x65;
          // loc("zirgen/components/u32.cpp":189:17)
          auto x4055 = x4054 + x96;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4056 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x4056 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":189:42)
          auto x4057 = x4056 * x78;
          // loc("zirgen/components/u32.cpp":189:38)
          auto x4058 = x4057 + x96;
          // loc("zirgen/components/u32.cpp":189:16)
          auto x4059 = x4055 * x4058;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4060 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x4060 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":189:58)
          auto x4061 = x4060 + x96;
          // loc("zirgen/components/u32.cpp":189:16)
          auto x4062 = x4059 * x4061;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4063 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x4063 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":190:15)
          auto x4064 = x4063 * x93;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4065 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x4065 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":190:15)
          auto x4066 = x4064 + x4065;
          // loc("zirgen/components/u32.cpp":192:13)
          auto x4067 = (x4066 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:9)
          auto x4068 = x4067 * x4062;
          // loc("zirgen/components/u32.cpp":192:34)
          auto x4069 = x4066 - x96;
          // loc("zirgen/components/u32.cpp":192:34)
          auto x4070 = (x4069 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:30)
          auto x4071 = x4070 * x4062;
          // loc("zirgen/components/u32.cpp":192:55)
          auto x4072 = x4066 - x93;
          // loc("zirgen/components/u32.cpp":192:55)
          auto x4073 = (x4072 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:51)
          auto x4074 = x4073 * x4062;
          // loc("zirgen/components/u32.cpp":192:76)
          auto x4075 = x4066 - x78;
          // loc("zirgen/components/u32.cpp":192:76)
          auto x4076 = (x4075 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:72)
          auto x4077 = x4076 * x4062;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4068);
            reg = x4068;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4071);
            reg = x4071;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4074);
            reg = x4074;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4077);
            reg = x4077;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4078 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x4078 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4079 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4079 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4080 = x4079 * x93;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4081 = x4078 + x4080;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4082 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4082 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4083 = x4082 * x79;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4084 = x4081 + x4083;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4085 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x4085 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4086 = x4085 * x72;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4087 = x4084 + x4086;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4088 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x4088 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4089 = x4088 * x64;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4090 = x4087 + x4089;
        // loc("zirgen/components/u32.cpp":195:6)
        auto x4091 = x4090 - x4043;
        // loc("zirgen/components/u32.cpp":195:6)
        if (x4091 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:195");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4092 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4092 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x4093 = x4092 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4094 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4094 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/multiply.cpp":67:37)
      auto x4095 = x4094 * x60;
      // loc("zirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x4096 = x4093 + x4095;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4097 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4097 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4098 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4098 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4099 = x4098 * x93;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4100 = x4097 + x4099;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4101 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x4101 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4102 = x4101 * x79;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4103 = x4100 + x4102;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4104 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x4104 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4105 = x4104 * x72;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4106 = x4103 + x4105;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4107 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x4107 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4108 = x4107 * x64;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4109 = x4106 + x4108;
      // loc("zirgen/circuit/rv32im/multiply.cpp":67:23)
      auto x4110 = x4096 + x4109;
      // loc("zirgen/circuit/rv32im/multiply.cpp":67:6)
      auto x4111 = x4038 - x4110;
      // loc("zirgen/circuit/rv32im/multiply.cpp":67:6)
      if (x4111 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/multiply.cpp:67");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4112 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x4112 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4113 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x4113 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4114 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x4114 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Po2/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4115 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4115 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4116 = x4006 * x4112;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4117 = x4006 * x4113;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4118 = x4006 * x4114;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4119 = x4006 * x4115;
      // loc("zirgen/circuit/rv32im/multiply.cpp":70:42)
      auto x4120 = x96 - x4006;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4121 = x4120 * x4027;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4122 = x4120 * x4028;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4123 = x4120 * x4029;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4124 = x4120 * x4030;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4125 = x4116 + x4121;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4126 = x4117 + x4122;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4127 = x4118 + x4123;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4128 = x4119 + x4124;
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x4129 = Fp(x4019.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x4130 = x4129 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4130);
          reg = x4130;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x4131 = Fp(x4019.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x4132 = x4131 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4132);
          reg = x4132;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4133 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4133 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x4134 = x4133 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4135 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4135 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x4136 = x4135 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x4137 = x4134 + x4136;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x4138 = x4019 - x4137;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x4138 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x4139 = Fp(x4128.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x4140 = x4139 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4140);
          reg = x4140;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x4141 = Fp(x4128.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x4142 = x4141 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4142);
          reg = x4142;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4143 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4143 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x4144 = x4143 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4145 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4145 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x4146 = x4145 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x4147 = x4144 + x4146;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x4148 = x4128 - x4147;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x4148 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/components/u32.cpp":213:13)
      auto x4149 = x3999 * x4143;
      // loc("zirgen/components/u32.cpp":213:3)
      {
        auto& reg = args[2][201 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4149);
        reg = x4149;
      }
      // loc("zirgen/components/u32.cpp":214:13)
      auto x4150 = x4001 * x4133;
      // loc("zirgen/components/u32.cpp":214:3)
      {
        auto& reg = args[2][202 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4150);
        reg = x4150;
      }
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4151 = x4016 * x4125;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4152 = x4017 * x4125;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4153 = x4016 * x4126;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4154 = x4152 + x4153;
      // loc("zirgen/components/u32.cpp":231:19)
      auto x4155 = x4154 * x91;
      // loc("zirgen/components/u32.cpp":231:13)
      auto x4156 = x4151 + x4155;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4157 = Fp(x4156.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4157);
          reg = x4157;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4158 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4158 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4159 = x4156 - x4158;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4160 = x4159 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4161 = Fp(x4160.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4161);
          reg = x4161;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4162 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4162 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4163 = x4160 - x4162;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4164 = x4163 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4165 = Fp(x4164.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4165);
          reg = x4165;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4166 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4166 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4167 = x4164 - x4166;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4168 = x4167 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4168);
        reg = x4168;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4169 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x4169 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":219:19)
      auto x4170 = x4169 * x91;
      // loc("zirgen/components/u32.cpp":219:13)
      auto x4171 = x4166 + x4170;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4172 = x4018 * x4125;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4173 = x4017 * x4126;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4174 = x4172 + x4173;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4175 = x4016 * x4127;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4176 = x4174 + x4175;
      // loc("zirgen/components/u32.cpp":231:13)
      auto x4177 = x4171 + x4176;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4178 = x4019 * x4125;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4179 = x4018 * x4126;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4180 = x4178 + x4179;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4181 = x4017 * x4127;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4182 = x4180 + x4181;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4183 = x4016 * x4128;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4184 = x4182 + x4183;
      // loc("zirgen/components/u32.cpp":231:19)
      auto x4185 = x4184 * x91;
      // loc("zirgen/components/u32.cpp":231:13)
      auto x4186 = x4177 + x4185;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4187 = Fp(x4186.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4187);
          reg = x4187;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4188 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4188 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4189 = x4186 - x4188;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4190 = x4189 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4191 = Fp(x4190.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4191);
          reg = x4191;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4192 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4192 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4193 = x4190 - x4192;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4194 = x4193 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4195 = Fp(x4194.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4195);
          reg = x4195;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4196 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4196 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4197 = x4194 - x4196;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4198 = x4197 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4198);
        reg = x4198;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4199 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x4199 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":219:19)
      auto x4200 = x4199 * x91;
      // loc("zirgen/components/u32.cpp":219:13)
      auto x4201 = x4196 + x4200;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4202 = x4019 * x4126;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4203 = x4018 * x4127;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4204 = x4202 + x4203;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4205 = x4017 * x4128;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4206 = x4204 + x4205;
      // loc("zirgen/components/u32.cpp":231:13)
      auto x4207 = x4201 + x4206;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4208 = x4019 * x4127;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4209 = x4018 * x4128;
      // loc("zirgen/components/u32.cpp":229:20)
      auto x4210 = x4208 + x4209;
      // loc("zirgen/components/u32.cpp":231:19)
      auto x4211 = x4210 * x91;
      // loc("zirgen/components/u32.cpp":231:13)
      auto x4212 = x4207 + x4211;
      // loc("zirgen/components/u32.cpp":234:13)
      auto x4213 = x4212 + x32;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x4214 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x4214 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":234:53)
      auto x4215 = x4017 * x91;
      // loc("zirgen/components/u32.cpp":234:38)
      auto x4216 = x4016 + x4215;
      // loc("zirgen/components/u32.cpp":234:30)
      auto x4217 = x4214 * x4216;
      // loc("zirgen/components/u32.cpp":234:13)
      auto x4218 = x4213 - x4217;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x4219 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x4219 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":235:37)
      auto x4220 = x4126 * x91;
      // loc("zirgen/components/u32.cpp":235:22)
      auto x4221 = x4125 + x4220;
      // loc("zirgen/components/u32.cpp":235:14)
      auto x4222 = x4219 * x4221;
      // loc("zirgen/components/u32.cpp":234:13)
      auto x4223 = x4218 - x4222;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4224 = Fp(x4223.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4224);
          reg = x4224;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4225 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4225 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4226 = x4223 - x4225;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4227 = x4226 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4228 = Fp(x4227.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4228);
          reg = x4228;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4229 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4229 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4230 = x4227 - x4229;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4231 = x4230 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4232 = Fp(x4231.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4232);
          reg = x4232;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4233 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4233 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4234 = x4231 - x4233;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4235 = x4234 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4235);
        reg = x4235;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/U32Mul/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4236 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x4236 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":219:19)
      auto x4237 = x4236 * x91;
      // loc("zirgen/components/u32.cpp":219:13)
      auto x4238 = x4233 + x4237;
      // loc("zirgen/components/u32.cpp":229:31)
      auto x4239 = x4019 * x4128;
      // loc("zirgen/components/u32.cpp":231:13)
      auto x4240 = x4238 + x4239;
      // loc("zirgen/components/u32.cpp":238:13)
      auto x4241 = x4240 + x31;
      // loc("zirgen/components/u32.cpp":238:53)
      auto x4242 = x4019 * x91;
      // loc("zirgen/components/u32.cpp":238:38)
      auto x4243 = x4018 + x4242;
      // loc("zirgen/components/u32.cpp":238:30)
      auto x4244 = x4214 * x4243;
      // loc("zirgen/components/u32.cpp":238:13)
      auto x4245 = x4241 - x4244;
      // loc("zirgen/components/u32.cpp":239:37)
      auto x4246 = x4128 * x91;
      // loc("zirgen/components/u32.cpp":239:22)
      auto x4247 = x4127 + x4246;
      // loc("zirgen/components/u32.cpp":239:14)
      auto x4248 = x4219 * x4247;
      // loc("zirgen/components/u32.cpp":238:13)
      auto x4249 = x4245 - x4248;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4250 = Fp(x4249.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4250);
          reg = x4250;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4251 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4251 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4252 = x4249 - x4251;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4253 = x4252 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4254 = Fp(x4253.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4254);
          reg = x4254;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4255 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x4255 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4256 = x4253 - x4255;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4257 = x4256 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4257);
        reg = x4257;
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4258 = x3952 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4259 = x3955 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4260 = x4258 + x4259;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4261 = x4260 + x3958;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x4262 = (x4261 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4262);
          reg = x4262;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x4263 = inv(x4261);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4263);
          reg = x4263;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4264 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x4264 != Fp::invalid());
      if (x4264 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x4261 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x4265 = x96 - x4264;
      if (x4265 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4266 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x4266 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4267 = x4261 * x4266;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4268 = x4267 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x4268 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/multiply.cpp":78:17)
      auto x4269 = x867 + x79;
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x4270 = x4269 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4271 = Fp(x4270.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4271);
          reg = x4271;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4272 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4272 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4273 = x4270 - x4272;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4274 = x4273 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4275 = Fp(x4274.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4275);
          reg = x4275;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4276 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4276 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4277 = x4274 - x4276;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4278 = x4277 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4279 = Fp(x4278.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4279);
          reg = x4279;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4280 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4280 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4281 = x4278 - x4280;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4282 = x4281 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x4283 = Fp(x4282.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4283);
          reg = x4283;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4284 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4284 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x4285 = x4282 - x4284;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x4286 = x4285 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4286);
        reg = x4286;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4287 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4287 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x4288 = x96 - x4287;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x4289 = x4287 * x4288;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4289);
        reg = x4289;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x4290 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4290 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x4291 = x93 - x4287;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x4292 = x4290 * x4291;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x4292 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("zirgen/circuit/rv32im/multiply.cpp":79:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x64);
        reg = x64;
      }
      // loc("zirgen/circuit/rv32im/multiply.cpp":80:38)
      auto x4293 = x4003 * x4265;
      if (x4293 != 0) {
        // loc("zirgen/circuit/rv32im/multiply.cpp":81:29)
        auto x4294 = x4261 + x48;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4225);
          reg = x4225;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4229);
          reg = x4229;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4251);
          reg = x4251;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4255);
          reg = x4255;
        }
        {
          host_args.at(0) = x4294;
          host_args.at(1) = x4225;
          host_args.at(2) = x4229;
          host_args.at(3) = x4251;
          host_args.at(4) = x4255;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4295 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4295 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4296 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4296 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4297 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4297 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4298 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4298 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4294);
          reg = x4294;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4295);
          reg = x4295;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4296);
          reg = x4296;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4297);
          reg = x4297;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4298);
          reg = x4298;
        }
      }
      // loc("zirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4299 = x96 - x4003;
      // loc("zirgen/circuit/rv32im/multiply.cpp":83:44)
      auto x4300 = x4299 * x4265;
      if (x4300 != 0) {
        // loc("zirgen/circuit/rv32im/multiply.cpp":84:29)
        auto x4301 = x4261 + x48;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4158);
          reg = x4158;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4162);
          reg = x4162;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4188);
          reg = x4188;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4192);
          reg = x4192;
        }
        {
          host_args.at(0) = x4301;
          host_args.at(1) = x4158;
          host_args.at(2) = x4162;
          host_args.at(3) = x4188;
          host_args.at(4) = x4192;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4302 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4302 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4303 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4303 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4304 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4304 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4305 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4305 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4301);
          reg = x4301;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4302);
          reg = x4302;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4303);
          reg = x4303;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4304);
          reg = x4304;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4305);
          reg = x4305;
        }
      }
      if (x4264 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":101:49))
      auto x4306 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4306 != Fp::invalid());
      if (x4306 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4307 = x3960 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4307 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x3949 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:101");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":101:49)
        auto x4308 = x3925 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":101:49)
        if (x4308 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:101");
      }
      if (x3999 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4309 = x3960 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4309 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4310 = x3949 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4310 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:102");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":102:49)
        auto x4311 = x3925 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":102:49)
        if (x4311 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:102");
      }
      if (x4000 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4312 = x3960 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4312 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4313 = x3949 - x93;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4313 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:103");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":103:49)
        auto x4314 = x3925 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":103:49)
        if (x4314 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:103");
      }
      if (x4002 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4315 = x3960 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4315 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4316 = x3949 - x78;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4316 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:104");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":104:49)
        auto x4317 = x3925 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":104:49)
        if (x4317 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:104");
      }
      if (x4004 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4318 = x3960 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4318 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":105:49)
        auto x4319 = x3949 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x4319 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:105");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":105:49)
        if (x3925 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:105");
      }
      if (x4005 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4320 = x3960 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4320 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":106:49)
        auto x4321 = x3949 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x4321 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:106");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":106:49)
        if (x3925 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:106");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[5](Reg)"("./zirgen/components/mux.h":49:25))
    auto x4322 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x4322 != Fp::invalid());
    if (x4322 != 0) {
      // loc("zirgen/circuit/rv32im/divide.cpp":20:41)
      auto x4323 = x867 * x77;
      {
        host_args.at(0) = x4323;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4324 = host_outs.at(0);
        auto x4325 = host_outs.at(1);
        auto x4326 = host_outs.at(2);
        auto x4327 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4324);
          reg = x4324;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4325);
          reg = x4325;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4326);
          reg = x4326;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4327);
          reg = x4327;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4328 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4328 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4329 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4329 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4330 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4330 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4331 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4331 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4323);
        reg = x4323;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4328);
        reg = x4328;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4329);
        reg = x4329;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4330);
        reg = x4330;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4331);
        reg = x4331;
      }
      {
        // loc("zirgen/circuit/rv32im/decode.cpp":11:16)
        auto x4332 = Fp(x4331.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":11:15)
        auto x4333 = x4332 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4333);
          reg = x4333;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":12:17)
        auto x4334 = Fp(x4331.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":12:16)
        auto x4335 = x4334 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4335);
          reg = x4335;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":13:16)
        auto x4336 = Fp(x4331.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":13:15)
        auto x4337 = x4336 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4337);
          reg = x4337;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":14:16)
        auto x4338 = Fp(x4331.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":14:15)
        auto x4339 = x4338 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4339);
          reg = x4339;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":15:17)
        auto x4340 = Fp(x4331.asUInt32() & x74.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":15:16)
        auto x4341 = x4340 * x56;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4341);
          reg = x4341;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":16:17)
        auto x4342 = Fp(x4331.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4342);
          reg = x4342;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":17:17)
        auto x4343 = Fp(x4330.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":17:16)
        auto x4344 = x4343 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4344);
          reg = x4344;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":18:18)
        auto x4345 = Fp(x4330.asUInt32() & x61.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":18:17)
        auto x4346 = x4345 * x59;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4346);
          reg = x4346;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":19:17)
        auto x4347 = Fp(x4330.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":19:16)
        auto x4348 = x4347 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4348);
          reg = x4348;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":20:18)
        auto x4349 = Fp(x4330.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":20:17)
        auto x4350 = x4349 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4350);
          reg = x4350;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":21:18)
        auto x4351 = Fp(x4330.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4351);
          reg = x4351;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":22:17)
        auto x4352 = Fp(x4329.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":22:16)
        auto x4353 = x4352 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4353);
          reg = x4353;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":23:19)
        auto x4354 = Fp(x4329.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":23:18)
        auto x4355 = x4354 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4355);
          reg = x4355;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":24:20)
        auto x4356 = Fp(x4329.asUInt32() & x53.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":24:19)
        auto x4357 = x4356 * x58;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4357);
          reg = x4357;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":25:17)
        auto x4358 = Fp(x4329.asUInt32() & x68.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":25:16)
        auto x4359 = x4358 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4359);
          reg = x4359;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":26:17)
        auto x4360 = Fp(x4329.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4360);
          reg = x4360;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":27:16)
        auto x4361 = Fp(x4328.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":27:15)
        auto x4362 = x4361 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4362);
          reg = x4362;
        }
        // loc("zirgen/circuit/rv32im/decode.cpp":28:18)
        auto x4363 = Fp(x4328.asUInt32() & x52.asUInt32());
        // loc("zirgen/circuit/rv32im/decode.cpp":28:5)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4363);
          reg = x4363;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4364 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x4364 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4365 = x4364 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4366 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x4366 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4367 = x4366 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4368 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x4368 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:25)
      auto x4369 = x4368 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4370 = x4367 + x4369;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4371 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x4371 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:39)
      auto x4372 = x4371 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4373 = x4370 + x4372;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4374 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x4374 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":57:10)
      auto x4375 = x4373 + x4374;
      // loc("zirgen/circuit/rv32im/decode.cpp":53:10)
      auto x4376 = x4365 + x4375;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4377 = x4376 * x93;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4378 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x4378 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":30:21)
      auto x4379 = x4377 + x4378;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      auto x4380 = x4331 - x4379;
      // loc("zirgen/circuit/rv32im/decode.cpp":30:6)
      if (x4380 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:30");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4381 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x4381 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4382 = x4381 * x72;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4383 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x4383 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:37)
      auto x4384 = x4383 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4385 = x4382 + x4384;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4386 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x4386 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:22)
      auto x4387 = x4385 + x4386;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4388 = x4387 * x64;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4389 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x4389 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:69)
      auto x4390 = x4389 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4391 = x4388 + x4390;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4392 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x4392 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":31:21)
      auto x4393 = x4391 + x4392;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      auto x4394 = x4330 - x4393;
      // loc("zirgen/circuit/rv32im/decode.cpp":31:6)
      if (x4394 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:31");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4395 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x4395 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4396 = x4395 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4397 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x4397 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4398 = x4397 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4399 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x4399 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":49:10)
      auto x4400 = x4398 + x4399;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:36)
      auto x4401 = x4400 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4402 = x4396 + x4401;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4403 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x4403 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:53)
      auto x4404 = x4403 * x79;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4405 = x4402 + x4404;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4406 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x4406 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":32:21)
      auto x4407 = x4405 + x4406;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      auto x4408 = x4329 - x4407;
      // loc("zirgen/circuit/rv32im/decode.cpp":32:6)
      if (x4408 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:32");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4409 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x4409 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4410 = x4409 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Decoder/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x4411 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x4411 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/decode.cpp":33:21)
      auto x4412 = x4410 + x4411;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      auto x4413 = x4328 - x4412;
      // loc("zirgen/circuit/rv32im/decode.cpp":33:6)
      if (x4413 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/decode.cpp:33");
      {
        host_args.at(0) = x4328;
        host_args.at(1) = x4329;
        host_args.at(2) = x4330;
        host_args.at(3) = x4331;
        host(ctx, "getMinor", "", host_args.data(), 4, host_outs.data(), 1);
        auto x4414 = host_outs.at(0);
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4415 = (x4414 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4415);
            reg = x4415;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4416 = x4414 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4417 = (x4416 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4417);
            reg = x4417;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4418 = x4414 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4419 = (x4418 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4419);
            reg = x4419;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4420 = x4414 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4421 = (x4420 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4421);
            reg = x4421;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4422 = x4414 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4423 = (x4422 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4423);
            reg = x4423;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4424 = x4414 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4425 = (x4424 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4425);
            reg = x4425;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4426 = x4414 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4427 = (x4426 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4427);
            reg = x4427;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4428 = x4414 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x4429 = (x4428 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4429);
            reg = x4429;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4430 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x4430 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4431 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x4431 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4432 = x4431 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4433 = x4430 + x4432;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4434 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x4434 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4435 = x4434 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4436 = x4433 + x4435;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4437 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x4437 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4438 = x4437 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4439 = x4436 + x4438;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4440 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x4440 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4441 = x4440 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4442 = x4439 + x4441;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4443 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x4443 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4444 = x4443 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4445 = x4442 + x4444;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4446 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x4446 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x4447 = x4446 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x4448 = x4445 + x4447;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x4449 = x4448 - x4414;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x4449 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[0](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":124:49))
      auto x4450 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x4450 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[2](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":126:49))
      auto x4451 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x4451 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":126:49)
      auto x4452 = x4450 + x4451;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[3](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":127:49))
      auto x4453 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x4453 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":127:49)
      auto x4454 = x4451 + x4453;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[4](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":128:49))
      auto x4455 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x4455 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[5](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":129:49))
      auto x4456 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x4456 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4457 = x4455 + x4456;
      // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
      auto x4458 = x4452 + x4456;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[6](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":130:49))
      auto x4459 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x4459 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":130:49)
      auto x4460 = x4457 + x4459;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[7](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":131:49))
      auto x4461 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x4461 != Fp::invalid());
      // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4462 = x4459 + x4461;
      // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4463 = x4460 + x4461;
      // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4464 = x4458 + x4461;
      // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
      auto x4465 = x4456 + x4461;
      // loc("zirgen/circuit/rv32im/divide.cpp":46:3)
      {
        auto& reg = args[2][199 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4464);
        reg = x4464;
      }
      // loc("zirgen/circuit/rv32im/divide.cpp":47:3)
      {
        auto& reg = args[2][200 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4465);
        reg = x4465;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("zirgen/circuit/rv32im/divide.cpp":51:8))
      auto x4466 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x4466 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("zirgen/circuit/rv32im/divide.cpp":52:8))
      auto x4467 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x4467 != Fp::invalid());
      host_args.at(0) = x4462;
      host_args.at(1) = x4463;
      host_args.at(2) = x4466;
      host_args.at(3) = x4467;
      host_args.at(4) = x4454;
      host(ctx, "log", "  useImm=%u, usePo2=%u, signed=%u, onesComp=%u, useRem=%u", host_args.data(), 5, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4468 = x4389 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:26)
      auto x4469 = x4392 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4470 = x4468 + x4469;
      // loc("zirgen/circuit/rv32im/decode.cpp":37:10)
      auto x4471 = x4470 + x4395;
      // loc("zirgen/circuit/rv32im/divide.cpp":56:39)
      auto x4472 = x4471 + x48;
      {
        host_args.at(0) = x4472;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4473 = host_outs.at(0);
        auto x4474 = host_outs.at(1);
        auto x4475 = host_outs.at(2);
        auto x4476 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4473);
          reg = x4473;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4474);
          reg = x4474;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4475);
          reg = x4475;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4476);
          reg = x4476;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4477 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4477 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4478 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4478 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4479 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4479 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4480 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4480 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4472);
        reg = x4472;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4477);
        reg = x4477;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4478);
        reg = x4478;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4479);
        reg = x4479;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4480);
        reg = x4480;
      }
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4481 = x4378 * x64;
      // loc("zirgen/circuit/rv32im/decode.cpp":41:10)
      auto x4482 = x4481 + x4387;
      // loc("zirgen/circuit/rv32im/divide.cpp":57:39)
      auto x4483 = x4482 + x48;
      {
        host_args.at(0) = x4483;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x4484 = host_outs.at(0);
        auto x4485 = host_outs.at(1);
        auto x4486 = host_outs.at(2);
        auto x4487 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4484);
          reg = x4484;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4485);
          reg = x4485;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4486);
          reg = x4486;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4487);
          reg = x4487;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4488 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4488 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4489 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4489 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4490 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4490 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4491 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4491 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][130 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4483);
        reg = x4483;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][131 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][132 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][133 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4488);
        reg = x4488;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][134 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4489);
        reg = x4489;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4490);
        reg = x4490;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4491);
        reg = x4491;
      }
      host_args.at(0) = x4471;
      host_args.at(1) = x4477;
      host_args.at(2) = x4478;
      host_args.at(3) = x4479;
      host_args.at(4) = x4480;
      host_args.at(5) = x4482;
      host_args.at(6) = x4488;
      host_args.at(7) = x4489;
      host_args.at(8) = x4490;
      host_args.at(9) = x4491;
      host(ctx, "log", "  rs1=x%u -> %w, rs2=x%u -> %w", host_args.data(), 10, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4492 = x4371 * x63;
      // loc("zirgen/circuit/rv32im/decode.cpp":70:21)
      auto x4493 = x4374 * x60;
      // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4494 = x4492 + x4493;
      // loc("zirgen/circuit/rv32im/decode.cpp":70:7)
      auto x4495 = x4494 + x4482;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4496 = x4462 * x4495;
      // loc("zirgen/circuit/rv32im/divide.cpp":63:35)
      auto x4497 = x96 - x4462;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4498 = x4497 * x4488;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4499 = x4496 + x4498;
      {
        // loc("zirgen/circuit/rv32im/divide.cpp":65:16)
        auto x4500 = Fp(x4499.asUInt32() & x34.asUInt32());
        // loc("zirgen/circuit/rv32im/divide.cpp":65:15)
        auto x4501 = x4500 * x54;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4501);
          reg = x4501;
        }
        // loc("zirgen/circuit/rv32im/divide.cpp":66:16)
        auto x4502 = Fp(x4499.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/divide.cpp":66:15)
        auto x4503 = x4502 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4503);
          reg = x4503;
        }
        // loc("zirgen/circuit/rv32im/divide.cpp":67:14)
        auto x4504 = Fp(x4499.asUInt32() & x33.asUInt32());
        {
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4505 = Fp(x4504.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4505);
            reg = x4505;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4506 = Fp(x4504.asUInt32() & x93.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4507 = x4506 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4507);
            reg = x4507;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4508 = Fp(x4504.asUInt32() & x79.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4509 = x4508 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4509);
            reg = x4509;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4510 = Fp(x4504.asUInt32() & x72.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4511 = x4510 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4511);
            reg = x4511;
          }
          // loc("zirgen/components/u32.cpp":187:21)
          auto x4512 = Fp(x4504.asUInt32() & x64.asUInt32());
          // loc("zirgen/components/u32.cpp":187:20)
          auto x4513 = x4512 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4513);
            reg = x4513;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4514 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x4514 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":189:21)
          auto x4515 = x4514 * x65;
          // loc("zirgen/components/u32.cpp":189:17)
          auto x4516 = x4515 + x96;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4517 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x4517 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":189:42)
          auto x4518 = x4517 * x78;
          // loc("zirgen/components/u32.cpp":189:38)
          auto x4519 = x4518 + x96;
          // loc("zirgen/components/u32.cpp":189:16)
          auto x4520 = x4516 * x4519;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4521 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x4521 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":189:58)
          auto x4522 = x4521 + x96;
          // loc("zirgen/components/u32.cpp":189:16)
          auto x4523 = x4520 * x4522;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4524 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x4524 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":190:15)
          auto x4525 = x4524 * x93;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x4526 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x4526 != Fp::invalid());
          // loc("zirgen/components/u32.cpp":190:15)
          auto x4527 = x4525 + x4526;
          // loc("zirgen/components/u32.cpp":192:13)
          auto x4528 = (x4527 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:9)
          auto x4529 = x4528 * x4523;
          // loc("zirgen/components/u32.cpp":192:34)
          auto x4530 = x4527 - x96;
          // loc("zirgen/components/u32.cpp":192:34)
          auto x4531 = (x4530 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:30)
          auto x4532 = x4531 * x4523;
          // loc("zirgen/components/u32.cpp":192:55)
          auto x4533 = x4527 - x93;
          // loc("zirgen/components/u32.cpp":192:55)
          auto x4534 = (x4533 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:51)
          auto x4535 = x4534 * x4523;
          // loc("zirgen/components/u32.cpp":192:76)
          auto x4536 = x4527 - x78;
          // loc("zirgen/components/u32.cpp":192:76)
          auto x4537 = (x4536 == 0) ? Fp(1) : Fp(0);
          // loc("zirgen/components/u32.cpp":192:72)
          auto x4538 = x4537 * x4523;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4529);
            reg = x4529;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4532);
            reg = x4532;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4535);
            reg = x4535;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x4538);
            reg = x4538;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4539 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x4539 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4540 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x4540 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4541 = x4540 * x93;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4542 = x4539 + x4541;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4543 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x4543 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4544 = x4543 * x79;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4545 = x4542 + x4544;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4546 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x4546 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4547 = x4546 * x72;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4548 = x4545 + x4547;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4549 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x4549 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":201:17)
        auto x4550 = x4549 * x64;
        // loc("zirgen/components/u32.cpp":201:11)
        auto x4551 = x4548 + x4550;
        // loc("zirgen/components/u32.cpp":195:6)
        auto x4552 = x4551 - x4504;
        // loc("zirgen/components/u32.cpp":195:6)
        if (x4552 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:195");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4553 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x4553 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4554 = x4553 * x55;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4555 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x4555 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/divide.cpp":69:37)
      auto x4556 = x4555 * x60;
      // loc("zirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4557 = x4554 + x4556;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4558 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x4558 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4559 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x4559 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4560 = x4559 * x93;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4561 = x4558 + x4560;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4562 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x4562 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4563 = x4562 * x79;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4564 = x4561 + x4563;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4565 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x4565 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4566 = x4565 * x72;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4567 = x4564 + x4566;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4568 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x4568 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":201:17)
      auto x4569 = x4568 * x64;
      // loc("zirgen/components/u32.cpp":201:11)
      auto x4570 = x4567 + x4569;
      // loc("zirgen/circuit/rv32im/divide.cpp":69:23)
      auto x4571 = x4557 + x4570;
      // loc("zirgen/circuit/rv32im/divide.cpp":69:6)
      auto x4572 = x4499 - x4571;
      // loc("zirgen/circuit/rv32im/divide.cpp":69:6)
      if (x4572 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/divide.cpp:69");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4573 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x4573 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4574 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x4574 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4575 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x4575 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/U32Po2/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4576 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x4576 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4577 = x4463 * x4573;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4578 = x4463 * x4574;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4579 = x4463 * x4575;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4580 = x4463 * x4576;
      // loc("zirgen/circuit/rv32im/divide.cpp":72:42)
      auto x4581 = x96 - x4463;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4582 = x4581 * x4488;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4583 = x4581 * x4489;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4584 = x4581 * x4490;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x4585 = x4581 * x4491;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4586 = x4577 + x4582;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4587 = x4578 + x4583;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4588 = x4579 + x4584;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x4589 = x4580 + x4585;
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4586);
        reg = x4586;
      }
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4587);
        reg = x4587;
      }
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4588);
        reg = x4588;
      }
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4589);
        reg = x4589;
      }
      {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4590 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x4590 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4591 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x4591 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4592 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x4592 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x4593 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x4593 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/divide.cpp":83:16)
        auto x4594 = x4466 + x4467;
        host_args.at(0) = x4477;
        host_args.at(1) = x4478;
        host_args.at(2) = x4479;
        host_args.at(3) = x4480;
        host_args.at(4) = x4590;
        host_args.at(5) = x4591;
        host_args.at(6) = x4592;
        host_args.at(7) = x4593;
        host_args.at(8) = x4594;
        host(ctx, "divide", "", host_args.data(), 9, host_outs.data(), 8);
        auto x4595 = host_outs.at(0);
        auto x4596 = host_outs.at(1);
        auto x4597 = host_outs.at(2);
        auto x4598 = host_outs.at(3);
        auto x4599 = host_outs.at(4);
        auto x4600 = host_outs.at(5);
        auto x4601 = host_outs.at(6);
        auto x4602 = host_outs.at(7);
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4595);
          reg = x4595;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4599);
          reg = x4599;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4596);
          reg = x4596;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4600);
          reg = x4600;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4597);
          reg = x4597;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4601);
          reg = x4601;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4598);
          reg = x4598;
        }
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4602);
          reg = x4602;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4603 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x4603 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4604 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x4604 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4605 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x4605 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4606 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x4606 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4607 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x4607 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4608 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x4608 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4609 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x4609 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4610 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x4610 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4611 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x4611 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4612 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x4612 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4613 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x4613 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x4614 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x4614 != Fp::invalid());
      host_args.at(0) = x4477;
      host_args.at(1) = x4478;
      host_args.at(2) = x4479;
      host_args.at(3) = x4480;
      host_args.at(4) = x4603;
      host_args.at(5) = x4604;
      host_args.at(6) = x4605;
      host_args.at(7) = x4606;
      host_args.at(8) = x4607;
      host_args.at(9) = x4608;
      host_args.at(10) = x4609;
      host_args.at(11) = x4610;
      host_args.at(12) = x4611;
      host_args.at(13) = x4612;
      host_args.at(14) = x4613;
      host_args.at(15) = x4614;
      host(ctx, "log", "  numer=%w, denom=%w, quot=%w, rem=%w", host_args.data(), 16, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4615 = x4403 * x72;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:25)
      auto x4616 = x4406 * x93;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4617 = x4615 + x4616;
      // loc("zirgen/circuit/rv32im/decode.cpp":45:10)
      auto x4618 = x4617 + x4409;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x4619 = (x4618 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4619);
          reg = x4619;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x4620 = inv(x4618);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4620);
          reg = x4620;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4621 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x4621 != Fp::invalid());
      if (x4621 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x4618 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x4622 = x96 - x4621;
      if (x4622 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x4623 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x4623 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4624 = x4618 * x4623;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x4625 = x4624 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x4625 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/divide.cpp":94:37)
      auto x4626 = x4454 * x4622;
      if (x4626 != 0) {
        // loc("zirgen/circuit/rv32im/divide.cpp":96:16)
        auto x4627 = x4618 + x48;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4611);
          reg = x4611;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4612);
          reg = x4612;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4613);
          reg = x4613;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4614);
          reg = x4614;
        }
        {
          host_args.at(0) = x4627;
          host_args.at(1) = x4611;
          host_args.at(2) = x4612;
          host_args.at(3) = x4613;
          host_args.at(4) = x4614;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4628 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4628 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4629 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4629 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4630 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4630 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4631 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4631 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4627);
          reg = x4627;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4628);
          reg = x4628;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4629);
          reg = x4629;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4630);
          reg = x4630;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4631);
          reg = x4631;
        }
      }
      // loc("zirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4632 = x96 - x4454;
      // loc("zirgen/circuit/rv32im/divide.cpp":98:43)
      auto x4633 = x4632 * x4622;
      if (x4633 != 0) {
        // loc("zirgen/circuit/rv32im/divide.cpp":100:16)
        auto x4634 = x4618 + x48;
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4607);
          reg = x4607;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4608);
          reg = x4608;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4609);
          reg = x4609;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4610);
          reg = x4610;
        }
        {
          host_args.at(0) = x4634;
          host_args.at(1) = x4607;
          host_args.at(2) = x4608;
          host_args.at(3) = x4609;
          host_args.at(4) = x4610;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4635 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x4635 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4636 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x4636 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4637 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x4637 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x4638 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x4638 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4634);
          reg = x4634;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4635);
          reg = x4635;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4636);
          reg = x4636;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4637);
          reg = x4637;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4638);
          reg = x4638;
        }
      }
      if (x4621 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/divide.cpp":105:17)
      auto x4639 = x867 + x79;
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x4640 = x4639 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4641 = Fp(x4640.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4641);
          reg = x4641;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4642 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x4642 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4643 = x4640 - x4642;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4644 = x4643 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4645 = Fp(x4644.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4645);
          reg = x4645;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4646 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x4646 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4647 = x4644 - x4646;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4648 = x4647 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x4649 = Fp(x4648.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4649);
          reg = x4649;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x4650 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x4650 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x4651 = x4648 - x4650;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x4652 = x4651 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x4653 = Fp(x4652.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4653);
          reg = x4653;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4654 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x4654 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x4655 = x4652 - x4654;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x4656 = x4655 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4656);
        reg = x4656;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4657 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x4657 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x4658 = x96 - x4657;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x4659 = x4657 * x4658;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x4659);
        reg = x4659;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x4660 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x4660 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x4661 = x93 - x4657;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x4662 = x4660 * x4661;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x4662 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("zirgen/circuit/rv32im/divide.cpp":106:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x73);
        reg = x73;
      }
      if (x4450 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4663 = x4411 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4663 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4664 = x4400 - x79;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4664 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:124");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":124:49)
        auto x4665 = x4376 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":124:49)
        if (x4665 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:124");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/OneHot/hot[1](Reg)"("./zirgen/circuit/rv32im/rv32im.inl":125:49))
      auto x4666 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x4666 != Fp::invalid());
      if (x4666 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4667 = x4411 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4667 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4668 = x4400 - x75;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4668 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:125");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":125:49)
        auto x4669 = x4376 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":125:49)
        if (x4669 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:125");
      }
      if (x4451 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4670 = x4411 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4670 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4671 = x4400 - x74;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4671 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:126");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":126:49)
        auto x4672 = x4376 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":126:49)
        if (x4672 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:126");
      }
      if (x4453 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4673 = x4411 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4673 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4674 = x4400 - x73;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4674 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:127");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":127:49)
        auto x4675 = x4376 - x96;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":127:49)
        if (x4675 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:127");
      }
      if (x4455 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4676 = x4411 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4676 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":128:49)
        auto x4677 = x4400 - x75;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4677 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:128");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":128:49)
        if (x4376 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:128");
      }
      if (x4456 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4678 = x4411 - x45;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4678 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4679 = x4400 - x75;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4679 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:129");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
        auto x4680 = x4376 - x60;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":129:49)
        if (x4680 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:129");
      }
      if (x4459 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4681 = x4411 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4681 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":130:49)
        auto x4682 = x4400 - x75;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4682 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:130");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":130:49)
        if (x4376 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:130");
      }
      if (x4461 != 0) {
        // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4683 = x4411 - x44;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4683 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4684 = x4400 - x75;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4684 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:131");
        // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
        auto x4685 = x4376 - x60;
        // loc("./zirgen/circuit/rv32im/rv32im.inl":131:49)
        if (x4685 != 0) throw std::runtime_error("eqz failed at: ./zirgen/circuit/rv32im/rv32im.inl:131");
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[6](Reg)"("./zirgen/components/mux.h":49:25))
    auto x4686 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x4686 != Fp::invalid());
    if (x4686 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4687 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x4687 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4688 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x4688 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4689 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x4689 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4690 = args[2][129 * steps + ((cycle - 1) & mask)];
      assert(x4690 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4691 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x4691 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4692 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x4692 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4693 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x4693 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4694 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x4694 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4695 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x4695 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4696 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x4696 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4697 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x4697 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/ALU/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4698 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x4698 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4699 = Fp(x4687.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4699);
          reg = x4699;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4700 = Fp(x4691.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4700);
          reg = x4700;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4701 = Fp(x4687.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4702 = x4701 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4702);
          reg = x4702;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4703 = Fp(x4691.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4704 = x4703 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4704);
          reg = x4704;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4705 = Fp(x4687.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4706 = x4705 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4706);
          reg = x4706;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4707 = Fp(x4691.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4708 = x4707 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4708);
          reg = x4708;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4709 = Fp(x4687.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4710 = x4709 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4710);
          reg = x4710;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4711 = Fp(x4691.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4712 = x4711 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4712);
          reg = x4712;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4713 = Fp(x4687.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4714 = x4713 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4714);
          reg = x4714;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4715 = Fp(x4691.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4716 = x4715 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4716);
          reg = x4716;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4717 = Fp(x4687.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4718 = x4717 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4718);
          reg = x4718;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4719 = Fp(x4691.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4720 = x4719 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][153 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4720);
          reg = x4720;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4721 = Fp(x4687.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4722 = x4721 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4722);
          reg = x4722;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4723 = Fp(x4691.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4724 = x4723 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][154 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4724);
          reg = x4724;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4725 = Fp(x4687.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4726 = x4725 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4726);
          reg = x4726;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4727 = Fp(x4691.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4728 = x4727 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][155 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4728);
          reg = x4728;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4729 = Fp(x4688.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4729);
          reg = x4729;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4730 = Fp(x4692.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][156 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4730);
          reg = x4730;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4731 = Fp(x4688.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4732 = x4731 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4732);
          reg = x4732;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4733 = Fp(x4692.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4734 = x4733 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][157 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4734);
          reg = x4734;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4735 = Fp(x4688.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4736 = x4735 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4736);
          reg = x4736;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4737 = Fp(x4692.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4738 = x4737 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][158 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4738);
          reg = x4738;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4739 = Fp(x4688.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4740 = x4739 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4740);
          reg = x4740;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4741 = Fp(x4692.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4742 = x4741 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4742);
          reg = x4742;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4743 = Fp(x4688.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4744 = x4743 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4744);
          reg = x4744;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4745 = Fp(x4692.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4746 = x4745 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4746);
          reg = x4746;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4747 = Fp(x4688.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4748 = x4747 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4748);
          reg = x4748;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4749 = Fp(x4692.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4750 = x4749 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4750);
          reg = x4750;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4751 = Fp(x4688.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4752 = x4751 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4752);
          reg = x4752;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4753 = Fp(x4692.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4754 = x4753 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4754);
          reg = x4754;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4755 = Fp(x4688.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4756 = x4755 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4756);
          reg = x4756;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4757 = Fp(x4692.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4758 = x4757 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4758);
          reg = x4758;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4759 = Fp(x4689.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4759);
          reg = x4759;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4760 = Fp(x4693.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4760);
          reg = x4760;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4761 = Fp(x4689.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4762 = x4761 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4762);
          reg = x4762;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4763 = Fp(x4693.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4764 = x4763 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4764);
          reg = x4764;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4765 = Fp(x4689.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4766 = x4765 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4766);
          reg = x4766;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4767 = Fp(x4693.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4768 = x4767 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4768);
          reg = x4768;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4769 = Fp(x4689.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4770 = x4769 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4770);
          reg = x4770;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4771 = Fp(x4693.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4772 = x4771 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4772);
          reg = x4772;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4773 = Fp(x4689.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4774 = x4773 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4774);
          reg = x4774;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4775 = Fp(x4693.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4776 = x4775 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4776);
          reg = x4776;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4777 = Fp(x4689.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4778 = x4777 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4778);
          reg = x4778;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4779 = Fp(x4693.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4780 = x4779 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4780);
          reg = x4780;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4781 = Fp(x4689.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4782 = x4781 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4782);
          reg = x4782;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4783 = Fp(x4693.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4784 = x4783 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4784);
          reg = x4784;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4785 = Fp(x4689.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4786 = x4785 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4786);
          reg = x4786;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4787 = Fp(x4693.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4788 = x4787 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4788);
          reg = x4788;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4789 = Fp(x4690.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4789);
          reg = x4789;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4790 = Fp(x4694.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4790);
          reg = x4790;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4791 = Fp(x4690.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4792 = x4791 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4792);
          reg = x4792;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4793 = Fp(x4694.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4794 = x4793 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4794);
          reg = x4794;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4795 = Fp(x4690.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4796 = x4795 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4796);
          reg = x4796;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4797 = Fp(x4694.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4798 = x4797 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4798);
          reg = x4798;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4799 = Fp(x4690.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4800 = x4799 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4800);
          reg = x4800;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4801 = Fp(x4694.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4802 = x4801 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4802);
          reg = x4802;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4803 = Fp(x4690.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4804 = x4803 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4804);
          reg = x4804;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4805 = Fp(x4694.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4806 = x4805 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4806);
          reg = x4806;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4807 = Fp(x4690.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4808 = x4807 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4808);
          reg = x4808;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4809 = Fp(x4694.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4810 = x4809 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4810);
          reg = x4810;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4811 = Fp(x4690.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4812 = x4811 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4812);
          reg = x4812;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4813 = Fp(x4694.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4814 = x4813 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4814);
          reg = x4814;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":211:37)
        auto x4815 = Fp(x4690.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":211:36)
        auto x4816 = x4815 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4816);
          reg = x4816;
        }
        // loc("zirgen/circuit/rv32im/compute.cpp":212:37)
        auto x4817 = Fp(x4694.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/compute.cpp":212:36)
        auto x4818 = x4817 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x4818);
          reg = x4818;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4819 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x4819 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4820 = args[2][148 * steps + ((cycle - 0) & mask)];
      assert(x4820 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4821 = x4819 * x4820;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4822 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x4822 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4823 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x4823 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4824 = x4822 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4825 = x4819 + x4824;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4826 = x4823 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4827 = x4820 + x4826;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4828 = x4822 * x4823;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4829 = x4828 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4830 = x4821 + x4829;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4831 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x4831 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4832 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x4832 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4833 = x4831 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4834 = x4825 + x4833;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4835 = x4832 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4836 = x4827 + x4835;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4837 = x4831 * x4832;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4838 = x4837 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4839 = x4830 + x4838;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4840 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x4840 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4841 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x4841 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4842 = x4840 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4843 = x4834 + x4842;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4844 = x4841 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4845 = x4836 + x4844;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4846 = x4840 * x4841;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4847 = x4846 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4848 = x4839 + x4847;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4849 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x4849 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4850 = args[2][152 * steps + ((cycle - 0) & mask)];
      assert(x4850 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4851 = x4849 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4852 = x4843 + x4851;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4853 = x4850 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4854 = x4845 + x4853;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4855 = x4849 * x4850;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4856 = x4855 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4857 = x4848 + x4856;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4858 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x4858 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4859 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x4859 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4860 = x4858 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4861 = x4852 + x4860;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4862 = x4859 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4863 = x4854 + x4862;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4864 = x4858 * x4859;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4865 = x4864 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4866 = x4857 + x4865;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4867 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x4867 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4868 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x4868 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4869 = x4867 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4870 = x4861 + x4869;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4871 = x4868 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4872 = x4863 + x4871;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4873 = x4867 * x4868;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4874 = x4873 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4875 = x4866 + x4874;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4876 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x4876 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4877 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x4877 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4878 = x4876 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4879 = x4870 + x4878;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4880 = x4877 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4881 = x4872 + x4880;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4882 = x4876 * x4877;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4883 = x4882 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4884 = x4875 + x4883;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4885 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x4885 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4886 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x4886 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4887 = x4885 * x4886;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4888 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x4888 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4889 = args[2][157 * steps + ((cycle - 0) & mask)];
      assert(x4889 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4890 = x4888 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4891 = x4885 + x4890;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4892 = x4889 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4893 = x4886 + x4892;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4894 = x4888 * x4889;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4895 = x4894 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4896 = x4887 + x4895;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4897 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x4897 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4898 = args[2][158 * steps + ((cycle - 0) & mask)];
      assert(x4898 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4899 = x4897 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4900 = x4891 + x4899;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4901 = x4898 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4902 = x4893 + x4901;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4903 = x4897 * x4898;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4904 = x4903 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4905 = x4896 + x4904;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4906 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x4906 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4907 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x4907 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4908 = x4906 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4909 = x4900 + x4908;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4910 = x4907 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4911 = x4902 + x4910;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4912 = x4906 * x4907;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4913 = x4912 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4914 = x4905 + x4913;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4915 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x4915 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4916 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x4916 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4917 = x4915 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4918 = x4909 + x4917;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4919 = x4916 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4920 = x4911 + x4919;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4921 = x4915 * x4916;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4922 = x4921 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4923 = x4914 + x4922;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4924 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x4924 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4925 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x4925 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4926 = x4924 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4927 = x4918 + x4926;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4928 = x4925 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4929 = x4920 + x4928;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4930 = x4924 * x4925;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4931 = x4930 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4932 = x4923 + x4931;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4933 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x4933 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4934 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x4934 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4935 = x4933 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4936 = x4927 + x4935;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4937 = x4934 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4938 = x4929 + x4937;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4939 = x4933 * x4934;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4940 = x4939 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4941 = x4932 + x4940;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4942 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x4942 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4943 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x4943 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4944 = x4942 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4945 = x4936 + x4944;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4946 = x4943 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4947 = x4938 + x4946;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4948 = x4942 * x4943;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4949 = x4948 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4950 = x4941 + x4949;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4951 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x4951 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4952 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x4952 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4953 = x4951 * x4952;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4954 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x4954 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4955 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x4955 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4956 = x4954 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4957 = x4951 + x4956;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4958 = x4955 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4959 = x4952 + x4958;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4960 = x4954 * x4955;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4961 = x4960 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4962 = x4953 + x4961;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4963 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x4963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4964 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x4964 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4965 = x4963 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4966 = x4957 + x4965;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4967 = x4964 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4968 = x4959 + x4967;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4969 = x4963 * x4964;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4970 = x4969 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4971 = x4962 + x4970;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4972 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x4972 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4973 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x4973 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4974 = x4972 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4975 = x4966 + x4974;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4976 = x4973 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4977 = x4968 + x4976;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4978 = x4972 * x4973;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4979 = x4978 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4980 = x4971 + x4979;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4981 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x4981 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4982 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x4982 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4983 = x4981 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4984 = x4975 + x4983;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4985 = x4982 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4986 = x4977 + x4985;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4987 = x4981 * x4982;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4988 = x4987 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4989 = x4980 + x4988;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4990 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x4990 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4991 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x4991 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x4992 = x4990 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x4993 = x4984 + x4992;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x4994 = x4991 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x4995 = x4986 + x4994;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4996 = x4990 * x4991;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x4997 = x4996 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x4998 = x4989 + x4997;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x4999 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x4999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5000 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x5000 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5001 = x4999 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5002 = x4993 + x5001;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5003 = x5000 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5004 = x4995 + x5003;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5005 = x4999 * x5000;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5006 = x5005 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5007 = x4998 + x5006;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5008 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x5008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5009 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x5009 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5010 = x5008 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5011 = x5002 + x5010;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5012 = x5009 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5013 = x5004 + x5012;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5014 = x5008 * x5009;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5015 = x5014 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5016 = x5007 + x5015;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5017 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x5017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5018 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x5018 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5019 = x5017 * x5018;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5020 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x5020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5021 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x5021 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5022 = x5020 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5023 = x5017 + x5022;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5024 = x5021 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5025 = x5018 + x5024;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5026 = x5020 * x5021;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5027 = x5026 * x93;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5028 = x5019 + x5027;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5029 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x5029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5030 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x5030 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5031 = x5029 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5032 = x5023 + x5031;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5033 = x5030 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5034 = x5025 + x5033;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5035 = x5029 * x5030;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5036 = x5035 * x79;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5037 = x5028 + x5036;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5038 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x5038 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5039 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x5039 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5040 = x5038 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5041 = x5032 + x5040;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5042 = x5039 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5043 = x5034 + x5042;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5044 = x5038 * x5039;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5045 = x5044 * x72;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5046 = x5037 + x5045;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5047 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x5047 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5048 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x5048 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5049 = x5047 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5050 = x5041 + x5049;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5051 = x5048 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5052 = x5043 + x5051;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5053 = x5047 * x5048;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5054 = x5053 * x64;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5055 = x5046 + x5054;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5056 = args[2][145 * steps + ((cycle - 0) & mask)];
      assert(x5056 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5057 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x5057 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5058 = x5056 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5059 = x5050 + x5058;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5060 = x5057 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5061 = x5052 + x5060;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5062 = x5056 * x5057;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5063 = x5062 * x60;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5064 = x5055 + x5063;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5065 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x5065 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5066 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x5066 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5067 = x5065 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5068 = x5059 + x5067;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5069 = x5066 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5070 = x5061 + x5069;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5071 = x5065 * x5066;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5072 = x5071 * x55;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5073 = x5064 + x5072;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5074 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x5074 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/6(VerifyAndCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5075 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x5075 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/compute.cpp":223:41)
      auto x5076 = x5074 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":223:24)
      auto x5077 = x5068 + x5076;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:41)
      auto x5078 = x5075 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":224:24)
      auto x5079 = x5070 + x5078;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5080 = x5074 * x5075;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:41)
      auto x5081 = x5080 * x63;
      // loc("zirgen/circuit/rv32im/compute.cpp":225:24)
      auto x5082 = x5073 + x5081;
      host_args.at(0) = x4687;
      host_args.at(1) = x4688;
      host_args.at(2) = x4689;
      host_args.at(3) = x4690;
      host_args.at(4) = x4879;
      host_args.at(5) = x4945;
      host_args.at(6) = x5011;
      host_args.at(7) = x5077;
      host(ctx, "log", "  a = %w, ax = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4691;
      host_args.at(1) = x4692;
      host_args.at(2) = x4693;
      host_args.at(3) = x4694;
      host_args.at(4) = x4881;
      host_args.at(5) = x4947;
      host_args.at(6) = x5013;
      host_args.at(7) = x5079;
      host(ctx, "log", "  b = %w, bx = %w", host_args.data(), 8, host_outs.data(), 0);
      host_args.at(0) = x4695;
      host_args.at(1) = x4696;
      host_args.at(2) = x4697;
      host_args.at(3) = x4698;
      host_args.at(4) = x4884;
      host_args.at(5) = x4950;
      host_args.at(6) = x5016;
      host_args.at(7) = x5082;
      host(ctx, "log", "  c = %w, cx = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      auto x5083 = x4687 - x4879;
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      if (x5083 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      auto x5084 = x4688 - x4945;
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      if (x5084 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      auto x5085 = x4689 - x5011;
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      if (x5085 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      auto x5086 = x4690 - x5077;
      // loc("zirgen/circuit/rv32im/compute.cpp":231:3)
      if (x5086 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:231");
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      auto x5087 = x4691 - x4881;
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      if (x5087 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      auto x5088 = x4692 - x4947;
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      if (x5088 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      auto x5089 = x4693 - x5013;
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      if (x5089 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      auto x5090 = x4694 - x5079;
      // loc("zirgen/circuit/rv32im/compute.cpp":232:3)
      if (x5090 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:232");
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      auto x5091 = x4695 - x4884;
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      if (x5091 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      auto x5092 = x4696 - x4950;
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      if (x5092 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      auto x5093 = x4697 - x5016;
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      if (x5093 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      auto x5094 = x4698 - x5082;
      // loc("zirgen/circuit/rv32im/compute.cpp":233:3)
      if (x5094 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/compute.cpp:233");
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x5095 = x867 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5096 = Fp(x5095.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5096);
          reg = x5096;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5097 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5097 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5098 = x5095 - x5097;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5099 = x5098 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5100 = Fp(x5099.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5100);
          reg = x5100;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5101 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5101 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5102 = x5099 - x5101;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5103 = x5102 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5104 = Fp(x5103.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5104);
          reg = x5104;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5105 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5105 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5106 = x5103 - x5105;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5107 = x5106 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x5108 = Fp(x5107.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5108);
          reg = x5108;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5109 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5109 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x5110 = x5107 - x5109;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x5111 = x5110 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5111);
        reg = x5111;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5112 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5112 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x5113 = x96 - x5112;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x5114 = x5112 * x5113;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5114);
        reg = x5114;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5115 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5115 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x5116 = x93 - x5112;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x5117 = x5115 * x5116;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x5117 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("zirgen/circuit/rv32im/compute.cpp":236:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x64);
        reg = x64;
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[7](Reg)"("./zirgen/components/mux.h":49:25))
    auto x5118 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x5118 != Fp::invalid());
    if (x5118 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5119 = args[2][126 * steps + ((cycle - 1) & mask)];
      assert(x5119 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5120 = args[2][127 * steps + ((cycle - 1) & mask)];
      assert(x5120 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5121 = args[2][128 * steps + ((cycle - 1) & mask)];
      assert(x5121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5122 = args[2][129 * steps + ((cycle - 1) & mask)];
      assert(x5122 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5123 = args[2][18 * steps + ((cycle - 1) & mask)];
      assert(x5123 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5124 = args[2][19 * steps + ((cycle - 1) & mask)];
      assert(x5124 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5125 = args[2][20 * steps + ((cycle - 1) & mask)];
      assert(x5125 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5126 = args[2][21 * steps + ((cycle - 1) & mask)];
      assert(x5126 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5127 = args[2][22 * steps + ((cycle - 1) & mask)];
      assert(x5127 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5128 = args[2][23 * steps + ((cycle - 1) & mask)];
      assert(x5128 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5129 = args[2][24 * steps + ((cycle - 1) & mask)];
      assert(x5129 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5130 = args[2][25 * steps + ((cycle - 1) & mask)];
      assert(x5130 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5131 = args[2][26 * steps + ((cycle - 1) & mask)];
      assert(x5131 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5132 = args[2][27 * steps + ((cycle - 1) & mask)];
      assert(x5132 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5133 = args[2][28 * steps + ((cycle - 1) & mask)];
      assert(x5133 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5134 = args[2][29 * steps + ((cycle - 1) & mask)];
      assert(x5134 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("zirgen/circuit/rv32im/divide.cpp":135:51))
      auto x5135 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x5135 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/Reg"("zirgen/circuit/rv32im/divide.cpp":136:51))
      auto x5136 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x5136 != Fp::invalid());
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x5137 = Fp(x5122.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x5138 = x5137 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5138);
          reg = x5138;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x5139 = Fp(x5122.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x5140 = x5139 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5140);
          reg = x5140;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5141 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x5141 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x5142 = x5141 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5143 = args[2][9 * steps + ((cycle - 0) & mask)];
      assert(x5143 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x5144 = x5143 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x5145 = x5142 + x5144;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x5146 = x5122 - x5145;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x5146 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      {
        // loc("zirgen/components/u32.cpp":120:18)
        auto x5147 = Fp(x5126.asUInt32() & x63.asUInt32());
        // loc("zirgen/components/u32.cpp":120:17)
        auto x5148 = x5147 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5148);
          reg = x5148;
        }
        // loc("zirgen/components/u32.cpp":121:25)
        auto x5149 = Fp(x5126.asUInt32() & x52.asUInt32());
        // loc("zirgen/components/u32.cpp":121:24)
        auto x5150 = x5149 * x93;
        // loc("zirgen/components/bytes.cpp":101:3)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5150);
          reg = x5150;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/TopBit/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5151 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x5151 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:19)
      auto x5152 = x5151 * x63;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5153 = args[2][10 * steps + ((cycle - 0) & mask)];
      assert(x5153 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":123:34)
      auto x5154 = x5153 * x56;
      // loc("zirgen/components/u32.cpp":123:19)
      auto x5155 = x5152 + x5154;
      // loc("zirgen/components/u32.cpp":123:6)
      auto x5156 = x5126 - x5155;
      // loc("zirgen/components/u32.cpp":123:6)
      if (x5156 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:123");
      // loc("zirgen/circuit/rv32im/divide.cpp":139:17)
      auto x5157 = x5135 * x5141;
      // loc("zirgen/circuit/rv32im/divide.cpp":139:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5157);
        reg = x5157;
      }
      // loc("zirgen/circuit/rv32im/divide.cpp":140:29)
      auto x5158 = x96 - x5136;
      // loc("zirgen/circuit/rv32im/divide.cpp":140:17)
      auto x5159 = x5135 * x5158;
      // loc("zirgen/circuit/rv32im/divide.cpp":140:17)
      auto x5160 = x5159 * x5151;
      // loc("zirgen/circuit/rv32im/divide.cpp":140:3)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5160);
        reg = x5160;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5161 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x5161 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/divide.cpp":142:47)
      auto x5162 = x96 - x5161;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5163 = x5162 * x5119;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5164 = x5162 * x5120;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5165 = x5162 * x5121;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5166 = x5162 * x5122;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5167 = x5163 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5168 = x5164 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5169 = x5165 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5170 = x5166 + x92;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5171 = x5161 * x5119;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5172 = x5161 * x5120;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5173 = x5161 * x5121;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5174 = x5161 * x5122;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5175 = x5167 - x5171;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5176 = x5168 - x5172;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5177 = x5169 - x5173;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5178 = x5170 - x5174;
      // loc("zirgen/circuit/rv32im/divide.cpp":143:17)
      auto x5179 = x5161 * x5136;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5180 = x5175 - x5179;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x5181 = x5176 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x5182 = x5180 + x5181;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5183 = Fp(x5182.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5183);
          reg = x5183;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5184 = args[2][11 * steps + ((cycle - 0) & mask)];
      assert(x5184 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5185 = x5182 - x5184;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5186 = x5185 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5187 = Fp(x5186.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5187);
          reg = x5187;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5188 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x5188 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5189 = x5186 - x5188;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5190 = x5189 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5190);
        reg = x5190;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5191 = args[2][72 * steps + ((cycle - 0) & mask)];
      assert(x5191 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5192 = x5191 + x5177;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x5193 = x5178 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5194 = x5192 + x5193;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5195 = Fp(x5194.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5195);
          reg = x5195;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5196 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x5196 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5197 = x5194 - x5196;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5198 = x5197 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5199 = Fp(x5198.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5199);
          reg = x5199;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5200 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x5200 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5201 = x5198 - x5200;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5202 = x5201 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5202);
        reg = x5202;
      }
      host_args.at(0) = x5119;
      host_args.at(1) = x5120;
      host_args.at(2) = x5121;
      host_args.at(3) = x5122;
      host_args.at(4) = x5184;
      host_args.at(5) = x5188;
      host_args.at(6) = x5196;
      host_args.at(7) = x5200;
      host(ctx, "log", "  numer = %w, numerAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5203 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5203 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/divide.cpp":145:47)
      auto x5204 = x96 - x5203;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5205 = x5204 * x5123;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5206 = x5204 * x5124;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5207 = x5204 * x5125;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5208 = x5204 * x5126;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5209 = x5205 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5210 = x5206 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5211 = x5207 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5212 = x5208 + x92;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5213 = x5203 * x5123;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5214 = x5203 * x5124;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5215 = x5203 * x5125;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5216 = x5203 * x5126;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5217 = x5209 - x5213;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5218 = x5210 - x5214;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5219 = x5211 - x5215;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5220 = x5212 - x5216;
      // loc("zirgen/circuit/rv32im/divide.cpp":146:17)
      auto x5221 = x5203 * x5136;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5222 = x5217 - x5221;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x5223 = x5218 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x5224 = x5222 + x5223;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5225 = Fp(x5224.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5225);
          reg = x5225;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5226 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x5226 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5227 = x5224 - x5226;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5228 = x5227 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5229 = Fp(x5228.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5229);
          reg = x5229;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5230 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x5230 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5231 = x5228 - x5230;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5232 = x5231 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5232);
        reg = x5232;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5233 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x5233 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5234 = x5233 + x5219;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x5235 = x5220 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5236 = x5234 + x5235;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5237 = Fp(x5236.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5237);
          reg = x5237;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5238 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x5238 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5239 = x5236 - x5238;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5240 = x5239 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5241 = Fp(x5240.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5241);
          reg = x5241;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5242 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x5242 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5243 = x5240 - x5242;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5244 = x5243 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5244);
        reg = x5244;
      }
      host_args.at(0) = x5123;
      host_args.at(1) = x5124;
      host_args.at(2) = x5125;
      host_args.at(3) = x5126;
      host_args.at(4) = x5226;
      host_args.at(5) = x5230;
      host_args.at(6) = x5238;
      host_args.at(7) = x5242;
      host(ctx, "log", "  demom = %w, denomAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("zirgen/components/u32.cpp":137:26)
      auto x5245 = x5230 * x91;
      // loc("zirgen/components/u32.cpp":137:12)
      auto x5246 = x5226 + x5245;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x5247 = (x5246 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5247);
          reg = x5247;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x5248 = inv(x5246);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5248);
          reg = x5248;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5249 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5249 != Fp::invalid());
      if (x5249 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x5246 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x5250 = x96 - x5249;
      if (x5250 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5251 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5251 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5252 = x5246 * x5251;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5253 = x5252 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x5253 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/components/u32.cpp":138:27)
      auto x5254 = x5242 * x91;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x5255 = x5238 + x5254;
      // loc("zirgen/components/u32.cpp":138:47)
      auto x5256 = x5250 * x81;
      // loc("zirgen/components/u32.cpp":138:13)
      auto x5257 = x5255 + x5256;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x5258 = (x5257 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5258);
          reg = x5258;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x5259 = inv(x5257);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5259);
          reg = x5259;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5260 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x5260 != Fp::invalid());
      if (x5260 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x5257 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x5261 = x96 - x5260;
      if (x5261 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/IsZeroU32/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5262 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x5262 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5263 = x5257 * x5262;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5264 = x5263 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x5264 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5265 = x5161 + x5203;
      // loc("zirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5266 = x5161 * x93;
      // loc("zirgen/circuit/rv32im/divide.cpp":149:38)
      auto x5267 = x5266 * x5203;
      // loc("zirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5268 = x5265 - x5267;
      // loc("zirgen/circuit/rv32im/divide.cpp":149:64)
      auto x5269 = x5260 * x5161;
      // loc("zirgen/circuit/rv32im/divide.cpp":149:16)
      auto x5270 = x5268 - x5269;
      // loc("zirgen/circuit/rv32im/divide.cpp":149:3)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5270);
        reg = x5270;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5271 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5271 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/divide.cpp":151:46)
      auto x5272 = x96 - x5271;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5273 = x5272 * x5127;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5274 = x5272 * x5128;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5275 = x5272 * x5129;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5276 = x5272 * x5130;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5277 = x5273 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5278 = x5274 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5279 = x5275 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5280 = x5276 + x92;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5281 = x5271 * x5127;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5282 = x5271 * x5128;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5283 = x5271 * x5129;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5284 = x5271 * x5130;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5285 = x5277 - x5281;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5286 = x5278 - x5282;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5287 = x5279 - x5283;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5288 = x5280 - x5284;
      // loc("zirgen/circuit/rv32im/divide.cpp":152:16)
      auto x5289 = x5271 * x5136;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5290 = x5285 - x5289;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x5291 = x5286 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x5292 = x5290 + x5291;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5293 = Fp(x5292.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5293);
          reg = x5293;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5294 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x5294 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5295 = x5292 - x5294;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5296 = x5295 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5297 = Fp(x5296.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5297);
          reg = x5297;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5298 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x5298 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5299 = x5296 - x5298;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5300 = x5299 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5300);
        reg = x5300;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5301 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x5301 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5302 = x5301 + x5287;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x5303 = x5288 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5304 = x5302 + x5303;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5305 = Fp(x5304.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5305);
          reg = x5305;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5306 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x5306 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5307 = x5304 - x5306;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5308 = x5307 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5309 = Fp(x5308.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5309);
          reg = x5309;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5310 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x5310 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5311 = x5308 - x5310;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5312 = x5311 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5312);
        reg = x5312;
      }
      host_args.at(0) = x5127;
      host_args.at(1) = x5128;
      host_args.at(2) = x5129;
      host_args.at(3) = x5130;
      host_args.at(4) = x5294;
      host_args.at(5) = x5298;
      host_args.at(6) = x5306;
      host_args.at(7) = x5310;
      host(ctx, "log", "  quot = %w, quotAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5313 = x5162 * x5131;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5314 = x5162 * x5132;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5315 = x5162 * x5133;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5316 = x5162 * x5134;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5317 = x5313 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5318 = x5314 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5319 = x5315 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5320 = x5316 + x92;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5321 = x5161 * x5131;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5322 = x5161 * x5132;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5323 = x5161 * x5133;
      // loc("zirgen/components/u32.cpp":105:20)
      auto x5324 = x5161 * x5134;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5325 = x5317 - x5321;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5326 = x5318 - x5322;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5327 = x5319 - x5323;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5328 = x5320 - x5324;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5329 = x5325 - x5179;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x5330 = x5326 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x5331 = x5329 + x5330;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5332 = Fp(x5331.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5332);
          reg = x5332;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5333 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x5333 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5334 = x5331 - x5333;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5335 = x5334 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5336 = Fp(x5335.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5336);
          reg = x5336;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5337 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x5337 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5338 = x5335 - x5337;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5339 = x5338 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5339);
        reg = x5339;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5340 = args[2][78 * steps + ((cycle - 0) & mask)];
      assert(x5340 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5341 = x5340 + x5327;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x5342 = x5328 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5343 = x5341 + x5342;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5344 = Fp(x5343.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5344);
          reg = x5344;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5345 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x5345 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5346 = x5343 - x5345;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5347 = x5346 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5348 = Fp(x5347.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5348);
          reg = x5348;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5349 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x5349 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5350 = x5347 - x5349;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5351 = x5350 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5351);
        reg = x5351;
      }
      host_args.at(0) = x5131;
      host_args.at(1) = x5132;
      host_args.at(2) = x5133;
      host_args.at(3) = x5134;
      host_args.at(4) = x5333;
      host_args.at(5) = x5337;
      host_args.at(6) = x5345;
      host_args.at(7) = x5349;
      host(ctx, "log", "  rem = %w, remAbs = %w", host_args.data(), 8, host_outs.data(), 0);
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5352 = x5226 + x91;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5353 = x5230 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5354 = x5238 + x92;
      // loc("zirgen/components/u32.cpp":89:20)
      auto x5355 = x5242 + x92;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5356 = x5352 - x96;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5357 = x5356 - x5333;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5358 = x5353 - x5337;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5359 = x5354 - x5345;
      // loc("zirgen/components/u32.cpp":97:20)
      auto x5360 = x5355 - x5349;
      // loc("zirgen/components/u32.cpp":146:29)
      auto x5361 = x5358 * x91;
      // loc("zirgen/components/u32.cpp":146:15)
      auto x5362 = x5357 + x5361;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5363 = Fp(x5362.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5363);
          reg = x5363;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5364 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x5364 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5365 = x5362 - x5364;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5366 = x5365 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5367 = Fp(x5366.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5367);
          reg = x5367;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5368 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x5368 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5369 = x5366 - x5368;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5370 = x5369 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5370);
        reg = x5370;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5371 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x5371 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5372 = x5371 + x5359;
      // loc("zirgen/components/u32.cpp":148:41)
      auto x5373 = x5360 * x91;
      // loc("zirgen/components/u32.cpp":148:16)
      auto x5374 = x5372 + x5373;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5375 = Fp(x5374.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5375);
          reg = x5375;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5376 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x5376 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5377 = x5374 - x5376;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5378 = x5377 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5379 = Fp(x5378.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5379);
          reg = x5379;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5380 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x5380 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5381 = x5378 - x5380;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5382 = x5381 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5382);
        reg = x5382;
      }
      // loc("zirgen/components/u32.cpp":260:14)
      auto x5383 = x5294 * x5226;
      // loc("zirgen/components/u32.cpp":260:14)
      auto x5384 = x5383 + x5333;
      // loc("zirgen/components/u32.cpp":261:21)
      auto x5385 = x5294 * x5230;
      // loc("zirgen/components/u32.cpp":261:51)
      auto x5386 = x5298 * x5226;
      // loc("zirgen/components/u32.cpp":261:21)
      auto x5387 = x5385 + x5386;
      // loc("zirgen/components/u32.cpp":261:21)
      auto x5388 = x5387 + x5337;
      // loc("zirgen/components/u32.cpp":261:14)
      auto x5389 = x5388 * x91;
      // loc("zirgen/components/u32.cpp":260:14)
      auto x5390 = x5384 + x5389;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5391 = Fp(x5390.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5391);
          reg = x5391;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5392 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x5392 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5393 = x5390 - x5392;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5394 = x5393 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5395 = Fp(x5394.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5395);
          reg = x5395;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5396 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x5396 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5397 = x5394 - x5396;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5398 = x5397 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5399 = Fp(x5398.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5399);
          reg = x5399;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5400 = args[2][35 * steps + ((cycle - 0) & mask)];
      assert(x5400 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5401 = x5398 - x5400;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5402 = x5401 * x90;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5402);
        reg = x5402;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32MulAcc/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5403 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x5403 != Fp::invalid());
      // loc("zirgen/components/u32.cpp":264:15)
      auto x5404 = x5403 * x91;
      // loc("zirgen/components/u32.cpp":264:15)
      auto x5405 = x5404 + x5400;
      // loc("zirgen/components/u32.cpp":266:7)
      auto x5406 = x5298 * x5242;
      // loc("zirgen/components/u32.cpp":266:7)
      if (x5406 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:266");
      // loc("zirgen/components/u32.cpp":267:7)
      auto x5407 = x5306 * x5238;
      // loc("zirgen/components/u32.cpp":267:7)
      if (x5407 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:267");
      // loc("zirgen/components/u32.cpp":268:7)
      auto x5408 = x5310 * x5230;
      // loc("zirgen/components/u32.cpp":268:7)
      if (x5408 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:268");
      // loc("zirgen/components/u32.cpp":269:7)
      auto x5409 = x5306 * x5242;
      // loc("zirgen/components/u32.cpp":269:7)
      if (x5409 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:269");
      // loc("zirgen/components/u32.cpp":270:7)
      auto x5410 = x5310 * x5238;
      // loc("zirgen/components/u32.cpp":270:7)
      if (x5410 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:270");
      // loc("zirgen/components/u32.cpp":271:7)
      auto x5411 = x5310 * x5242;
      // loc("zirgen/components/u32.cpp":271:7)
      if (x5411 != 0) throw std::runtime_error("eqz failed at: zirgen/components/u32.cpp:271");
      // loc("zirgen/components/u32.cpp":273:15)
      auto x5412 = x5306 * x5226;
      // loc("zirgen/components/u32.cpp":273:45)
      auto x5413 = x5298 * x5230;
      // loc("zirgen/components/u32.cpp":273:15)
      auto x5414 = x5412 + x5413;
      // loc("zirgen/components/u32.cpp":274:15)
      auto x5415 = x5294 * x5238;
      // loc("zirgen/components/u32.cpp":273:15)
      auto x5416 = x5414 + x5415;
      // loc("zirgen/components/u32.cpp":273:15)
      auto x5417 = x5416 + x5345;
      // loc("zirgen/components/u32.cpp":273:15)
      auto x5418 = x5417 + x5405;
      // loc("zirgen/components/u32.cpp":275:22)
      auto x5419 = x5310 * x5226;
      // loc("zirgen/components/u32.cpp":275:52)
      auto x5420 = x5306 * x5230;
      // loc("zirgen/components/u32.cpp":275:22)
      auto x5421 = x5419 + x5420;
      // loc("zirgen/components/u32.cpp":276:22)
      auto x5422 = x5298 * x5238;
      // loc("zirgen/components/u32.cpp":275:22)
      auto x5423 = x5421 + x5422;
      // loc("zirgen/components/u32.cpp":276:52)
      auto x5424 = x5294 * x5242;
      // loc("zirgen/components/u32.cpp":275:22)
      auto x5425 = x5423 + x5424;
      // loc("zirgen/components/u32.cpp":275:22)
      auto x5426 = x5425 + x5349;
      // loc("zirgen/components/u32.cpp":275:15)
      auto x5427 = x5426 * x91;
      // loc("zirgen/components/u32.cpp":273:15)
      auto x5428 = x5418 + x5427;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5429 = Fp(x5428.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5429);
          reg = x5429;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5430 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x5430 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5431 = x5428 - x5430;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5432 = x5431 * x90;
      // loc("zirgen/components/bytes.cpp":101:3)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5432);
        reg = x5432;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
      auto x5433 = args[2][34 * steps + ((cycle - 0) & mask)];
      assert(x5433 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/7(VerifyDivideCycle)/U32Normalize/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5434 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x5434 != Fp::invalid());
      host_args.at(0) = x5392;
      host_args.at(1) = x5396;
      host_args.at(2) = x5430;
      host_args.at(3) = x5433;
      host_args.at(4) = x5434;
      host(ctx, "log", "  mul->getOut() = %w, denomRemCheck->carry = %u", host_args.data(), 5, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5435 = x5392 - x5184;
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5435 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/divide.cpp:161");
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5436 = x5396 - x5188;
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5436 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/divide.cpp:161");
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5437 = x5430 - x5196;
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5437 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/divide.cpp:161");
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      auto x5438 = x5433 - x5200;
      // loc("zirgen/circuit/rv32im/divide.cpp":161:3)
      if (x5438 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/divide.cpp:161");
      if (x5261 != 0) {
        // loc("zirgen/circuit/rv32im/divide.cpp":162:36)
        auto x5439 = x5434 - x96;
        // loc("zirgen/circuit/rv32im/divide.cpp":162:36)
        if (x5439 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/divide.cpp:162");
      }
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x5440 = x867 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5441 = Fp(x5440.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5441);
          reg = x5441;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5442 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5442 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5443 = x5440 - x5442;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5444 = x5443 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5445 = Fp(x5444.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5445);
          reg = x5445;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5446 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5446 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5447 = x5444 - x5446;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5448 = x5447 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5449 = Fp(x5448.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5449);
          reg = x5449;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5450 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5450 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5451 = x5448 - x5450;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5452 = x5451 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x5453 = Fp(x5452.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5453);
          reg = x5453;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5454 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5454 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x5455 = x5452 - x5454;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x5456 = x5455 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5456);
        reg = x5456;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5457 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5457 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x5458 = x96 - x5457;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x5459 = x5457 * x5458;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5459);
        reg = x5459;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5460 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5460 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x5461 = x93 - x5457;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x5462 = x5460 * x5461;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x5462 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("zirgen/circuit/rv32im/divide.cpp":164:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x64);
        reg = x64;
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("./zirgen/components/mux.h":49:25))
    auto x5463 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x5463 != Fp::invalid());
    if (x5463 != 0) {
      // loc("zirgen/circuit/rv32im/ecall.cpp":140:41)
      auto x5464 = x867 * x77;
      {
        host_args.at(0) = x5464;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5465 = host_outs.at(0);
        auto x5466 = host_outs.at(1);
        auto x5467 = host_outs.at(2);
        auto x5468 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5465);
          reg = x5465;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5466);
          reg = x5466;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5467);
          reg = x5467;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5468);
          reg = x5468;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5469 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x5469 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5470 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x5470 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5471 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x5471 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5472 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x5472 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5464);
        reg = x5464;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][118 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][119 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5469);
        reg = x5469;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][120 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5470);
        reg = x5470;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][121 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5471);
        reg = x5471;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][122 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5472);
        reg = x5472;
      }
      // loc("zirgen/circuit/rv32im/ecall.cpp":142:6)
      auto x5473 = x5469 - x30;
      // loc("zirgen/circuit/rv32im/ecall.cpp":142:6)
      if (x5473 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:142");
      // loc("zirgen/circuit/rv32im/ecall.cpp":143:7)
      if (x5470 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:143");
      // loc("zirgen/circuit/rv32im/ecall.cpp":144:7)
      if (x5471 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:144");
      // loc("zirgen/circuit/rv32im/ecall.cpp":145:7)
      if (x5472 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:145");
      {
        host_args.at(0) = x29;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x5474 = host_outs.at(0);
        auto x5475 = host_outs.at(1);
        auto x5476 = host_outs.at(2);
        auto x5477 = host_outs.at(3);
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5474);
          reg = x5474;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5475);
          reg = x5475;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5476);
          reg = x5476;
        }
        // loc("zirgen/components/u32.cpp":82:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5477);
          reg = x5477;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5478 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x5478 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5479 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x5479 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5480 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x5480 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5481 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x5481 != Fp::invalid());
      // loc("zirgen/components/ram.cpp":168:3)
      {
        auto& reg = args[2][123 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x29);
        reg = x29;
      }
      // loc("zirgen/components/ram.cpp":169:3)
      {
        auto& reg = args[2][124 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x853);
        reg = x853;
      }
      // loc("zirgen/components/ram.cpp":170:3)
      {
        auto& reg = args[2][125 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][126 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5478);
        reg = x5478;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][127 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5479);
        reg = x5479;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][128 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5480);
        reg = x5480;
      }
      // loc("zirgen/components/u32.cpp":34:5)
      {
        auto& reg = args[2][129 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5481);
        reg = x5481;
      }
      {
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5482 = (x5478 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5482);
          reg = x5482;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5483 = x5478 - x96;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5484 = (x5483 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5484);
          reg = x5484;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5485 = x5478 - x93;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5486 = (x5485 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5486);
          reg = x5486;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5487 = x5478 - x78;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5488 = (x5487 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5488);
          reg = x5488;
        }
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5489 = x5478 - x79;
        // loc("./zirgen/components/onehot.h":37:26)
        auto x5490 = (x5489 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/onehot.h":37:9)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5490);
          reg = x5490;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5491 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x5491 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5492 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x5492 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x5493 = x5492 * x93;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x5494 = x5491 + x5493;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5495 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x5495 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x5496 = x5495 * x78;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x5497 = x5494 + x5496;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5498 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x5498 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x5499 = x5498 * x79;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x5500 = x5497 + x5499;
      // loc("./zirgen/components/onehot.h":40:8)
      auto x5501 = x5500 - x5478;
      // loc("./zirgen/components/onehot.h":40:8)
      if (x5501 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      {
        // loc("zirgen/circuit/rv32im/ecall.cpp":152:47)
        auto x5502 = (x5500 == 0) ? Fp(1) : Fp(0);
        // loc("zirgen/circuit/rv32im/ecall.cpp":152:47)
        auto x5503 = x96 - x5502;
        if (x5503 != 0) {
          host_args.at(0) = x5478;
          host_args.at(1) = x5479;
          host_args.at(2) = x5480;
          host_args.at(3) = x5481;
          host(ctx, "log", "  ecall, selector = %w", host_args.data(), 4, host_outs.data(), 0);
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[0](Reg)"("./zirgen/components/mux.h":49:25))
      auto x5504 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x5504 != Fp::invalid());
      if (x5504 != 0) {
        {
          host_args.at(0) = x28;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5505 = host_outs.at(0);
          auto x5506 = host_outs.at(1);
          auto x5507 = host_outs.at(2);
          auto x5508 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5505);
            reg = x5505;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5506);
            reg = x5506;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5507);
            reg = x5507;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5508);
            reg = x5508;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5509 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5509 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5510 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5510 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5511 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5511 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5512 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5512 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5509);
          reg = x5509;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5510);
          reg = x5510;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5511);
          reg = x5511;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5512);
          reg = x5512;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x5513 = x5510 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5514 = x5509 + x5513;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5515 = x5511 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5516 = x5514 + x5515;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5517 = x5512 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5518 = x5516 + x5517;
        // loc("zirgen/circuit/rv32im/ecall.cpp":19:18)
        auto x5519 = x5518 * x77;
        // loc("zirgen/circuit/rv32im/ecall.cpp":19:3)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5519);
          reg = x5519;
        }
        {
          host_args.at(0) = x27;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5520 = host_outs.at(0);
          auto x5521 = host_outs.at(1);
          auto x5522 = host_outs.at(2);
          auto x5523 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5520);
            reg = x5520;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5521);
            reg = x5521;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5522);
            reg = x5522;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5523);
            reg = x5523;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5524 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5524 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5525 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5525 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5526 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5526 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5527 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5527 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5524);
          reg = x5524;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5525);
          reg = x5525;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5526);
          reg = x5526;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5527);
          reg = x5527;
        }
        host_args.at(0) = x5524;
        host_args.at(1) = x5525;
        host_args.at(2) = x5526;
        host_args.at(3) = x5527;
        host_args.at(4) = x5509;
        host_args.at(5) = x5510;
        host_args.at(6) = x5511;
        host_args.at(7) = x5512;
        host(ctx, "log", "ECallHalt> exitCode = %w, ramAddr = %w", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x5528 = x867 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5529 = Fp(x5528.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5529);
            reg = x5529;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5530 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5530 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5531 = x5528 - x5530;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5532 = x5531 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5533 = Fp(x5532.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5533);
            reg = x5533;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5534 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5534 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5535 = x5532 - x5534;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5536 = x5535 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5537 = Fp(x5536.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5537);
            reg = x5537;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5538 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5538 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5539 = x5536 - x5538;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5540 = x5539 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x5541 = Fp(x5540.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5541);
            reg = x5541;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5542 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5542 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x5543 = x5540 - x5542;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x5544 = x5543 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5544);
          reg = x5544;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5545 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5545 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x5546 = x96 - x5545;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x5547 = x5545 * x5546;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5547);
          reg = x5547;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5548 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5548 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x5549 = x93 - x5545;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x5550 = x5548 * x5549;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x5550 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/ecall.cpp":26:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
      if (x5491 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5551 = host_outs.at(0);
          auto x5552 = host_outs.at(1);
          auto x5553 = host_outs.at(2);
          auto x5554 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5551);
            reg = x5551;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5552);
            reg = x5552;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5553);
            reg = x5553;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5554);
            reg = x5554;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5555 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5555 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5556 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5556 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5557 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5557 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5558 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5558 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5555);
          reg = x5555;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5556);
          reg = x5556;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5557);
          reg = x5557;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5558);
          reg = x5558;
        }
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5559 = (x5555 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5559);
            reg = x5559;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5560 = x5555 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5561 = (x5560 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5561);
            reg = x5561;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5562 = x5555 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5563 = (x5562 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5563);
            reg = x5563;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5564 = x5555 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5565 = (x5564 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5565);
            reg = x5565;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5566 = x5555 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5567 = (x5566 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5567);
            reg = x5567;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5568 = x5555 - x75;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5569 = (x5568 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5569);
            reg = x5569;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5570 = x5555 - x74;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5571 = (x5570 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5571);
            reg = x5571;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5572 = x5555 - x73;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x5573 = (x5572 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5573);
            reg = x5573;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5574 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x5574 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5575 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x5575 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5576 = x5575 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5577 = x5574 + x5576;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5578 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x5578 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5579 = x5578 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5580 = x5577 + x5579;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5581 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x5581 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5582 = x5581 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5583 = x5580 + x5582;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[5](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5584 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x5584 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5585 = x5584 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5586 = x5583 + x5585;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[6](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5587 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x5587 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5588 = x5587 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5589 = x5586 + x5588;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[7](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5590 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x5590 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5591 = x5590 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5592 = x5589 + x5591;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x5593 = x5592 - x5555;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x5593 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/ecall.cpp":41:23))
        auto x5594 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x5594 != Fp::invalid());
        if (x5594 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[0](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5595 = args[1][106];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[0](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5596 = args[1][107];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[0](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5597 = args[1][108];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[0](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5598 = args[1][109];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5595);
            reg = x5595;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5596);
            reg = x5596;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5597);
            reg = x5597;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5598);
            reg = x5598;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5599 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5599 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5600 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5600 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5601 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5601 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5602 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5602 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5599;
          host_args.at(2) = x5600;
          host_args.at(3) = x5601;
          host_args.at(4) = x5602;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        if (x5574 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[1](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5603 = args[1][110];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[1](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5604 = args[1][111];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[1](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5605 = args[1][112];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[1](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5606 = args[1][113];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5603);
            reg = x5603;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5604);
            reg = x5604;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5605);
            reg = x5605;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5606);
            reg = x5606;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5607 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5607 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5608 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5608 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5609 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5609 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5610 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5610 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5607;
          host_args.at(2) = x5608;
          host_args.at(3) = x5609;
          host_args.at(4) = x5610;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        if (x5575 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[2](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5611 = args[1][114];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[2](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5612 = args[1][115];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[2](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5613 = args[1][116];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[2](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5614 = args[1][117];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5611);
            reg = x5611;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5612);
            reg = x5612;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5613);
            reg = x5613;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5614);
            reg = x5614;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5615 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5615 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5616 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5616 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5617 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5617 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5618 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5618 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5615;
          host_args.at(2) = x5616;
          host_args.at(3) = x5617;
          host_args.at(4) = x5618;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        if (x5578 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[3](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5619 = args[1][118];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[3](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5620 = args[1][119];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[3](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5621 = args[1][120];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[3](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5622 = args[1][121];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5619);
            reg = x5619;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5620);
            reg = x5620;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5621);
            reg = x5621;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5622);
            reg = x5622;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5623 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5623 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5624 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5624 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5625 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5625 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5626 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5626 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5623;
          host_args.at(2) = x5624;
          host_args.at(3) = x5625;
          host_args.at(4) = x5626;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        if (x5581 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[4](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5627 = args[1][122];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[4](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5628 = args[1][123];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[4](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5629 = args[1][124];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[4](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5630 = args[1][125];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5627);
            reg = x5627;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5628);
            reg = x5628;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5629);
            reg = x5629;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5630);
            reg = x5630;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5631 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5631 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5632 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5632 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5633 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5633 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5634 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5634 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5631;
          host_args.at(2) = x5632;
          host_args.at(3) = x5633;
          host_args.at(4) = x5634;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        if (x5584 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[5](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5635 = args[1][126];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[5](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5636 = args[1][127];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[5](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5637 = args[1][128];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[5](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5638 = args[1][129];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5635);
            reg = x5635;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5636);
            reg = x5636;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5637);
            reg = x5637;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5638);
            reg = x5638;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5639 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5639 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5640 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5640 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5641 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5641 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5642 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5642 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5639;
          host_args.at(2) = x5640;
          host_args.at(3) = x5641;
          host_args.at(4) = x5642;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        if (x5587 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[6](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5643 = args[1][130];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[6](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5644 = args[1][131];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[6](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5645 = args[1][132];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[6](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5646 = args[1][133];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5643);
            reg = x5643;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5644);
            reg = x5644;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5645);
            reg = x5645;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5646);
            reg = x5646;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5647 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5647 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5648 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5648 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5649 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5649 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5650 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5650 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5647;
          host_args.at(2) = x5648;
          host_args.at(3) = x5649;
          host_args.at(4) = x5650;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        if (x5590 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[7](U32Reg)/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5651 = args[1][134];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[7](U32Reg)/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5652 = args[1][135];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[7](U32Reg)/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5653 = args[1][136];
          // loc("Top/mux(Mux)/body(BodyStep)/global(Global)/output(GlobalDigest)/word[7](U32Reg)/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5654 = args[1][137];
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5651);
            reg = x5651;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5652);
            reg = x5652;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5653);
            reg = x5653;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5654);
            reg = x5654;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5655 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x5655 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5656 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x5656 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5657 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x5657 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x5658 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x5658 != Fp::invalid());
          host_args.at(0) = x5592;
          host_args.at(1) = x5655;
          host_args.at(2) = x5656;
          host_args.at(3) = x5657;
          host_args.at(4) = x5658;
          host(ctx, "log", "  Read from %u: %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5659 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x5659 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5660 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x5660 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5661 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x5661 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/1(ECallInput)/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5662 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x5662 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5659);
          reg = x5659;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5660);
          reg = x5660;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5661);
          reg = x5661;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5662);
          reg = x5662;
        }
        {
          host_args.at(0) = x27;
          host_args.at(1) = x5659;
          host_args.at(2) = x5660;
          host_args.at(3) = x5661;
          host_args.at(4) = x5662;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5663 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5663 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5664 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5664 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5665 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5665 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5666 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5666 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5663);
          reg = x5663;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5664);
          reg = x5664;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5665);
          reg = x5665;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5666);
          reg = x5666;
        }
        // loc("zirgen/circuit/rv32im/ecall.cpp":49:17)
        auto x5667 = x867 + x79;
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x5668 = x5667 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5669 = Fp(x5668.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5669);
            reg = x5669;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5670 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5670 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5671 = x5668 - x5670;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5672 = x5671 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5673 = Fp(x5672.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5673);
            reg = x5673;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5674 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5674 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5675 = x5672 - x5674;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5676 = x5675 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5677 = Fp(x5676.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5677);
            reg = x5677;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5678 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5678 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5679 = x5676 - x5678;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5680 = x5679 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x5681 = Fp(x5680.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5681);
            reg = x5681;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5682 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5682 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x5683 = x5680 - x5682;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x5684 = x5683 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5684);
          reg = x5684;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5685 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5685 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x5686 = x96 - x5685;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x5687 = x5685 * x5686;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5687);
          reg = x5687;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5688 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5688 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x5689 = x93 - x5685;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x5690 = x5688 * x5689;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x5690 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/ecall.cpp":50:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
      }
      if (x5492 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5691 = host_outs.at(0);
          auto x5692 = host_outs.at(1);
          auto x5693 = host_outs.at(2);
          auto x5694 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5691);
            reg = x5691;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5692);
            reg = x5692;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5693);
            reg = x5693;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5694);
            reg = x5694;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5695 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5695 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5696 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5696 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5697 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5697 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5698 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5698 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5695);
          reg = x5695;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5696);
          reg = x5696;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5697);
          reg = x5697;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5698);
          reg = x5698;
        }
        {
          host_args.at(0) = x28;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5699 = host_outs.at(0);
          auto x5700 = host_outs.at(1);
          auto x5701 = host_outs.at(2);
          auto x5702 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5699);
            reg = x5699;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5700);
            reg = x5700;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5701);
            reg = x5701;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5702);
            reg = x5702;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5703 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5703 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5704 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5704 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5705 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5705 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5706 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5706 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5703);
          reg = x5703;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5704);
          reg = x5704;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5705);
          reg = x5705;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5706);
          reg = x5706;
        }
        {
          // loc("./zirgen/components/u32.h":25:12)
          auto x5707 = x5704 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x5708 = x5703 + x5707;
          // loc("./zirgen/components/u32.h":26:12)
          auto x5709 = x5705 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x5710 = x5708 + x5709;
          // loc("./zirgen/components/u32.h":27:12)
          auto x5711 = x5706 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x5712 = x5710 + x5711;
          // loc("zirgen/circuit/rv32im/ecall.cpp":77:22)
          auto x5713 = Fp(x5712.asUInt32() & x78.asUInt32());
          if (x5713 != 0) {
            // loc("zirgen/circuit/rv32im/ecall.cpp":79:26)
            auto x5714 = x5712 - x5713;
            // loc("zirgen/circuit/rv32im/ecall.cpp":79:26)
            auto x5715 = x5714 + x79;
            // loc("zirgen/circuit/rv32im/ecall.cpp":79:25)
            auto x5716 = x5715 * x77;
            // loc("zirgen/circuit/rv32im/ecall.cpp":79:7)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5716);
              reg = x5716;
            }
            // loc("zirgen/circuit/rv32im/ecall.cpp":80:42)
            auto x5717 = x5713 - x96;
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5717);
              reg = x5717;
            }
          }
          // loc("zirgen/circuit/rv32im/ecall.cpp":82:23)
          auto x5718 = (x5713 == 0) ? Fp(1) : Fp(0);
          if (x5718 != 0) {
            // loc("zirgen/circuit/rv32im/ecall.cpp":83:25)
            auto x5719 = x5712 * x77;
            // loc("zirgen/circuit/rv32im/ecall.cpp":83:7)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x5719);
              reg = x5719;
            }
            // loc("./zirgen/components/bits.h":68:23)
            {
              auto& reg = args[2][76 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x78);
              reg = x78;
            }
          }
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x5720 = x5704 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5721 = x5703 + x5720;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5722 = x5705 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5723 = x5721 + x5722;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5724 = x5706 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5725 = x5723 + x5724;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5726 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x5726 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5727 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x5727 != Fp::invalid());
        host_args.at(0) = x5725;
        host_args.at(1) = x5726;
        host_args.at(2) = x5727;
        host(ctx, "log", "Calculated orig = %u, output chunks = %u, first cycle-1 = %u", host_args.data(), 3, host_outs.data(), 0);
        // loc("zirgen/circuit/rv32im/ecall.cpp":93:7)
        auto x5728 = x5726 - x96;
        // loc("zirgen/circuit/rv32im/ecall.cpp":93:6)
        auto x5729 = x5728 * x79;
        // loc("zirgen/circuit/rv32im/ecall.cpp":93:44)
        auto x5730 = x5727 + x96;
        // loc("zirgen/circuit/rv32im/ecall.cpp":93:6)
        auto x5731 = x5729 + x5730;
        // loc("zirgen/circuit/rv32im/ecall.cpp":92:6)
        auto x5732 = x5725 - x5731;
        // loc("zirgen/circuit/rv32im/ecall.cpp":92:6)
        if (x5732 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:92");
        // loc("zirgen/circuit/rv32im/ecall.cpp":96:31)
        auto x5733 = x5695 * x77;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5734 = Fp(x5733.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5734);
            reg = x5734;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5735 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x5735 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5736 = x5733 - x5735;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5737 = x5736 * x90;
        // loc("zirgen/circuit/rv32im/ecall.cpp":96:7)
        if (x5737 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:96");
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5738 = Fp(x5733.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5738);
            reg = x5738;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5739 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x5739 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5740 = x5733 - x5739;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5741 = x5740 * x90;
        // loc("zirgen/circuit/rv32im/ecall.cpp":97:7)
        if (x5741 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:97");
        {
          host_args.at(0) = x5725;
          host(ctx, "syscallInit", "", host_args.data(), 1, host_outs.data(), 0);
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x5742 = x867 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5743 = Fp(x5742.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5743);
            reg = x5743;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5744 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5744 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5745 = x5742 - x5744;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5746 = x5745 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5747 = Fp(x5746.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5747);
            reg = x5747;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5748 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5748 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5749 = x5746 - x5748;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5750 = x5749 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5751 = Fp(x5750.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5751);
            reg = x5751;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5752 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5752 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5753 = x5750 - x5752;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5754 = x5753 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x5755 = Fp(x5754.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5755);
            reg = x5755;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5756 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5756 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x5757 = x5754 - x5756;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x5758 = x5757 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5758);
          reg = x5758;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5759 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5759 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x5760 = x96 - x5759;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x5761 = x5759 * x5760;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5761);
          reg = x5761;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5762 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5762 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x5763 = x93 - x5759;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x5764 = x5762 * x5763;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x5764 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/ecall.cpp":102:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
        host(ctx, "log", "Set next major to be ecall copy in", host_args.data(), 0, host_outs.data(), 0);
      }
      if (x5495 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5765 = host_outs.at(0);
          auto x5766 = host_outs.at(1);
          auto x5767 = host_outs.at(2);
          auto x5768 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5765);
            reg = x5765;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5766);
            reg = x5766;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5767);
            reg = x5767;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5768);
            reg = x5768;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5769 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5769 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5770 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5770 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5771 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5771 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5772 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5772 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5769);
          reg = x5769;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5770);
          reg = x5770;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5771);
          reg = x5771;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5772);
          reg = x5772;
        }
        {
          host_args.at(0) = x28;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5773 = host_outs.at(0);
          auto x5774 = host_outs.at(1);
          auto x5775 = host_outs.at(2);
          auto x5776 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5773);
            reg = x5773;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5774);
            reg = x5774;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5775);
            reg = x5775;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5776);
            reg = x5776;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5777 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5777 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5778 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5778 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5779 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5779 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5780 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x5780 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5777);
          reg = x5777;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5778);
          reg = x5778;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5779);
          reg = x5779;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5780);
          reg = x5780;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5781 = host_outs.at(0);
          auto x5782 = host_outs.at(1);
          auto x5783 = host_outs.at(2);
          auto x5784 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5781);
            reg = x5781;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5782);
            reg = x5782;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5783);
            reg = x5783;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5784);
            reg = x5784;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5785 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x5785 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5786 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x5786 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5787 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x5787 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5788 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x5788 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5785);
          reg = x5785;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5786);
          reg = x5786;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5787);
          reg = x5787;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5788);
          reg = x5788;
        }
        // loc("zirgen/circuit/rv32im/ecall.cpp":117:17)
        auto x5789 = x867 + x79;
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x5790 = x5789 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5791 = Fp(x5790.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5791);
            reg = x5791;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5792 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5792 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5793 = x5790 - x5792;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5794 = x5793 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5795 = Fp(x5794.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5795);
            reg = x5795;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5796 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5796 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5797 = x5794 - x5796;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5798 = x5797 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5799 = Fp(x5798.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5799);
            reg = x5799;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5800 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5800 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5801 = x5798 - x5800;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5802 = x5801 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x5803 = Fp(x5802.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5803);
            reg = x5803;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5804 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5804 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x5805 = x5802 - x5804;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x5806 = x5805 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5806);
          reg = x5806;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5807 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5807 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x5808 = x96 - x5807;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x5809 = x5807 * x5808;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5809);
          reg = x5809;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5810 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5810 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x5811 = x93 - x5807;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x5812 = x5810 * x5811;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x5812 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/ecall.cpp":118:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
      }
      if (x5498 != 0) {
        {
          host_args.at(0) = x28;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5813 = host_outs.at(0);
          auto x5814 = host_outs.at(1);
          auto x5815 = host_outs.at(2);
          auto x5816 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5813);
            reg = x5813;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5814);
            reg = x5814;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5815);
            reg = x5815;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5816);
            reg = x5816;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5817 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x5817 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5818 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x5818 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5819 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x5819 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5820 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x5820 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x28);
          reg = x28;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5817);
          reg = x5817;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5818);
          reg = x5818;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5819);
          reg = x5819;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5820);
          reg = x5820;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x5821 = x867 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5822 = Fp(x5821.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5822);
            reg = x5822;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5823 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x5823 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5824 = x5821 - x5823;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5825 = x5824 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5826 = Fp(x5825.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5826);
            reg = x5826;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5827 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x5827 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5828 = x5825 - x5827;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5829 = x5828 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x5830 = Fp(x5829.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5830);
            reg = x5830;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x5831 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x5831 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x5832 = x5829 - x5831;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x5833 = x5832 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x5834 = Fp(x5833.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5834);
            reg = x5834;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5835 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x5835 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x5836 = x5833 - x5835;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x5837 = x5836 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5837);
          reg = x5837;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5838 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x5838 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x5839 = x96 - x5838;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x5840 = x5838 * x5839;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5840);
          reg = x5840;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5841 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x5841 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x5842 = x93 - x5838;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x5843 = x5841 * x5842;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x5843 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/ecall.cpp":130:3)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("./zirgen/components/mux.h":49:25))
    auto x5844 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x5844 != Fp::invalid());
    if (x5844 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/sha.cpp":174:69))
      auto x5845 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x5845 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("zirgen/circuit/rv32im/sha.cpp":175:77))
      auto x5846 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x5846 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":176:35)
      auto x5847 = x5845 + x5846;
      if (x5847 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":178:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x79);
          reg = x79;
        }
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5848 = x96 - x5845;
      // loc("zirgen/circuit/rv32im/sha.cpp":180:39)
      auto x5849 = x5848 - x5846;
      if (x5849 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5850 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x5850 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5850);
          reg = x5850;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":183:40))
        auto x5851 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5851 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":183:40)
        auto x5852 = x5851 - x96;
        // loc("zirgen/circuit/rv32im/sha.cpp":183:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5852);
          reg = x5852;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5853 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x5853 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x5854 = (x5853 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5854);
          reg = x5854;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x5855 = inv(x5853);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5855);
          reg = x5855;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5856 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x5856 != Fp::invalid());
      if (x5856 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x5853 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x5857 = x96 - x5856;
      if (x5857 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5858 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x5858 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5859 = x5853 * x5858;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x5860 = x5859 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x5860 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x5856 != 0) {
        // loc("zirgen/circuit/rv32im/sha.cpp":187:29)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x70);
          reg = x70;
        }
      }
      if (x5857 != 0) {
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5861 = x2412 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5862 = x1628 + x5861;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5863 = x3115 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5864 = x5862 + x5863;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5865 = x3871 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5866 = x5864 + x5865;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5867 = x4322 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5868 = x5866 + x5867;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5869 = x4686 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5870 = x5868 + x5869;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5871 = x5118 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5872 = x5870 + x5871;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5873 = x5463 * x72;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5874 = x5872 + x5873;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5875 = x5844 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5876 = x5874 + x5875;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5877 = args[2][110 * steps + ((cycle - 0) & mask)];
        assert(x5877 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5878 = x5877 * x70;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5879 = x5876 + x5878;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5880 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x5880 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5881 = x5880 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5882 = x5879 + x5881;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5883 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x5883 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5884 = x5883 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5885 = x5882 + x5884;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5886 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x5886 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5887 = x5886 * x67;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5888 = x5885 + x5887;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5889 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x5889 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5890 = x5889 * x66;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5891 = x5888 + x5890;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5892 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x5892 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x5893 = x5892 * x65;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x5894 = x5891 + x5893;
        // loc("zirgen/circuit/rv32im/sha.cpp":188:33)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5894);
          reg = x5894;
        }
      }
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x5895 = x867 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5896 = Fp(x5895.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5896);
          reg = x5896;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5897 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x5897 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5898 = x5895 - x5897;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5899 = x5898 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5900 = Fp(x5899.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5900);
          reg = x5900;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5901 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x5901 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5902 = x5899 - x5901;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5903 = x5902 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x5904 = Fp(x5903.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5904);
          reg = x5904;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x5905 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x5905 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x5906 = x5903 - x5905;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x5907 = x5906 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x5908 = Fp(x5907.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5908);
          reg = x5908;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5909 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x5909 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x5910 = x5907 - x5909;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x5911 = x5910 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5911);
        reg = x5911;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5912 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x5912 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x5913 = x96 - x5912;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x5914 = x5912 * x5913;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x5914);
        reg = x5914;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x5915 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x5915 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x5916 = x93 - x5912;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x5917 = x5915 * x5916;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x5917 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x5918 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x5918 != Fp::invalid());
      host_args.at(0) = x71;
      host_args.at(1) = x5918;
      host_args.at(2) = x5853;
      host(ctx, "log", "SHA_INIT: major = %u, minor = %u, count = %u", host_args.data(), 3, host_outs.data(), 0);
      if (x5845 != 0) {
        {
          host_args.at(0) = x25;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5919 = host_outs.at(0);
          auto x5920 = host_outs.at(1);
          auto x5921 = host_outs.at(2);
          auto x5922 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5919);
            reg = x5919;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5920);
            reg = x5920;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5921);
            reg = x5921;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5922);
            reg = x5922;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5923 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x5923 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5924 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x5924 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5925 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x5925 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5926 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x5926 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5923);
          reg = x5923;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5924);
          reg = x5924;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5925);
          reg = x5925;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5926);
          reg = x5926;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x5927 = host_outs.at(0);
          auto x5928 = host_outs.at(1);
          auto x5929 = host_outs.at(2);
          auto x5930 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5927);
            reg = x5927;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5928);
            reg = x5928;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5929);
            reg = x5929;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x5930);
            reg = x5930;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5931 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x5931 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5932 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x5932 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5933 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x5933 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5934 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x5934 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5931);
          reg = x5931;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5932);
          reg = x5932;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5933);
          reg = x5933;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5934);
          reg = x5934;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5935 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x5935 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5936 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x5936 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5937 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x5937 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5938 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x5938 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x5939 = x5936 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5940 = x5935 + x5939;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5941 = x5937 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5942 = x5940 + x5941;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5943 = x5938 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5944 = x5942 + x5943;
        // loc("zirgen/circuit/rv32im/sha.cpp":197:58)
        auto x5945 = x5944 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":197:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5945);
          reg = x5945;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5946 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x5946 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5947 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x5947 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5948 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x5948 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5949 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x5949 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x5950 = x5947 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5951 = x5946 + x5950;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5952 = x5948 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5953 = x5951 + x5952;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5954 = x5949 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5955 = x5953 + x5954;
        // loc("zirgen/circuit/rv32im/sha.cpp":198:57)
        auto x5956 = x5955 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":198:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5956);
          reg = x5956;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x5957 = x5924 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5958 = x5923 + x5957;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5959 = x5925 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5960 = x5958 + x5959;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5961 = x5926 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5962 = x5960 + x5961;
        // loc("zirgen/circuit/rv32im/sha.cpp":199:16)
        auto x5963 = x5962 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":199:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5963);
          reg = x5963;
        }
        // loc("./zirgen/components/u32.h":25:12)
        auto x5964 = x5932 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5965 = x5931 + x5964;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5966 = x5933 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5967 = x5965 + x5966;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5968 = x5934 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5969 = x5967 + x5968;
        // loc("zirgen/circuit/rv32im/sha.cpp":200:16)
        auto x5970 = x5969 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":200:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5970);
          reg = x5970;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5971 = args[2][147 * steps + ((cycle - 1) & mask)];
        assert(x5971 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5972 = args[2][148 * steps + ((cycle - 1) & mask)];
        assert(x5972 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5973 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x5973 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5974 = args[2][150 * steps + ((cycle - 1) & mask)];
        assert(x5974 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x5975 = x5972 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5976 = x5971 + x5975;
        // loc("./zirgen/components/u32.h":26:12)
        auto x5977 = x5973 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5978 = x5976 + x5977;
        // loc("./zirgen/components/u32.h":27:12)
        auto x5979 = x5974 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x5980 = x5978 + x5979;
        // loc("zirgen/circuit/rv32im/sha.cpp":201:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5980);
          reg = x5980;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":203:5)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5981 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5981 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":205:10)
        auto x5982 = x5981 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5983 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x5983 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":206:10)
        auto x5984 = x5983 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5985 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x5985 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":207:10)
        auto x5986 = x5985 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5987 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x5987 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":208:10)
        auto x5988 = x5987 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5989 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x5989 != Fp::invalid());
        host_args.at(0) = x5982;
        host_args.at(1) = x5984;
        host_args.at(2) = x5986;
        host_args.at(3) = x5988;
        host_args.at(4) = x5989;
        host(ctx, "log", "  FromEcall: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5846 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/sha.cpp":215:53))
        auto x5990 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x5990 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":215:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5990);
          reg = x5990;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/sha.cpp":216:51))
        auto x5991 = args[2][117 * steps + ((cycle - 1) & mask)];
        assert(x5991 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":216:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5991);
          reg = x5991;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/sha.cpp":217:64))
        auto x5992 = args[2][120 * steps + ((cycle - 1) & mask)];
        assert(x5992 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5993 = x5992 * x23;
        // loc("zirgen/circuit/rv32im/page_fault.cpp":48:10)
        auto x5994 = x5993 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":217:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5994);
          reg = x5994;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":218:64)
        auto x5995 = x5994 + x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":218:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5995);
          reg = x5995;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("zirgen/circuit/rv32im/sha.cpp":219:49))
        auto x5996 = args[2][121 * steps + ((cycle - 1) & mask)];
        assert(x5996 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":219:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5996);
          reg = x5996;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x5997 = args[2][118 * steps + ((cycle - 1) & mask)];
        assert(x5997 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x5997);
          reg = x5997;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":221:5)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x5998 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x5998 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":223:10)
        auto x5999 = x5998 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6000 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6000 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":224:10)
        auto x6001 = x6000 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6002 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x6002 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":225:10)
        auto x6003 = x6002 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6004 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x6004 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":226:10)
        auto x6005 = x6004 * x79;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6006 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x6006 != Fp::invalid());
        host_args.at(0) = x5999;
        host_args.at(1) = x6001;
        host_args.at(2) = x6003;
        host_args.at(3) = x6005;
        host_args.at(4) = x6006;
        host(ctx, "log", "  FromPageFault: stateOut = %10x, stateIn = %10x, data0 = %10x, data1 = %10x, repeat: %u", host_args.data(), 5, host_outs.data(), 0);
      }
      if (x5849 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":230:42))
        auto x6007 = args[2][139 * steps + ((cycle - 1) & mask)];
        assert(x6007 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":230:5)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6007);
          reg = x6007;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":231:40))
        auto x6008 = args[2][140 * steps + ((cycle - 1) & mask)];
        assert(x6008 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":231:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6008);
          reg = x6008;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":232:36))
        auto x6009 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x6009 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":232:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6009);
          reg = x6009;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":233:36))
        auto x6010 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x6010 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":233:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6010);
          reg = x6010;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":234:38))
        auto x6011 = args[2][146 * steps + ((cycle - 1) & mask)];
        assert(x6011 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":234:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6011);
          reg = x6011;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6012 = args[2][151 * steps + ((cycle - 1) & mask)];
        assert(x6012 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][151 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6012);
          reg = x6012;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":236:38))
        auto x6013 = args[2][152 * steps + ((cycle - 1) & mask)];
        assert(x6013 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":236:5)
        {
          auto& reg = args[2][152 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6013);
          reg = x6013;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6014 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x6014 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":239:24)
        auto x6015 = x6014 + x5853;
        {
          host_args.at(0) = x6015;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6016 = host_outs.at(0);
          auto x6017 = host_outs.at(1);
          auto x6018 = host_outs.at(2);
          auto x6019 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6016);
            reg = x6016;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6017);
            reg = x6017;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6018);
            reg = x6018;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6019);
            reg = x6019;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6020 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6020 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6021 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6021 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6022 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6022 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6023 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6023 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6015);
          reg = x6015;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6020);
          reg = x6020;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6021);
          reg = x6021;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6022);
          reg = x6022;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6023);
          reg = x6023;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":240:24)
        auto x6024 = x6015 + x79;
        {
          host_args.at(0) = x6024;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6025 = host_outs.at(0);
          auto x6026 = host_outs.at(1);
          auto x6027 = host_outs.at(2);
          auto x6028 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6025);
            reg = x6025;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6026);
            reg = x6026;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6027);
            reg = x6027;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6028);
            reg = x6028;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6029 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6029 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6030 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6030 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6031 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6031 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6032 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6032 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6024);
          reg = x6024;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6029);
          reg = x6029;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6030);
          reg = x6030;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6031);
          reg = x6031;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6032);
          reg = x6032;
        }
      }
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6033 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x6033 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x6034 = (x6033 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6034);
          reg = x6034;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x6035 = inv(x6033);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6035);
          reg = x6035;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6036 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x6036 != Fp::invalid());
      if (x6036 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x6033 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x6037 = x96 - x6036;
      if (x6037 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6038 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x6038 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6039 = x6033 * x6038;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6040 = x6039 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x6040 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6041 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6041 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6042 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6042 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6043 = x6042 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6044 = x6041 + x6043;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6045 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x6045 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6046 = x6045 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6047 = x6044 + x6046;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6048 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6048 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6049 = x6048 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6050 = x6047 + x6049;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6051 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6051 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6052 = x6051 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6053 = x6050 + x6052;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6054 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6054 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6055 = x6054 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6056 = x6053 + x6055;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6057 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6057 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6058 = x6057 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6059 = x6056 + x6058;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6060 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6060 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6061 = x6060 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6062 = x6059 + x6061;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6063 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6063 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6064 = x6063 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6065 = x6062 + x6064;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6066 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6066 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6067 = x6066 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6068 = x6065 + x6067;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6069 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6069 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6070 = x6069 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6071 = x6068 + x6070;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6072 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x6072 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6073 = x6072 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6074 = x6071 + x6073;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6075 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x6075 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6076 = x6075 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6077 = x6074 + x6076;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6078 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x6078 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6079 = x6078 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6080 = x6077 + x6079;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6081 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x6081 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6082 = x6081 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6083 = x6080 + x6082;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6084 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6084 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6085 = x6084 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6086 = x6083 + x6085;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6087 = x95 - x6086;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6088 = x6087 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6088);
        reg = x6088;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6089 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6089 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6090 = Fp(x6089.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6090);
          reg = x6090;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6091 = Fp(x6089.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6092 = x6091 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6092);
          reg = x6092;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6093 = Fp(x6089.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6094 = x6093 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6094);
          reg = x6094;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6095 = Fp(x6089.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6096 = x6095 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6096);
          reg = x6096;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6097 = Fp(x6089.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6098 = x6097 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6098);
          reg = x6098;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6099 = Fp(x6089.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6100 = x6099 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6100);
          reg = x6100;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6101 = Fp(x6089.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6102 = x6101 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6102);
          reg = x6102;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6103 = Fp(x6089.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6104 = x6103 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6104);
          reg = x6104;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6105 = Fp(x6089.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6106 = x6105 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6106);
          reg = x6106;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6107 = Fp(x6089.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6108 = x6107 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6108);
          reg = x6108;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6109 = Fp(x6089.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6110 = x6109 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6110);
          reg = x6110;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6111 = Fp(x6089.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6112 = x6111 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6112);
          reg = x6112;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6113 = Fp(x6089.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6114 = x6113 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6114);
          reg = x6114;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6115 = Fp(x6089.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6116 = x6115 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6116);
          reg = x6116;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6117 = Fp(x6089.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6118 = x6117 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6118);
          reg = x6118;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6119 = Fp(x6089.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6120 = x6119 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6120);
          reg = x6120;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6121 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6122 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6122 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6123 = x6122 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6124 = x6121 + x6123;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6125 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6125 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6126 = x6125 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6127 = x6124 + x6126;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6128 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6128 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6129 = x6128 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6130 = x6127 + x6129;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6131 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6131 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6132 = x6131 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6133 = x6130 + x6132;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6134 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6134 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6135 = x6134 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6136 = x6133 + x6135;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6137 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6137 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6138 = x6137 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6139 = x6136 + x6138;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6140 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6140 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6141 = x6140 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6142 = x6139 + x6141;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6143 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6143 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6144 = x6143 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6145 = x6142 + x6144;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6146 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6146 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6147 = x6146 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6148 = x6145 + x6147;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6149 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6149 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6150 = x6149 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6151 = x6148 + x6150;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6152 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6152 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6153 = x6152 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6154 = x6151 + x6153;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6155 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6155 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6156 = x6155 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6157 = x6154 + x6156;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6158 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6158 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6159 = x6158 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6160 = x6157 + x6159;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6161 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6161 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6162 = x6161 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6163 = x6160 + x6162;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6164 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6164 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6165 = x6164 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6166 = x6163 + x6165;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6167 = x6089 - x6166;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6168 = x6167 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6168);
        reg = x6168;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6169 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6169 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6170 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6170 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6171 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6171 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6172 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6172 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6173 = x6171 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6174 = x6172 + x6173;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6175 = x6169 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6176 = x6170 + x6175;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6177 = Fp(x6174.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6177);
          reg = x6177;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6178 = Fp(x6174.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6179 = x6178 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6179);
          reg = x6179;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6180 = Fp(x6174.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6181 = x6180 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6181);
          reg = x6181;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6182 = Fp(x6174.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6183 = x6182 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6183);
          reg = x6183;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6184 = Fp(x6174.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6185 = x6184 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6185);
          reg = x6185;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6186 = Fp(x6174.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6187 = x6186 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6187);
          reg = x6187;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6188 = Fp(x6174.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6189 = x6188 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6189);
          reg = x6189;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6190 = Fp(x6174.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6191 = x6190 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6191);
          reg = x6191;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6192 = Fp(x6174.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6193 = x6192 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6193);
          reg = x6193;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6194 = Fp(x6174.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6195 = x6194 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6195);
          reg = x6195;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6196 = Fp(x6174.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6197 = x6196 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6197);
          reg = x6197;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6198 = Fp(x6174.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6199 = x6198 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6199);
          reg = x6199;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6200 = Fp(x6174.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6201 = x6200 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6201);
          reg = x6201;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6202 = Fp(x6174.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6203 = x6202 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6203);
          reg = x6203;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6204 = Fp(x6174.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6205 = x6204 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6205);
          reg = x6205;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6206 = Fp(x6174.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6207 = x6206 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6207);
          reg = x6207;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6208 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x6208 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6209 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x6209 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6210 = x6209 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6211 = x6208 + x6210;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6212 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x6212 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6213 = x6212 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6214 = x6211 + x6213;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6215 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x6215 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6216 = x6215 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6217 = x6214 + x6216;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6218 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x6218 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6219 = x6218 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6220 = x6217 + x6219;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6221 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x6221 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6222 = x6221 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6223 = x6220 + x6222;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6224 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x6224 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6225 = x6224 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6226 = x6223 + x6225;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6227 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x6227 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6228 = x6227 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6229 = x6226 + x6228;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6230 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x6230 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6231 = x6230 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6232 = x6229 + x6231;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6233 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x6233 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6234 = x6233 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6235 = x6232 + x6234;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6236 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x6236 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6237 = x6236 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6238 = x6235 + x6237;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6239 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x6239 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6240 = x6239 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6241 = x6238 + x6240;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6242 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x6242 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6243 = x6242 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6244 = x6241 + x6243;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6245 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x6245 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6246 = x6245 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6247 = x6244 + x6246;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6248 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x6248 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6249 = x6248 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6250 = x6247 + x6249;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6251 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x6251 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6252 = x6251 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6253 = x6250 + x6252;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6254 = x6174 - x6253;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6255 = x6254 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6256 = Fp(x6255.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6256);
          reg = x6256;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6257 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x6257 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6258 = x6255 - x6257;
      // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6259 = x6258 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6260 = x96 - x6259;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6261 = x6259 * x6260;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6261 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6262 = x6176 + x6255;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6263 = Fp(x6262.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6263);
          reg = x6263;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6264 = Fp(x6262.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6265 = x6264 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6265);
          reg = x6265;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6266 = Fp(x6262.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6267 = x6266 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6267);
          reg = x6267;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6268 = Fp(x6262.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6269 = x6268 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6269);
          reg = x6269;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6270 = Fp(x6262.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6271 = x6270 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6271);
          reg = x6271;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6272 = Fp(x6262.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6273 = x6272 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6273);
          reg = x6273;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6274 = Fp(x6262.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6275 = x6274 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6275);
          reg = x6275;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6276 = Fp(x6262.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6277 = x6276 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6277);
          reg = x6277;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6278 = Fp(x6262.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6279 = x6278 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6279);
          reg = x6279;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6280 = Fp(x6262.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6281 = x6280 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6281);
          reg = x6281;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6282 = Fp(x6262.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6283 = x6282 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6283);
          reg = x6283;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6284 = Fp(x6262.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6285 = x6284 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6285);
          reg = x6285;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6286 = Fp(x6262.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6287 = x6286 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6287);
          reg = x6287;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6288 = Fp(x6262.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6289 = x6288 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6289);
          reg = x6289;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6290 = Fp(x6262.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6291 = x6290 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6291);
          reg = x6291;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6292 = Fp(x6262.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6293 = x6292 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6293);
          reg = x6293;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6294 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x6294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6295 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x6295 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6296 = x6295 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6297 = x6294 + x6296;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6298 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x6298 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6299 = x6298 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6300 = x6297 + x6299;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6301 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x6301 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6302 = x6301 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6303 = x6300 + x6302;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6304 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x6304 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6305 = x6304 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6306 = x6303 + x6305;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6307 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x6307 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6308 = x6307 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6309 = x6306 + x6308;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6310 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x6310 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6311 = x6310 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6312 = x6309 + x6311;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6313 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x6313 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6314 = x6313 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6315 = x6312 + x6314;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6316 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x6316 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6317 = x6316 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6318 = x6315 + x6317;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6319 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x6319 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6320 = x6319 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6321 = x6318 + x6320;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6322 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x6322 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6323 = x6322 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6324 = x6321 + x6323;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6325 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x6325 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6326 = x6325 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6327 = x6324 + x6326;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6328 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x6328 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6329 = x6328 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6330 = x6327 + x6329;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6331 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x6331 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6332 = x6331 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6333 = x6330 + x6332;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6334 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x6334 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6335 = x6334 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6336 = x6333 + x6335;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6337 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x6337 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6338 = x6337 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6339 = x6336 + x6338;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6340 = x6262 - x6339;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6341 = x6340 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6342 = Fp(x6341.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6342);
          reg = x6342;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6343 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x6343 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6344 = x6341 - x6343;
      // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6345 = x6344 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6346 = x96 - x6345;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6347 = x6345 * x6346;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6347 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6348 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x6348 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6349 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x6349 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6350 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x6350 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6351 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x6351 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6352 = x6350 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6353 = x6351 + x6352;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6354 = x6348 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6355 = x6349 + x6354;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6356 = Fp(x6353.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6356);
          reg = x6356;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6357 = Fp(x6353.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6358 = x6357 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6358);
          reg = x6358;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6359 = Fp(x6353.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6360 = x6359 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6360);
          reg = x6360;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6361 = Fp(x6353.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6362 = x6361 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6362);
          reg = x6362;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6363 = Fp(x6353.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6364 = x6363 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6364);
          reg = x6364;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6365 = Fp(x6353.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6366 = x6365 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6366);
          reg = x6366;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6367 = Fp(x6353.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6368 = x6367 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6368);
          reg = x6368;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6369 = Fp(x6353.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6370 = x6369 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6370);
          reg = x6370;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6371 = Fp(x6353.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6372 = x6371 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6372);
          reg = x6372;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6373 = Fp(x6353.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6374 = x6373 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6374);
          reg = x6374;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6375 = Fp(x6353.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6376 = x6375 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6376);
          reg = x6376;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6377 = Fp(x6353.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6378 = x6377 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6378);
          reg = x6378;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6379 = Fp(x6353.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6380 = x6379 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6380);
          reg = x6380;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6381 = Fp(x6353.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6382 = x6381 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6382);
          reg = x6382;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6383 = Fp(x6353.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6384 = x6383 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6384);
          reg = x6384;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6385 = Fp(x6353.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6386 = x6385 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6386);
          reg = x6386;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6387 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x6387 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6388 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x6388 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6389 = x6388 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6390 = x6387 + x6389;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6391 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x6391 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6392 = x6391 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6393 = x6390 + x6392;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6394 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x6394 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6395 = x6394 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6396 = x6393 + x6395;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6397 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x6397 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6398 = x6397 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6399 = x6396 + x6398;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6400 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x6400 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6401 = x6400 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6402 = x6399 + x6401;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6403 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x6403 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6404 = x6403 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6405 = x6402 + x6404;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6406 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x6406 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6407 = x6406 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6408 = x6405 + x6407;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6409 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x6409 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6410 = x6409 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6411 = x6408 + x6410;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6412 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x6412 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6413 = x6412 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6414 = x6411 + x6413;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6415 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x6415 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6416 = x6415 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6417 = x6414 + x6416;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6418 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x6418 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6419 = x6418 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6420 = x6417 + x6419;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6421 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x6421 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6422 = x6421 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6423 = x6420 + x6422;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6424 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x6424 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6425 = x6424 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6426 = x6423 + x6425;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6427 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x6427 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6428 = x6427 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6429 = x6426 + x6428;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6430 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x6430 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6431 = x6430 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6432 = x6429 + x6431;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6433 = x6353 - x6432;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6434 = x6433 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
        auto x6435 = Fp(x6434.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6435);
          reg = x6435;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6436 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x6436 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
      auto x6437 = x6434 - x6436;
      // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
      auto x6438 = x6437 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
      auto x6439 = x96 - x6438;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      auto x6440 = x6438 * x6439;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      if (x6440 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
      auto x6441 = x6355 + x6434;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6442 = Fp(x6441.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6442);
          reg = x6442;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6443 = Fp(x6441.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6444 = x6443 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6444);
          reg = x6444;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6445 = Fp(x6441.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6446 = x6445 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6446);
          reg = x6446;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6447 = Fp(x6441.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6448 = x6447 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6448);
          reg = x6448;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6449 = Fp(x6441.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6450 = x6449 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6450);
          reg = x6450;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6451 = Fp(x6441.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6452 = x6451 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6452);
          reg = x6452;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6453 = Fp(x6441.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6454 = x6453 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6454);
          reg = x6454;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6455 = Fp(x6441.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6456 = x6455 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6456);
          reg = x6456;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6457 = Fp(x6441.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6458 = x6457 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6458);
          reg = x6458;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6459 = Fp(x6441.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6460 = x6459 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6460);
          reg = x6460;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6461 = Fp(x6441.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6462 = x6461 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6462);
          reg = x6462;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6463 = Fp(x6441.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6464 = x6463 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6464);
          reg = x6464;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6465 = Fp(x6441.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6466 = x6465 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6466);
          reg = x6466;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6467 = Fp(x6441.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6468 = x6467 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6468);
          reg = x6468;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6469 = Fp(x6441.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6470 = x6469 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6470);
          reg = x6470;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6471 = Fp(x6441.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6472 = x6471 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6472);
          reg = x6472;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6473 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x6473 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6474 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x6474 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6475 = x6474 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6476 = x6473 + x6475;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6477 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x6477 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6478 = x6477 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6479 = x6476 + x6478;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6480 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x6480 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6481 = x6480 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6482 = x6479 + x6481;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6483 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x6483 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6484 = x6483 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6485 = x6482 + x6484;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6486 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x6486 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6487 = x6486 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6488 = x6485 + x6487;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6489 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x6489 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6490 = x6489 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6491 = x6488 + x6490;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6492 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x6492 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6493 = x6492 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6494 = x6491 + x6493;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6495 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x6495 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6496 = x6495 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6497 = x6494 + x6496;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6498 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x6498 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6499 = x6498 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6500 = x6497 + x6499;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6501 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x6501 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6502 = x6501 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6503 = x6500 + x6502;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6504 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x6504 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6505 = x6504 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6506 = x6503 + x6505;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6507 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x6507 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6508 = x6507 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6509 = x6506 + x6508;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6510 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x6510 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6511 = x6510 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6512 = x6509 + x6511;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6513 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x6513 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6514 = x6513 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6515 = x6512 + x6514;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6516 = args[2][222 * steps + ((cycle - 0) & mask)];
      assert(x6516 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6517 = x6516 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6518 = x6515 + x6517;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6519 = x6441 - x6518;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6520 = x6519 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
        auto x6521 = Fp(x6520.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6521);
          reg = x6521;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6522 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x6522 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
      auto x6523 = x6520 - x6522;
      // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
      auto x6524 = x6523 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
      auto x6525 = x96 - x6524;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      auto x6526 = x6524 * x6525;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      if (x6526 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("./zirgen/components/mux.h":49:25))
    auto x6527 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x6527 != Fp::invalid());
    if (x6527 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[9](Reg)"("zirgen/circuit/rv32im/sha.cpp":262:70))
      auto x6528 = args[2][109 * steps + ((cycle - 1) & mask)];
      assert(x6528 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("zirgen/circuit/rv32im/sha.cpp":263:70))
      auto x6529 = args[2][111 * steps + ((cycle - 1) & mask)];
      assert(x6529 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":264:29)
      auto x6530 = x6528 + x6529;
      if (x6530 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":266:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x73);
          reg = x73;
        }
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":268:33)
      auto x6531 = x96 - x6528;
      // loc("zirgen/circuit/rv32im/sha.cpp":268:33)
      auto x6532 = x6531 - x6529;
      if (x6532 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6533 = args[2][144 * steps + ((cycle - 1) & mask)];
        assert(x6533 != Fp::invalid());
        if (x6533 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":272:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x73);
            reg = x73;
          }
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":274:20)
        auto x6534 = x96 - x6533;
        if (x6534 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x6535 = args[2][149 * steps + ((cycle - 1) & mask)];
          assert(x6535 != Fp::invalid());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6535);
            reg = x6535;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":277:42))
          auto x6536 = args[2][143 * steps + ((cycle - 1) & mask)];
          assert(x6536 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":277:42)
          auto x6537 = x6536 - x96;
          // loc("zirgen/circuit/rv32im/sha.cpp":277:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6537);
            reg = x6537;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6538 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x6538 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x6539 = (x6538 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6539);
          reg = x6539;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x6540 = inv(x6538);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6540);
          reg = x6540;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6541 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x6541 != Fp::invalid());
      if (x6541 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x6538 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x6542 = x96 - x6541;
      if (x6542 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6543 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x6543 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6544 = x6538 * x6543;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6545 = x6544 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x6545 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x6541 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6546 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x6546 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":284:17)
        auto x6547 = x96 - x6546;
        if (x6547 != 0) {
          // loc("zirgen/circuit/rv32im/sha.cpp":284:21)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
        if (x6546 != 0) {
          // loc("zirgen/circuit/rv32im/sha.cpp":285:17)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x69);
            reg = x69;
          }
        }
      }
      if (x6542 != 0) {
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6548 = x2412 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6549 = x1628 + x6548;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6550 = x3115 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6551 = x6549 + x6550;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6552 = x3871 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6553 = x6551 + x6552;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6554 = x4322 * x75;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6555 = x6553 + x6554;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6556 = x4686 * x74;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6557 = x6555 + x6556;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6558 = x5118 * x73;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6559 = x6557 + x6558;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6560 = x5463 * x72;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6561 = x6559 + x6560;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6562 = x5844 * x71;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6563 = x6561 + x6562;
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6564 = x6527 * x70;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6565 = x6563 + x6564;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6566 = args[2][111 * steps + ((cycle - 0) & mask)];
        assert(x6566 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6567 = x6566 * x69;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6568 = x6565 + x6567;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6569 = args[2][112 * steps + ((cycle - 0) & mask)];
        assert(x6569 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6570 = x6569 * x68;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6571 = x6568 + x6570;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6572 = args[2][113 * steps + ((cycle - 0) & mask)];
        assert(x6572 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6573 = x6572 * x67;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6574 = x6571 + x6573;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6575 = args[2][114 * steps + ((cycle - 0) & mask)];
        assert(x6575 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6576 = x6575 * x66;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6577 = x6574 + x6576;
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6578 = args[2][115 * steps + ((cycle - 0) & mask)];
        assert(x6578 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x6579 = x6578 * x65;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x6580 = x6577 + x6579;
        // loc("zirgen/circuit/rv32im/sha.cpp":287:33)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6580);
          reg = x6580;
        }
      }
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x6581 = x867 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6582 = Fp(x6581.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6582);
          reg = x6582;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6583 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x6583 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6584 = x6581 - x6583;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6585 = x6584 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6586 = Fp(x6585.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6586);
          reg = x6586;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6587 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x6587 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6588 = x6585 - x6587;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6589 = x6588 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x6590 = Fp(x6589.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6590);
          reg = x6590;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x6591 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x6591 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x6592 = x6589 - x6591;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x6593 = x6592 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x6594 = Fp(x6593.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6594);
          reg = x6594;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6595 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x6595 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x6596 = x6593 - x6595;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x6597 = x6596 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6597);
        reg = x6597;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6598 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x6598 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x6599 = x96 - x6598;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x6600 = x6598 * x6599;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6600);
        reg = x6600;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x6601 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x6601 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x6602 = x93 - x6598;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x6603 = x6601 * x6602;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x6603 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":290:40))
      auto x6604 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x6604 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":290:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6604);
        reg = x6604;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":291:38))
      auto x6605 = args[2][140 * steps + ((cycle - 1) & mask)];
      assert(x6605 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":291:3)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6605);
        reg = x6605;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":292:34))
      auto x6606 = args[2][141 * steps + ((cycle - 1) & mask)];
      assert(x6606 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":292:3)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6606);
        reg = x6606;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":293:34))
      auto x6607 = args[2][142 * steps + ((cycle - 1) & mask)];
      assert(x6607 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":293:3)
      {
        auto& reg = args[2][142 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6607);
        reg = x6607;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":294:36))
      auto x6608 = args[2][146 * steps + ((cycle - 1) & mask)];
      assert(x6608 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":294:3)
      {
        auto& reg = args[2][146 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6608);
        reg = x6608;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6609 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x6609 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6609);
        reg = x6609;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":296:36))
      auto x6610 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x6610 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":296:3)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6610);
        reg = x6610;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6611 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x6611 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x6612 = (x6611 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6612);
          reg = x6612;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x6613 = inv(x6611);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6613);
          reg = x6613;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6614 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x6614 != Fp::invalid());
      if (x6614 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x6611 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x6615 = x96 - x6614;
      if (x6615 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x6616 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x6616 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6617 = x6611 * x6616;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x6618 = x6617 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x6618 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][150 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x6619 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x6619 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":304:8)
      auto x6620 = x6619 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x6621 = args[2][142 * steps + ((cycle - 0) & mask)];
      assert(x6621 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":305:8)
      auto x6622 = x6621 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x6623 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x6623 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":306:8)
      auto x6624 = x6623 * x79;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6625 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x6625 != Fp::invalid());
      host_args.at(0) = x70;
      host_args.at(1) = x6625;
      host_args.at(2) = x6538;
      host_args.at(3) = x6620;
      host_args.at(4) = x6622;
      host_args.at(5) = x6624;
      host_args.at(6) = x6611;
      host(ctx, "log", "SHA_LOAD: major = %u, minor = %u, count = %u, data0 = %10x, data1 = %10x, state = %10x, repeat: %u", host_args.data(), 7, host_outs.data(), 0);
      // loc("zirgen/circuit/rv32im/sha.cpp":310:15)
      auto x6626 = x96 - x6625;
      if (x6626 != 0) {
        // loc("zirgen/circuit/rv32im/sha.cpp":311:24)
        auto x6627 = x6619 + x73;
        // loc("zirgen/circuit/rv32im/sha.cpp":311:24)
        auto x6628 = x6627 - x6538;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":311:43))
        auto x6629 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x6629 != Fp::invalid());
        {
          host_args.at(0) = x6628;
          host_args.at(1) = x6629;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6630 = host_outs.at(0);
          auto x6631 = host_outs.at(1);
          auto x6632 = host_outs.at(2);
          auto x6633 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6630);
            reg = x6630;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6631);
            reg = x6631;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6632);
            reg = x6632;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6633);
            reg = x6633;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6634 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6634 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6635 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6635 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6636 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6636 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6637 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6637 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6628);
          reg = x6628;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6629);
          reg = x6629;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6634);
          reg = x6634;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6635);
          reg = x6635;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6636);
          reg = x6636;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6637);
          reg = x6637;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":312:24)
        auto x6638 = x9 - x6538;
        {
          host_args.at(0) = x6638;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6639 = host_outs.at(0);
          auto x6640 = host_outs.at(1);
          auto x6641 = host_outs.at(2);
          auto x6642 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6639);
            reg = x6639;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6640);
            reg = x6640;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6641);
            reg = x6641;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6642);
            reg = x6642;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6643 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6643 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6644 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6644 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6645 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6645 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6646 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6646 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6638);
          reg = x6638;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6643);
          reg = x6643;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6644);
          reg = x6644;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6645);
          reg = x6645;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6646);
          reg = x6646;
        }
      }
      if (x6625 != 0) {
        // loc("zirgen/circuit/rv32im/sha.cpp":315:24)
        auto x6647 = x6621 + x73;
        // loc("zirgen/circuit/rv32im/sha.cpp":315:24)
        auto x6648 = x6647 - x6538;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":315:43))
        auto x6649 = args[2][152 * steps + ((cycle - 0) & mask)];
        assert(x6649 != Fp::invalid());
        {
          host_args.at(0) = x6648;
          host_args.at(1) = x6649;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6650 = host_outs.at(0);
          auto x6651 = host_outs.at(1);
          auto x6652 = host_outs.at(2);
          auto x6653 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6650);
            reg = x6650;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6651);
            reg = x6651;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6652);
            reg = x6652;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6653);
            reg = x6653;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6654 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x6654 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6655 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x6655 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6656 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x6656 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6657 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x6657 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6648);
          reg = x6648;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6649);
          reg = x6649;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6654);
          reg = x6654;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6655);
          reg = x6655;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6656);
          reg = x6656;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6657);
          reg = x6657;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":316:24)
        auto x6658 = x8 - x6538;
        {
          host_args.at(0) = x6658;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x6659 = host_outs.at(0);
          auto x6660 = host_outs.at(1);
          auto x6661 = host_outs.at(2);
          auto x6662 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6659);
            reg = x6659;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6660);
            reg = x6660;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6661);
            reg = x6661;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x6662);
            reg = x6662;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6663 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x6663 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6664 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x6664 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6665 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x6665 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x6666 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x6666 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6658);
          reg = x6658;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6663);
          reg = x6663;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6664);
          reg = x6664;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6665);
          reg = x6665;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6666);
          reg = x6666;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6667 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x6667 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6668 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x6668 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6669 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x6669 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6670 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x6670 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":136:26)
      auto x6671 = x6669 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:11)
      auto x6672 = x6670 + x6671;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:61)
      auto x6673 = x6667 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":136:46)
      auto x6674 = x6668 + x6673;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6675 = Fp(x6672.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6675);
          reg = x6675;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6676 = Fp(x6672.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6677 = x6676 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6677);
          reg = x6677;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6678 = Fp(x6672.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6679 = x6678 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6679);
          reg = x6679;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6680 = Fp(x6672.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6681 = x6680 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6681);
          reg = x6681;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6682 = Fp(x6672.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6683 = x6682 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6683);
          reg = x6683;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6684 = Fp(x6672.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6685 = x6684 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6685);
          reg = x6685;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6686 = Fp(x6672.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6687 = x6686 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6687);
          reg = x6687;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6688 = Fp(x6672.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6689 = x6688 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6689);
          reg = x6689;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6690 = Fp(x6672.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6691 = x6690 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6691);
          reg = x6691;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6692 = Fp(x6672.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6693 = x6692 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6693);
          reg = x6693;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6694 = Fp(x6672.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6695 = x6694 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6695);
          reg = x6695;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6696 = Fp(x6672.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6697 = x6696 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6697);
          reg = x6697;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6698 = Fp(x6672.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6699 = x6698 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6699);
          reg = x6699;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6700 = Fp(x6672.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6701 = x6700 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6701);
          reg = x6701;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6702 = Fp(x6672.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6703 = x6702 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6703);
          reg = x6703;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6704 = Fp(x6672.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6705 = x6704 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6705);
          reg = x6705;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6706 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x6706 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6707 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x6707 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6708 = x6707 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6709 = x6706 + x6708;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6710 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x6710 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6711 = x6710 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6712 = x6709 + x6711;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6713 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x6713 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6714 = x6713 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6715 = x6712 + x6714;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6716 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x6716 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6717 = x6716 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6718 = x6715 + x6717;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6719 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x6719 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6720 = x6719 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6721 = x6718 + x6720;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6722 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x6722 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6723 = x6722 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6724 = x6721 + x6723;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6725 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x6725 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6726 = x6725 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6727 = x6724 + x6726;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6728 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x6728 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6729 = x6728 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6730 = x6727 + x6729;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6731 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x6731 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6732 = x6731 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6733 = x6730 + x6732;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6734 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x6734 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6735 = x6734 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6736 = x6733 + x6735;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6737 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x6737 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6738 = x6737 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6739 = x6736 + x6738;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6740 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x6740 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6741 = x6740 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6742 = x6739 + x6741;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6743 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x6743 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6744 = x6743 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6745 = x6742 + x6744;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6746 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x6746 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6747 = x6746 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6748 = x6745 + x6747;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6749 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x6749 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6750 = x6749 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6751 = x6748 + x6750;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6752 = x6672 - x6751;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6753 = x6752 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6753);
        reg = x6753;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6754 = args[2][77 * steps + ((cycle - 0) & mask)];
      assert(x6754 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":117:30)
      auto x6755 = x6674 + x6754;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6756 = Fp(x6755.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6756);
          reg = x6756;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6757 = Fp(x6755.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6758 = x6757 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6758);
          reg = x6758;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6759 = Fp(x6755.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6760 = x6759 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6760);
          reg = x6760;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6761 = Fp(x6755.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6762 = x6761 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6762);
          reg = x6762;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6763 = Fp(x6755.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6764 = x6763 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6764);
          reg = x6764;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6765 = Fp(x6755.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6766 = x6765 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6766);
          reg = x6766;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6767 = Fp(x6755.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6768 = x6767 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6768);
          reg = x6768;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6769 = Fp(x6755.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6770 = x6769 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6770);
          reg = x6770;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6771 = Fp(x6755.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6772 = x6771 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6772);
          reg = x6772;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6773 = Fp(x6755.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6774 = x6773 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6774);
          reg = x6774;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6775 = Fp(x6755.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6776 = x6775 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6776);
          reg = x6776;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6777 = Fp(x6755.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6778 = x6777 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6778);
          reg = x6778;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6779 = Fp(x6755.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6780 = x6779 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6780);
          reg = x6780;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6781 = Fp(x6755.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6782 = x6781 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6782);
          reg = x6782;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6783 = Fp(x6755.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6784 = x6783 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6784);
          reg = x6784;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x6785 = Fp(x6755.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x6786 = x6785 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x6786);
          reg = x6786;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6787 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x6787 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6788 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x6788 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6789 = x6788 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6790 = x6787 + x6789;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6791 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x6791 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6792 = x6791 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6793 = x6790 + x6792;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6794 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x6794 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6795 = x6794 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6796 = x6793 + x6795;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6797 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x6797 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6798 = x6797 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6799 = x6796 + x6798;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6800 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x6800 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6801 = x6800 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6802 = x6799 + x6801;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6803 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x6803 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6804 = x6803 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6805 = x6802 + x6804;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6806 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x6806 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6807 = x6806 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6808 = x6805 + x6807;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6809 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x6809 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6810 = x6809 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6811 = x6808 + x6810;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6812 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x6812 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6813 = x6812 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6814 = x6811 + x6813;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6815 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x6815 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6816 = x6815 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6817 = x6814 + x6816;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6818 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x6818 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6819 = x6818 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6820 = x6817 + x6819;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6821 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x6821 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6822 = x6821 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6823 = x6820 + x6822;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6824 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x6824 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6825 = x6824 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6826 = x6823 + x6825;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6827 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x6827 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6828 = x6827 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6829 = x6826 + x6828;
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6830 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x6830 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x6831 = x6830 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x6832 = x6829 + x6831;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x6833 = x6755 - x6832;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x6834 = x6833 * x10;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x6834);
        reg = x6834;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6835 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x6835 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6836 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x6836 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6837 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x6837 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6838 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x6838 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6839 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x6839 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6840 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x6840 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6841 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x6841 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6842 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x6842 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6843 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x6843 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6844 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x6844 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6845 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x6845 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6846 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x6846 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6847 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x6847 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6848 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x6848 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6849 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x6849 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6850 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x6850 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6851 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x6851 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6852 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x6852 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6853 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x6853 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6854 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x6854 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6855 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x6855 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6856 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x6856 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6857 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x6857 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6858 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x6858 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6859 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x6859 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6860 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x6860 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6861 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x6861 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6862 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x6862 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6863 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x6863 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6864 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x6864 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6865 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x6865 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6866 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x6866 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6867 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x6867 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6868 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x6868 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6869 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x6869 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6870 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x6870 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6871 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x6871 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6872 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x6872 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6873 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x6873 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6874 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x6874 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6875 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x6875 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6876 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x6876 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6877 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x6877 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6878 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x6878 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6879 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x6879 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6880 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x6880 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6881 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x6881 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6882 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x6882 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6883 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x6883 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6884 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x6884 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6885 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x6885 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6886 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x6886 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6887 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x6887 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6888 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x6888 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6889 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x6889 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6890 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x6890 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6891 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x6891 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6892 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x6892 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6893 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x6893 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6894 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x6894 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6895 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x6895 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6896 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x6896 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6897 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x6897 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6898 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x6898 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6899 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x6899 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6900 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x6900 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6901 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x6901 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6902 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x6902 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6903 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x6903 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6904 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x6904 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6905 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x6905 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6906 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x6906 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6907 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x6907 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6908 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x6908 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6909 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x6909 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6910 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x6910 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6911 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x6911 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6912 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x6912 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6913 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x6913 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6914 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x6914 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6915 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x6915 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6916 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x6916 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6917 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x6917 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6918 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x6918 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6919 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x6919 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6920 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x6920 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6921 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x6921 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6922 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x6922 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6923 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x6923 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6924 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x6924 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6925 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x6925 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6926 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x6926 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6927 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x6927 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6928 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x6928 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6929 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x6929 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6930 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x6930 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6931 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x6931 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6932 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x6932 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6933 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x6933 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6934 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x6934 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6935 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x6935 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6936 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x6936 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6937 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x6937 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6938 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x6938 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6939 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x6939 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6940 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x6940 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6941 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x6941 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6942 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x6942 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6943 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x6943 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6944 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x6944 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6945 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x6945 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6946 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x6946 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6947 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x6947 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6948 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x6948 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6949 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x6949 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6950 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x6950 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6951 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x6951 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6952 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x6952 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6953 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x6953 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6954 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x6954 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6955 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x6955 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6956 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x6956 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6957 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x6957 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6958 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x6958 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6959 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x6959 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6960 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x6960 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6961 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x6961 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6962 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x6962 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6963 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x6963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6964 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x6964 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6965 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x6965 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6966 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x6966 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6967 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x6967 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6968 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x6968 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6969 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x6969 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6970 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x6970 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6971 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x6971 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6972 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x6972 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6973 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x6973 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6974 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x6974 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6975 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x6975 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6976 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x6976 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6977 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x6977 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6978 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x6978 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6979 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x6979 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6980 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x6980 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6981 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x6981 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6982 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x6982 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6983 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x6983 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6984 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x6984 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6985 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x6985 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6986 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x6986 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6987 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x6987 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6988 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x6988 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6989 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x6989 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6990 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x6990 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6991 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x6991 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6992 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x6992 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6993 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x6993 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6994 = args[2][222 * steps + ((cycle - 1) & mask)];
      assert(x6994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6995 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x6995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6996 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x6996 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6997 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x6997 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6998 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x6998 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x6999 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x6999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7000 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x7000 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7001 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x7001 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7002 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x7002 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7003 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x7003 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7004 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x7004 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7005 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x7005 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7006 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x7006 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7007 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x7007 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7008 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x7008 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7009 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x7009 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7010 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x7010 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7011 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x7011 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7012 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x7012 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7013 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x7013 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7014 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x7014 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7015 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x7015 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7016 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x7016 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7017 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x7017 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7018 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x7018 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7019 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x7019 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7020 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x7020 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7021 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x7021 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7022 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x7022 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7023 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x7023 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7024 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x7024 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7025 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x7025 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7026 = args[2][222 * steps + ((cycle - 2) & mask)];
      assert(x7026 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7027 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x7027 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7028 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x7028 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7029 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x7029 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7030 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x7030 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7031 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x7031 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7032 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x7032 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7033 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x7033 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7034 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x7034 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7035 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x7035 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7036 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x7036 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7037 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x7037 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7038 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x7038 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7039 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x7039 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7040 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x7040 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7041 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x7041 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7042 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x7042 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7043 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x7043 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7044 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x7044 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7045 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x7045 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7046 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x7046 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7047 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x7047 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7048 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x7048 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7049 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x7049 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7050 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x7050 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7051 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x7051 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7052 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x7052 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7053 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x7053 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7054 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x7054 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7055 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x7055 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7056 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x7056 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7057 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x7057 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7058 = args[2][222 * steps + ((cycle - 3) & mask)];
      assert(x7058 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7059 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x7059 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7060 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x7060 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7061 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x7061 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7062 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x7062 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7063 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x7063 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7064 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x7064 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7065 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x7065 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7066 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x7066 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7067 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x7067 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7068 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x7068 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7069 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x7069 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7070 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x7070 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7071 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x7071 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7072 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x7072 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7073 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x7073 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7074 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x7074 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7075 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x7075 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7076 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x7076 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7077 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x7077 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7078 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x7078 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7079 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x7079 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7080 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x7080 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7081 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x7081 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7082 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x7082 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7083 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x7083 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7084 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x7084 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7085 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x7085 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7086 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x7086 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7087 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x7087 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7088 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x7088 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7089 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x7089 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7090 = args[2][222 * steps + ((cycle - 4) & mask)];
      assert(x7090 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7091 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x7091 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7092 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x7092 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7093 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x7093 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x7094 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x7094 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":132:26)
      auto x7095 = x7092 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":132:11)
      auto x7096 = x7091 + x7095;
      // loc("zirgen/circuit/rv32im/sha.cpp":132:61)
      auto x7097 = x7094 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":132:46)
      auto x7098 = x7093 + x7097;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7099 = x6848 + x6857;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7100 = x6848 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7101 = x7100 * x6857;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7102 = x7099 - x7101;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7103 = x6849 + x6858;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7104 = x6849 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7105 = x7104 * x6858;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7106 = x7103 - x7105;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7107 = x6850 + x6859;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7108 = x6850 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7109 = x7108 * x6859;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7110 = x7107 - x7109;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7111 = x6851 + x6860;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7112 = x6851 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7113 = x7112 * x6860;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7114 = x7111 - x7113;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7115 = x6852 + x6861;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7116 = x6852 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7117 = x7116 * x6861;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7118 = x7115 - x7117;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7119 = x6853 + x6862;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7120 = x6853 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7121 = x7120 * x6862;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7122 = x7119 - x7121;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7123 = x6854 + x6863;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7124 = x6854 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7125 = x7124 * x6863;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7126 = x7123 - x7125;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7127 = x6855 + x6864;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7128 = x6855 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7129 = x7128 * x6864;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7130 = x7127 - x7129;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7131 = x6856 + x6865;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7132 = x6856 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7133 = x7132 * x6865;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7134 = x7131 - x7133;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7135 = x6857 + x6866;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7136 = x6857 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7137 = x7136 * x6866;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7138 = x7135 - x7137;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7139 = x6858 + x6835;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7140 = x6858 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7141 = x7140 * x6835;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7142 = x7139 - x7141;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7143 = x6859 + x6836;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7144 = x6859 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7145 = x7144 * x6836;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7146 = x7143 - x7145;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7147 = x6860 + x6837;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7148 = x6860 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7149 = x7148 * x6837;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7150 = x7147 - x7149;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7151 = x6861 + x6838;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7152 = x6861 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7153 = x7152 * x6838;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7154 = x7151 - x7153;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7155 = x6862 + x6839;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7156 = x6862 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7157 = x7156 * x6839;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7158 = x7155 - x7157;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7159 = x6863 + x6840;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7160 = x6863 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7161 = x7160 * x6840;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7162 = x7159 - x7161;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7163 = x6864 + x6841;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7164 = x6864 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7165 = x7164 * x6841;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7166 = x7163 - x7165;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7167 = x6865 + x6842;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7168 = x6865 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7169 = x7168 * x6842;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7170 = x7167 - x7169;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7171 = x6866 + x6843;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7172 = x6866 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7173 = x7172 * x6843;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7174 = x7171 - x7173;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7175 = x6835 + x6844;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7176 = x6835 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7177 = x7176 * x6844;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7178 = x7175 - x7177;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7179 = x6836 + x6845;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7180 = x6836 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7181 = x7180 * x6845;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7182 = x7179 - x7181;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7183 = x6837 + x6846;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7184 = x6837 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7185 = x7184 * x6846;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7186 = x7183 - x7185;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7187 = x6838 + x6847;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7188 = x6838 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7189 = x7188 * x6847;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7190 = x7187 - x7189;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7191 = x6839 + x6848;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7192 = x6839 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7193 = x7192 * x6848;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7194 = x7191 - x7193;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7195 = x6840 + x6849;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7196 = x6840 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7197 = x7196 * x6849;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7198 = x7195 - x7197;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7199 = x6841 + x6850;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7200 = x6841 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7201 = x7200 * x6850;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7202 = x7199 - x7201;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7203 = x6842 + x6851;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7204 = x6842 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7205 = x7204 * x6851;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7206 = x7203 - x7205;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7207 = x6843 + x6852;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7208 = x6843 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7209 = x7208 * x6852;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7210 = x7207 - x7209;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7211 = x6844 + x6853;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7212 = x6844 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7213 = x7212 * x6853;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7214 = x7211 - x7213;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7215 = x6845 + x6854;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7216 = x6845 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7217 = x7216 * x6854;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7218 = x7215 - x7217;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7219 = x6846 + x6855;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7220 = x6846 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7221 = x7220 * x6855;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7222 = x7219 - x7221;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7223 = x6847 + x6856;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7224 = x6847 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7225 = x7224 * x6856;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7226 = x7223 - x7225;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7227 = x6837 + x7102;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7228 = x7184 * x7102;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7229 = x7227 - x7228;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7230 = x6838 + x7106;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7231 = x7188 * x7106;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7232 = x7230 - x7231;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7233 = x6839 + x7110;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7234 = x7192 * x7110;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7235 = x7233 - x7234;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7236 = x6840 + x7114;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7237 = x7196 * x7114;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7238 = x7236 - x7237;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7239 = x6841 + x7118;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7240 = x7200 * x7118;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7241 = x7239 - x7240;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7242 = x6842 + x7122;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7243 = x7204 * x7122;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7244 = x7242 - x7243;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7245 = x6843 + x7126;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7246 = x7208 * x7126;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7247 = x7245 - x7246;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7248 = x6844 + x7130;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7249 = x7212 * x7130;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7250 = x7248 - x7249;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7251 = x6845 + x7134;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7252 = x7216 * x7134;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7253 = x7251 - x7252;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7254 = x6846 + x7138;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7255 = x7220 * x7138;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7256 = x7254 - x7255;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7257 = x6847 + x7142;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7258 = x7224 * x7142;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7259 = x7257 - x7258;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7260 = x6848 + x7146;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7261 = x7100 * x7146;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7262 = x7260 - x7261;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7263 = x6849 + x7150;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7264 = x7104 * x7150;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7265 = x7263 - x7264;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7266 = x6850 + x7154;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7267 = x7108 * x7154;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7268 = x7266 - x7267;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7269 = x6851 + x7158;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7270 = x7112 * x7158;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7271 = x7269 - x7270;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7272 = x6852 + x7162;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7273 = x7116 * x7162;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7274 = x7272 - x7273;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7275 = x6853 + x7166;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7276 = x7120 * x7166;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7277 = x7275 - x7276;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7278 = x6854 + x7170;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7279 = x7124 * x7170;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7280 = x7278 - x7279;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7281 = x6855 + x7174;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7282 = x7128 * x7174;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7283 = x7281 - x7282;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7284 = x6856 + x7178;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7285 = x7132 * x7178;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7286 = x7284 - x7285;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7287 = x6857 + x7182;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7288 = x7136 * x7182;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7289 = x7287 - x7288;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7290 = x6858 + x7186;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7291 = x7140 * x7186;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7292 = x7290 - x7291;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7293 = x6859 + x7190;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7294 = x7144 * x7190;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7295 = x7293 - x7294;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7296 = x6860 + x7194;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7297 = x7148 * x7194;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7298 = x7296 - x7297;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7299 = x6861 + x7198;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7300 = x7152 * x7198;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7301 = x7299 - x7300;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7302 = x6862 + x7202;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7303 = x7156 * x7202;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7304 = x7302 - x7303;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7305 = x6863 + x7206;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7306 = x7160 * x7206;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7307 = x7305 - x7306;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7308 = x6864 + x7210;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7309 = x7164 * x7210;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7310 = x7308 - x7309;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7311 = x6865 + x7214;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7312 = x7168 * x7214;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7313 = x7311 - x7312;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7314 = x6866 + x7218;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7315 = x7172 * x7218;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7316 = x7314 - x7315;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7317 = x6835 + x7222;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7318 = x7176 * x7222;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7319 = x7317 - x7318;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7320 = x6836 + x7226;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7321 = x7180 * x7226;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7322 = x7320 - x7321;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7323 = x6974 + x6988;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7324 = x6974 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7325 = x7324 * x6988;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7326 = x7323 - x7325;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7327 = x6975 + x6989;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7328 = x6975 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7329 = x7328 * x6989;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7330 = x7327 - x7329;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7331 = x6976 + x6990;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7332 = x6976 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7333 = x7332 * x6990;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7334 = x7331 - x7333;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7335 = x6977 + x6991;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7336 = x6977 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7337 = x7336 * x6991;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7338 = x7335 - x7337;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7339 = x6978 + x6992;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7340 = x6978 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7341 = x7340 * x6992;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7342 = x7339 - x7341;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7343 = x6979 + x6993;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7344 = x6979 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7345 = x7344 * x6993;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7346 = x7343 - x7345;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7347 = x6980 + x6994;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7348 = x6980 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7349 = x7348 * x6994;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7350 = x7347 - x7349;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7351 = x6981 + x6963;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7352 = x6981 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7353 = x7352 * x6963;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7354 = x7351 - x7353;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7355 = x6982 + x6964;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7356 = x6982 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7357 = x7356 * x6964;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7358 = x7355 - x7357;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7359 = x6983 + x6965;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7360 = x6983 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7361 = x7360 * x6965;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7362 = x7359 - x7361;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7363 = x6984 + x6966;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7364 = x6984 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7365 = x7364 * x6966;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7366 = x7363 - x7365;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7367 = x6985 + x6967;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7368 = x6985 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7369 = x7368 * x6967;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7370 = x7367 - x7369;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7371 = x6986 + x6968;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7372 = x6986 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7373 = x7372 * x6968;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7374 = x7371 - x7373;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7375 = x6987 + x6969;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7376 = x6987 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7377 = x7376 * x6969;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7378 = x7375 - x7377;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7379 = x6988 + x6970;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7380 = x6988 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7381 = x7380 * x6970;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7382 = x7379 - x7381;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7383 = x6989 + x6971;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7384 = x6989 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7385 = x7384 * x6971;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7386 = x7383 - x7385;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7387 = x6990 + x6972;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7388 = x6990 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7389 = x7388 * x6972;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7390 = x7387 - x7389;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7391 = x6991 + x6973;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7392 = x6991 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7393 = x7392 * x6973;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7394 = x7391 - x7393;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7395 = x6992 + x6974;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7396 = x6992 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7397 = x7396 * x6974;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7398 = x7395 - x7397;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7399 = x6993 + x6975;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7400 = x6993 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7401 = x7400 * x6975;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7402 = x7399 - x7401;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7403 = x6994 + x6976;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7404 = x6994 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7405 = x7404 * x6976;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7406 = x7403 - x7405;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7407 = x6963 + x6977;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7408 = x6963 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7409 = x7408 * x6977;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7410 = x7407 - x7409;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7411 = x6964 + x6978;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7412 = x6964 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7413 = x7412 * x6978;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7414 = x7411 - x7413;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7415 = x6965 + x6979;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7416 = x6965 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7417 = x7416 * x6979;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7418 = x7415 - x7417;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7419 = x6966 + x6980;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7420 = x6966 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7421 = x7420 * x6980;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7422 = x7419 - x7421;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7423 = x6967 + x6981;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7424 = x6967 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7425 = x7424 * x6981;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7426 = x7423 - x7425;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7427 = x6968 + x6982;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7428 = x6968 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7429 = x7428 * x6982;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7430 = x7427 - x7429;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7431 = x6969 + x6983;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7432 = x6969 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7433 = x7432 * x6983;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7434 = x7431 - x7433;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7435 = x6970 + x6984;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7436 = x6970 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7437 = x7436 * x6984;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7438 = x7435 - x7437;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7439 = x6971 + x6985;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7440 = x6971 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7441 = x7440 * x6985;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7442 = x7439 - x7441;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7443 = x6972 + x6986;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7444 = x6972 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7445 = x7444 * x6986;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7446 = x7443 - x7445;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7447 = x6973 + x6987;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7448 = x6973 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7449 = x7448 * x6987;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7450 = x7447 - x7449;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7451 = x6969 + x7326;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7452 = x7432 * x7326;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7453 = x7451 - x7452;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7454 = x6970 + x7330;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7455 = x7436 * x7330;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7456 = x7454 - x7455;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7457 = x6971 + x7334;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7458 = x7440 * x7334;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7459 = x7457 - x7458;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7460 = x6972 + x7338;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7461 = x7444 * x7338;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7462 = x7460 - x7461;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7463 = x6973 + x7342;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7464 = x7448 * x7342;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7465 = x7463 - x7464;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7466 = x6974 + x7346;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7467 = x7324 * x7346;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7468 = x7466 - x7467;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7469 = x6975 + x7350;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7470 = x7328 * x7350;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7471 = x7469 - x7470;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7472 = x6976 + x7354;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7473 = x7332 * x7354;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7474 = x7472 - x7473;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7475 = x6977 + x7358;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7476 = x7336 * x7358;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7477 = x7475 - x7476;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7478 = x6978 + x7362;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7479 = x7340 * x7362;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7480 = x7478 - x7479;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7481 = x6979 + x7366;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7482 = x7344 * x7366;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7483 = x7481 - x7482;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7484 = x6980 + x7370;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7485 = x7348 * x7370;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7486 = x7484 - x7485;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7487 = x6981 + x7374;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7488 = x7352 * x7374;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7489 = x7487 - x7488;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7490 = x6982 + x7378;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7491 = x7356 * x7378;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7492 = x7490 - x7491;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7493 = x6983 + x7382;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7494 = x7360 * x7382;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7495 = x7493 - x7494;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7496 = x6984 + x7386;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7497 = x7364 * x7386;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7498 = x7496 - x7497;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7499 = x6985 + x7390;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7500 = x7368 * x7390;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7501 = x7499 - x7500;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7502 = x6986 + x7394;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7503 = x7372 * x7394;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7504 = x7502 - x7503;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7505 = x6987 + x7398;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7506 = x7376 * x7398;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7507 = x7505 - x7506;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7508 = x6988 + x7402;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7509 = x7380 * x7402;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7510 = x7508 - x7509;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7511 = x6989 + x7406;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7512 = x7384 * x7406;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7513 = x7511 - x7512;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7514 = x6990 + x7410;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7515 = x7388 * x7410;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7516 = x7514 - x7515;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7517 = x6991 + x7414;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7518 = x7392 * x7414;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7519 = x7517 - x7518;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7520 = x6992 + x7418;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7521 = x7396 * x7418;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7522 = x7520 - x7521;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7523 = x6993 + x7422;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7524 = x7400 * x7422;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7525 = x7523 - x7524;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7526 = x6994 + x7426;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7527 = x7404 * x7426;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7528 = x7526 - x7527;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7529 = x6963 + x7430;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7530 = x7408 * x7430;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7531 = x7529 - x7530;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7532 = x6964 + x7434;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7533 = x7412 * x7434;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7534 = x7532 - x7533;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7535 = x6965 + x7438;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7536 = x7416 * x7438;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7537 = x7535 - x7536;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7538 = x6966 + x7442;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7539 = x7420 * x7442;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7540 = x7538 - x7539;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7541 = x6967 + x7446;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7542 = x7424 * x7446;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7543 = x7541 - x7542;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7544 = x6968 + x7450;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x7545 = x7428 * x7450;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x7546 = x7544 - x7545;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7547 = x7060 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7548 = x7059 + x7547;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7549 = x7061 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7550 = x7548 + x7549;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7551 = x7062 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7552 = x7550 + x7551;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7553 = x7063 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7554 = x7552 + x7553;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7555 = x7064 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7556 = x7554 + x7555;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7557 = x7065 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7558 = x7556 + x7557;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7559 = x7066 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7560 = x7558 + x7559;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7561 = x7067 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7562 = x7560 + x7561;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7563 = x7068 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7564 = x7562 + x7563;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7565 = x7069 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7566 = x7564 + x7565;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7567 = x7070 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7568 = x7566 + x7567;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7569 = x7071 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7570 = x7568 + x7569;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7571 = x7072 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7572 = x7570 + x7571;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7573 = x7073 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7574 = x7572 + x7573;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7575 = x7074 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7576 = x7574 + x7575;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7577 = x7076 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7578 = x7075 + x7577;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7579 = x7077 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7580 = x7578 + x7579;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7581 = x7078 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7582 = x7580 + x7581;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7583 = x7079 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7584 = x7582 + x7583;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7585 = x7080 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7586 = x7584 + x7585;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7587 = x7081 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7588 = x7586 + x7587;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7589 = x7082 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7590 = x7588 + x7589;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7591 = x7083 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7592 = x7590 + x7591;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7593 = x7084 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7594 = x7592 + x7593;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7595 = x7085 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7596 = x7594 + x7595;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7597 = x7086 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7598 = x7596 + x7597;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7599 = x7087 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7600 = x7598 + x7599;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7601 = x7088 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7602 = x7600 + x7601;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7603 = x7089 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7604 = x7602 + x7603;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7605 = x7090 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7606 = x7604 + x7605;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7607 = x6963 * x6995;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7608 = x96 - x6963;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7609 = x7608 * x7027;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7610 = x7607 + x7609;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7611 = x6964 * x6996;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7612 = x96 - x6964;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7613 = x7612 * x7028;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7614 = x7611 + x7613;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7615 = x6965 * x6997;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7616 = x96 - x6965;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7617 = x7616 * x7029;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7618 = x7615 + x7617;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7619 = x6966 * x6998;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7620 = x96 - x6966;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7621 = x7620 * x7030;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7622 = x7619 + x7621;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7623 = x6967 * x6999;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7624 = x96 - x6967;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7625 = x7624 * x7031;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7626 = x7623 + x7625;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7627 = x6968 * x7000;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7628 = x96 - x6968;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7629 = x7628 * x7032;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7630 = x7627 + x7629;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7631 = x6969 * x7001;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7632 = x96 - x6969;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7633 = x7632 * x7033;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7634 = x7631 + x7633;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7635 = x6970 * x7002;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7636 = x96 - x6970;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7637 = x7636 * x7034;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7638 = x7635 + x7637;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7639 = x6971 * x7003;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7640 = x96 - x6971;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7641 = x7640 * x7035;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7642 = x7639 + x7641;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7643 = x6972 * x7004;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7644 = x96 - x6972;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7645 = x7644 * x7036;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7646 = x7643 + x7645;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7647 = x6973 * x7005;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7648 = x96 - x6973;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7649 = x7648 * x7037;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7650 = x7647 + x7649;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7651 = x6974 * x7006;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7652 = x96 - x6974;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7653 = x7652 * x7038;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7654 = x7651 + x7653;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7655 = x6975 * x7007;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7656 = x96 - x6975;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7657 = x7656 * x7039;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7658 = x7655 + x7657;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7659 = x6976 * x7008;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7660 = x96 - x6976;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7661 = x7660 * x7040;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7662 = x7659 + x7661;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7663 = x6977 * x7009;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7664 = x96 - x6977;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7665 = x7664 * x7041;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7666 = x7663 + x7665;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7667 = x6978 * x7010;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7668 = x96 - x6978;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7669 = x7668 * x7042;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7670 = x7667 + x7669;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7671 = x6979 * x7011;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7672 = x96 - x6979;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7673 = x7672 * x7043;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7674 = x7671 + x7673;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7675 = x6980 * x7012;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7676 = x96 - x6980;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7677 = x7676 * x7044;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7678 = x7675 + x7677;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7679 = x6981 * x7013;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7680 = x96 - x6981;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7681 = x7680 * x7045;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7682 = x7679 + x7681;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7683 = x6982 * x7014;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7684 = x96 - x6982;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7685 = x7684 * x7046;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7686 = x7683 + x7685;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7687 = x6983 * x7015;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7688 = x96 - x6983;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7689 = x7688 * x7047;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7690 = x7687 + x7689;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7691 = x6984 * x7016;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7692 = x96 - x6984;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7693 = x7692 * x7048;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7694 = x7691 + x7693;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7695 = x6985 * x7017;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7696 = x96 - x6985;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7697 = x7696 * x7049;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7698 = x7695 + x7697;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7699 = x6986 * x7018;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7700 = x96 - x6986;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7701 = x7700 * x7050;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7702 = x7699 + x7701;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7703 = x6987 * x7019;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7704 = x96 - x6987;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7705 = x7704 * x7051;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7706 = x7703 + x7705;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7707 = x6988 * x7020;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7708 = x96 - x6988;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7709 = x7708 * x7052;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7710 = x7707 + x7709;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7711 = x6989 * x7021;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7712 = x96 - x6989;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7713 = x7712 * x7053;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7714 = x7711 + x7713;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7715 = x6990 * x7022;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7716 = x96 - x6990;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7717 = x7716 * x7054;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7718 = x7715 + x7717;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7719 = x6991 * x7023;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7720 = x96 - x6991;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7721 = x7720 * x7055;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7722 = x7719 + x7721;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7723 = x6992 * x7024;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7724 = x96 - x6992;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7725 = x7724 * x7056;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7726 = x7723 + x7725;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7727 = x6993 * x7025;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7728 = x96 - x6993;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7729 = x7728 * x7057;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7730 = x7727 + x7729;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7731 = x6994 * x7026;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x7732 = x96 - x6994;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x7733 = x7732 * x7058;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x7734 = x7731 + x7733;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7735 = x7614 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7736 = x7610 + x7735;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7737 = x7618 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7738 = x7736 + x7737;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7739 = x7622 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7740 = x7738 + x7739;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7741 = x7626 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7742 = x7740 + x7741;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7743 = x7630 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7744 = x7742 + x7743;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7745 = x7634 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7746 = x7744 + x7745;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7747 = x7638 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7748 = x7746 + x7747;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7749 = x7642 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7750 = x7748 + x7749;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7751 = x7646 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7752 = x7750 + x7751;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7753 = x7650 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7754 = x7752 + x7753;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7755 = x7654 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7756 = x7754 + x7755;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7757 = x7658 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7758 = x7756 + x7757;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7759 = x7662 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7760 = x7758 + x7759;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7761 = x7666 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7762 = x7760 + x7761;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7763 = x7670 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7764 = x7762 + x7763;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7765 = x7678 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7766 = x7674 + x7765;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7767 = x7682 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7768 = x7766 + x7767;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7769 = x7686 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7770 = x7768 + x7769;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7771 = x7690 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7772 = x7770 + x7771;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7773 = x7694 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7774 = x7772 + x7773;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7775 = x7698 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7776 = x7774 + x7775;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7777 = x7702 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7778 = x7776 + x7777;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7779 = x7706 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7780 = x7778 + x7779;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7781 = x7710 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7782 = x7780 + x7781;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7783 = x7714 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7784 = x7782 + x7783;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7785 = x7718 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7786 = x7784 + x7785;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7787 = x7722 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7788 = x7786 + x7787;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7789 = x7726 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7790 = x7788 + x7789;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7791 = x7730 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7792 = x7790 + x7791;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7793 = x7734 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7794 = x7792 + x7793;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7795 = x7456 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7796 = x7453 + x7795;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7797 = x7459 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7798 = x7796 + x7797;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7799 = x7462 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7800 = x7798 + x7799;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7801 = x7465 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7802 = x7800 + x7801;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7803 = x7468 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7804 = x7802 + x7803;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7805 = x7471 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7806 = x7804 + x7805;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7807 = x7474 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7808 = x7806 + x7807;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7809 = x7477 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7810 = x7808 + x7809;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7811 = x7480 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7812 = x7810 + x7811;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7813 = x7483 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7814 = x7812 + x7813;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7815 = x7486 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7816 = x7814 + x7815;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7817 = x7489 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7818 = x7816 + x7817;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7819 = x7492 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7820 = x7818 + x7819;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7821 = x7495 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7822 = x7820 + x7821;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7823 = x7498 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7824 = x7822 + x7823;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7825 = x7504 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7826 = x7501 + x7825;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7827 = x7507 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7828 = x7826 + x7827;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7829 = x7510 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7830 = x7828 + x7829;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7831 = x7513 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7832 = x7830 + x7831;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7833 = x7516 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7834 = x7832 + x7833;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7835 = x7519 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7836 = x7834 + x7835;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7837 = x7522 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7838 = x7836 + x7837;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7839 = x7525 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7840 = x7838 + x7839;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7841 = x7528 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7842 = x7840 + x7841;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7843 = x7531 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7844 = x7842 + x7843;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7845 = x7534 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7846 = x7844 + x7845;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7847 = x7537 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7848 = x7846 + x7847;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7849 = x7540 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7850 = x7848 + x7849;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7851 = x7543 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7852 = x7850 + x7851;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x7853 = x7546 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x7854 = x7852 + x7853;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7855 = x7764 + x7824;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7856 = x7794 + x7854;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7857 = x7576 + x7855;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7858 = x7606 + x7856;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7859 = x7096 + x7857;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7860 = x7098 + x7858;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7861 = x6751 + x7859;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x7862 = x6832 + x7860;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7863 = x6835 * x6867;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7864 = x96 - x6899;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7865 = x7863 * x7864;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7866 = x96 - x6867;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7867 = x6835 * x7866;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7868 = x7867 * x6899;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7869 = x7865 + x7868;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7870 = x96 - x6835;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7871 = x7870 * x6867;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7872 = x7871 * x6899;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7873 = x7869 + x7872;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7874 = x7863 * x6899;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7875 = x7873 + x7874;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7876 = x6836 * x6868;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7877 = x96 - x6900;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7878 = x7876 * x7877;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7879 = x96 - x6868;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7880 = x6836 * x7879;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7881 = x7880 * x6900;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7882 = x7878 + x7881;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7883 = x96 - x6836;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7884 = x7883 * x6868;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7885 = x7884 * x6900;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7886 = x7882 + x7885;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7887 = x7876 * x6900;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7888 = x7886 + x7887;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7889 = x6837 * x6869;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7890 = x96 - x6901;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7891 = x7889 * x7890;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7892 = x96 - x6869;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7893 = x6837 * x7892;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7894 = x7893 * x6901;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7895 = x7891 + x7894;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7896 = x96 - x6837;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7897 = x7896 * x6869;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7898 = x7897 * x6901;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7899 = x7895 + x7898;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7900 = x7889 * x6901;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7901 = x7899 + x7900;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7902 = x6838 * x6870;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7903 = x96 - x6902;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7904 = x7902 * x7903;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7905 = x96 - x6870;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7906 = x6838 * x7905;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7907 = x7906 * x6902;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7908 = x7904 + x7907;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7909 = x96 - x6838;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7910 = x7909 * x6870;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7911 = x7910 * x6902;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7912 = x7908 + x7911;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7913 = x7902 * x6902;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7914 = x7912 + x7913;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7915 = x6839 * x6871;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7916 = x96 - x6903;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7917 = x7915 * x7916;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7918 = x96 - x6871;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7919 = x6839 * x7918;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7920 = x7919 * x6903;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7921 = x7917 + x7920;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7922 = x96 - x6839;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7923 = x7922 * x6871;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7924 = x7923 * x6903;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7925 = x7921 + x7924;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7926 = x7915 * x6903;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7927 = x7925 + x7926;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7928 = x6840 * x6872;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7929 = x96 - x6904;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7930 = x7928 * x7929;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7931 = x96 - x6872;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7932 = x6840 * x7931;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7933 = x7932 * x6904;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7934 = x7930 + x7933;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7935 = x96 - x6840;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7936 = x7935 * x6872;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7937 = x7936 * x6904;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7938 = x7934 + x7937;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7939 = x7928 * x6904;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7940 = x7938 + x7939;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7941 = x6841 * x6873;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7942 = x96 - x6905;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7943 = x7941 * x7942;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7944 = x96 - x6873;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7945 = x6841 * x7944;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7946 = x7945 * x6905;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7947 = x7943 + x7946;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7948 = x96 - x6841;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7949 = x7948 * x6873;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7950 = x7949 * x6905;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7951 = x7947 + x7950;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7952 = x7941 * x6905;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7953 = x7951 + x7952;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7954 = x6842 * x6874;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7955 = x96 - x6906;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7956 = x7954 * x7955;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7957 = x96 - x6874;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7958 = x6842 * x7957;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7959 = x7958 * x6906;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7960 = x7956 + x7959;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7961 = x96 - x6842;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7962 = x7961 * x6874;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7963 = x7962 * x6906;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7964 = x7960 + x7963;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7965 = x7954 * x6906;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7966 = x7964 + x7965;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7967 = x6843 * x6875;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7968 = x96 - x6907;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7969 = x7967 * x7968;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7970 = x96 - x6875;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7971 = x6843 * x7970;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7972 = x7971 * x6907;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7973 = x7969 + x7972;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7974 = x96 - x6843;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7975 = x7974 * x6875;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7976 = x7975 * x6907;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7977 = x7973 + x7976;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7978 = x7967 * x6907;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7979 = x7977 + x7978;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7980 = x6844 * x6876;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7981 = x96 - x6908;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7982 = x7980 * x7981;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7983 = x96 - x6876;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7984 = x6844 * x7983;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7985 = x7984 * x6908;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7986 = x7982 + x7985;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x7987 = x96 - x6844;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7988 = x7987 * x6876;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x7989 = x7988 * x6908;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7990 = x7986 + x7989;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x7991 = x7980 * x6908;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7992 = x7990 + x7991;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7993 = x6845 * x6877;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x7994 = x96 - x6909;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7995 = x7993 * x7994;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x7996 = x96 - x6877;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7997 = x6845 * x7996;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x7998 = x7997 * x6909;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x7999 = x7995 + x7998;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8000 = x96 - x6845;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8001 = x8000 * x6877;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8002 = x8001 * x6909;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8003 = x7999 + x8002;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8004 = x7993 * x6909;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8005 = x8003 + x8004;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8006 = x6846 * x6878;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8007 = x96 - x6910;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8008 = x8006 * x8007;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8009 = x96 - x6878;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8010 = x6846 * x8009;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8011 = x8010 * x6910;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8012 = x8008 + x8011;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8013 = x96 - x6846;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8014 = x8013 * x6878;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8015 = x8014 * x6910;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8016 = x8012 + x8015;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8017 = x8006 * x6910;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8018 = x8016 + x8017;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8019 = x6847 * x6879;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8020 = x96 - x6911;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8021 = x8019 * x8020;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8022 = x96 - x6879;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8023 = x6847 * x8022;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8024 = x8023 * x6911;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8025 = x8021 + x8024;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8026 = x96 - x6847;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8027 = x8026 * x6879;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8028 = x8027 * x6911;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8029 = x8025 + x8028;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8030 = x8019 * x6911;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8031 = x8029 + x8030;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8032 = x6848 * x6880;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8033 = x96 - x6912;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8034 = x8032 * x8033;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8035 = x96 - x6880;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8036 = x6848 * x8035;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8037 = x8036 * x6912;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8038 = x8034 + x8037;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8039 = x96 - x6848;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8040 = x8039 * x6880;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8041 = x8040 * x6912;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8042 = x8038 + x8041;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8043 = x8032 * x6912;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8044 = x8042 + x8043;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8045 = x6849 * x6881;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8046 = x96 - x6913;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8047 = x8045 * x8046;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8048 = x96 - x6881;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8049 = x6849 * x8048;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8050 = x8049 * x6913;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8051 = x8047 + x8050;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8052 = x96 - x6849;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8053 = x8052 * x6881;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8054 = x8053 * x6913;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8055 = x8051 + x8054;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8056 = x8045 * x6913;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8057 = x8055 + x8056;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8058 = x6850 * x6882;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8059 = x96 - x6914;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8060 = x8058 * x8059;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8061 = x96 - x6882;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8062 = x6850 * x8061;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8063 = x8062 * x6914;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8064 = x8060 + x8063;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8065 = x96 - x6850;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8066 = x8065 * x6882;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8067 = x8066 * x6914;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8068 = x8064 + x8067;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8069 = x8058 * x6914;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8070 = x8068 + x8069;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8071 = x6851 * x6883;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8072 = x96 - x6915;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8073 = x8071 * x8072;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8074 = x96 - x6883;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8075 = x6851 * x8074;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8076 = x8075 * x6915;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8077 = x8073 + x8076;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8078 = x96 - x6851;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8079 = x8078 * x6883;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8080 = x8079 * x6915;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8081 = x8077 + x8080;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8082 = x8071 * x6915;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8083 = x8081 + x8082;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8084 = x6852 * x6884;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8085 = x96 - x6916;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8086 = x8084 * x8085;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8087 = x96 - x6884;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8088 = x6852 * x8087;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8089 = x8088 * x6916;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8090 = x8086 + x8089;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8091 = x96 - x6852;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8092 = x8091 * x6884;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8093 = x8092 * x6916;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8094 = x8090 + x8093;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8095 = x8084 * x6916;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8096 = x8094 + x8095;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8097 = x6853 * x6885;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8098 = x96 - x6917;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8099 = x8097 * x8098;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8100 = x96 - x6885;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8101 = x6853 * x8100;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8102 = x8101 * x6917;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8103 = x8099 + x8102;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8104 = x96 - x6853;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8105 = x8104 * x6885;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8106 = x8105 * x6917;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8107 = x8103 + x8106;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8108 = x8097 * x6917;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8109 = x8107 + x8108;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8110 = x6854 * x6886;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8111 = x96 - x6918;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8112 = x8110 * x8111;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8113 = x96 - x6886;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8114 = x6854 * x8113;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8115 = x8114 * x6918;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8116 = x8112 + x8115;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8117 = x96 - x6854;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8118 = x8117 * x6886;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8119 = x8118 * x6918;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8120 = x8116 + x8119;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8121 = x8110 * x6918;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8122 = x8120 + x8121;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8123 = x6855 * x6887;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8124 = x96 - x6919;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8125 = x8123 * x8124;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8126 = x96 - x6887;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8127 = x6855 * x8126;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8128 = x8127 * x6919;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8129 = x8125 + x8128;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8130 = x96 - x6855;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8131 = x8130 * x6887;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8132 = x8131 * x6919;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8133 = x8129 + x8132;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8134 = x8123 * x6919;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8135 = x8133 + x8134;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8136 = x6856 * x6888;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8137 = x96 - x6920;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8138 = x8136 * x8137;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8139 = x96 - x6888;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8140 = x6856 * x8139;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8141 = x8140 * x6920;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8142 = x8138 + x8141;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8143 = x96 - x6856;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8144 = x8143 * x6888;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8145 = x8144 * x6920;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8146 = x8142 + x8145;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8147 = x8136 * x6920;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8148 = x8146 + x8147;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8149 = x6857 * x6889;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8150 = x96 - x6921;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8151 = x8149 * x8150;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8152 = x96 - x6889;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8153 = x6857 * x8152;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8154 = x8153 * x6921;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8155 = x8151 + x8154;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8156 = x96 - x6857;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8157 = x8156 * x6889;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8158 = x8157 * x6921;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8159 = x8155 + x8158;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8160 = x8149 * x6921;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8161 = x8159 + x8160;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8162 = x6858 * x6890;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8163 = x96 - x6922;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8164 = x8162 * x8163;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8165 = x96 - x6890;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8166 = x6858 * x8165;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8167 = x8166 * x6922;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8168 = x8164 + x8167;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8169 = x96 - x6858;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8170 = x8169 * x6890;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8171 = x8170 * x6922;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8172 = x8168 + x8171;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8173 = x8162 * x6922;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8174 = x8172 + x8173;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8175 = x6859 * x6891;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8176 = x96 - x6923;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8177 = x8175 * x8176;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8178 = x96 - x6891;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8179 = x6859 * x8178;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8180 = x8179 * x6923;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8181 = x8177 + x8180;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8182 = x96 - x6859;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8183 = x8182 * x6891;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8184 = x8183 * x6923;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8185 = x8181 + x8184;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8186 = x8175 * x6923;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8187 = x8185 + x8186;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8188 = x6860 * x6892;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8189 = x96 - x6924;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8190 = x8188 * x8189;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8191 = x96 - x6892;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8192 = x6860 * x8191;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8193 = x8192 * x6924;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8194 = x8190 + x8193;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8195 = x96 - x6860;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8196 = x8195 * x6892;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8197 = x8196 * x6924;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8198 = x8194 + x8197;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8199 = x8188 * x6924;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8200 = x8198 + x8199;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8201 = x6861 * x6893;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8202 = x96 - x6925;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8203 = x8201 * x8202;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8204 = x96 - x6893;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8205 = x6861 * x8204;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8206 = x8205 * x6925;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8207 = x8203 + x8206;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8208 = x96 - x6861;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8209 = x8208 * x6893;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8210 = x8209 * x6925;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8211 = x8207 + x8210;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8212 = x8201 * x6925;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8213 = x8211 + x8212;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8214 = x6862 * x6894;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8215 = x96 - x6926;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8216 = x8214 * x8215;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8217 = x96 - x6894;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8218 = x6862 * x8217;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8219 = x8218 * x6926;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8220 = x8216 + x8219;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8221 = x96 - x6862;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8222 = x8221 * x6894;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8223 = x8222 * x6926;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8224 = x8220 + x8223;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8225 = x8214 * x6926;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8226 = x8224 + x8225;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8227 = x6863 * x6895;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8228 = x96 - x6927;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8229 = x8227 * x8228;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8230 = x96 - x6895;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8231 = x6863 * x8230;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8232 = x8231 * x6927;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8233 = x8229 + x8232;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8234 = x96 - x6863;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8235 = x8234 * x6895;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8236 = x8235 * x6927;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8237 = x8233 + x8236;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8238 = x8227 * x6927;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8239 = x8237 + x8238;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8240 = x6864 * x6896;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8241 = x96 - x6928;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8242 = x8240 * x8241;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8243 = x96 - x6896;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8244 = x6864 * x8243;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8245 = x8244 * x6928;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8246 = x8242 + x8245;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8247 = x96 - x6864;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8248 = x8247 * x6896;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8249 = x8248 * x6928;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8250 = x8246 + x8249;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8251 = x8240 * x6928;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8252 = x8250 + x8251;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8253 = x6865 * x6897;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8254 = x96 - x6929;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8255 = x8253 * x8254;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8256 = x96 - x6897;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8257 = x6865 * x8256;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8258 = x8257 * x6929;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8259 = x8255 + x8258;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8260 = x96 - x6865;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8261 = x8260 * x6897;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8262 = x8261 * x6929;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8263 = x8259 + x8262;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8264 = x8253 * x6929;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8265 = x8263 + x8264;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8266 = x6866 * x6898;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x8267 = x96 - x6930;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8268 = x8266 * x8267;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x8269 = x96 - x6898;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8270 = x6866 * x8269;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x8271 = x8270 * x6930;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8272 = x8268 + x8271;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x8273 = x96 - x6866;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8274 = x8273 * x6898;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x8275 = x8274 * x6930;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8276 = x8272 + x8275;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x8277 = x8266 * x6930;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x8278 = x8276 + x8277;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8279 = x7888 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8280 = x7875 + x8279;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8281 = x7901 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8282 = x8280 + x8281;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8283 = x7914 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8284 = x8282 + x8283;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8285 = x7927 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8286 = x8284 + x8285;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8287 = x7940 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8288 = x8286 + x8287;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8289 = x7953 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8290 = x8288 + x8289;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8291 = x7966 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8292 = x8290 + x8291;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8293 = x7979 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8294 = x8292 + x8293;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8295 = x7992 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8296 = x8294 + x8295;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8297 = x8005 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8298 = x8296 + x8297;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8299 = x8018 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8300 = x8298 + x8299;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8301 = x8031 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8302 = x8300 + x8301;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8303 = x8044 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8304 = x8302 + x8303;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8305 = x8057 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8306 = x8304 + x8305;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8307 = x8070 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8308 = x8306 + x8307;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8309 = x8096 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8310 = x8083 + x8309;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8311 = x8109 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8312 = x8310 + x8311;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8313 = x8122 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8314 = x8312 + x8313;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8315 = x8135 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8316 = x8314 + x8315;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8317 = x8148 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8318 = x8316 + x8317;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8319 = x8161 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8320 = x8318 + x8319;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8321 = x8174 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8322 = x8320 + x8321;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8323 = x8187 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8324 = x8322 + x8323;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8325 = x8200 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8326 = x8324 + x8325;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8327 = x8213 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8328 = x8326 + x8327;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8329 = x8226 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8330 = x8328 + x8329;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8331 = x8239 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8332 = x8330 + x8331;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8333 = x8252 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8334 = x8332 + x8333;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8335 = x8265 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8336 = x8334 + x8335;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8337 = x8278 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8338 = x8336 + x8337;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8339 = x7232 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8340 = x7229 + x8339;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8341 = x7235 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8342 = x8340 + x8341;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8343 = x7238 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8344 = x8342 + x8343;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8345 = x7241 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8346 = x8344 + x8345;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8347 = x7244 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8348 = x8346 + x8347;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8349 = x7247 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8350 = x8348 + x8349;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8351 = x7250 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8352 = x8350 + x8351;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8353 = x7253 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8354 = x8352 + x8353;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8355 = x7256 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8356 = x8354 + x8355;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8357 = x7259 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8358 = x8356 + x8357;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8359 = x7262 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8360 = x8358 + x8359;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8361 = x7265 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8362 = x8360 + x8361;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8363 = x7268 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8364 = x8362 + x8363;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8365 = x7271 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8366 = x8364 + x8365;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8367 = x7274 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8368 = x8366 + x8367;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8369 = x7280 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8370 = x7277 + x8369;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8371 = x7283 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8372 = x8370 + x8371;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8373 = x7286 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8374 = x8372 + x8373;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8375 = x7289 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8376 = x8374 + x8375;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8377 = x7292 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8378 = x8376 + x8377;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8379 = x7295 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8380 = x8378 + x8379;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8381 = x7298 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8382 = x8380 + x8381;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8383 = x7301 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8384 = x8382 + x8383;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8385 = x7304 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8386 = x8384 + x8385;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8387 = x7307 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8388 = x8386 + x8387;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8389 = x7310 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8390 = x8388 + x8389;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8391 = x7313 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8392 = x8390 + x8391;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8393 = x7316 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8394 = x8392 + x8393;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8395 = x7319 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8396 = x8394 + x8395;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8397 = x7322 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8398 = x8396 + x8397;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8399 = x8308 + x8368;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8400 = x8338 + x8398;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8401 = x7861 + x8399;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8402 = x7862 + x8400;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8403 = x6932 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8404 = x6931 + x8403;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8405 = x6933 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8406 = x8404 + x8405;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8407 = x6934 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8408 = x8406 + x8407;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8409 = x6935 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8410 = x8408 + x8409;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8411 = x6936 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8412 = x8410 + x8411;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8413 = x6937 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8414 = x8412 + x8413;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8415 = x6938 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8416 = x8414 + x8415;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8417 = x6939 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8418 = x8416 + x8417;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8419 = x6940 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8420 = x8418 + x8419;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8421 = x6941 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8422 = x8420 + x8421;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8423 = x6942 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8424 = x8422 + x8423;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8425 = x6943 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8426 = x8424 + x8425;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8427 = x6944 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8428 = x8426 + x8427;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8429 = x6945 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8430 = x8428 + x8429;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8431 = x6946 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8432 = x8430 + x8431;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8433 = x6948 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8434 = x6947 + x8433;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8435 = x6949 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8436 = x8434 + x8435;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8437 = x6950 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8438 = x8436 + x8437;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8439 = x6951 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8440 = x8438 + x8439;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8441 = x6952 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8442 = x8440 + x8441;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8443 = x6953 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8444 = x8442 + x8443;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8445 = x6954 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8446 = x8444 + x8445;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8447 = x6955 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8448 = x8446 + x8447;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8449 = x6956 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8450 = x8448 + x8449;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8451 = x6957 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8452 = x8450 + x8451;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8453 = x6958 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8454 = x8452 + x8453;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8455 = x6959 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8456 = x8454 + x8455;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8457 = x6960 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8458 = x8456 + x8457;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8459 = x6961 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8460 = x8458 + x8459;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x8461 = x6962 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x8462 = x8460 + x8461;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8463 = x7861 + x8432;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x8464 = x7862 + x8462;
      // loc("zirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8401);
        reg = x8401;
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8463);
        reg = x8463;
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8402);
        reg = x8402;
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8464);
        reg = x8464;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8465 = args[2][153 * steps + ((cycle - 0) & mask)];
      assert(x8465 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8466 = args[2][154 * steps + ((cycle - 0) & mask)];
      assert(x8466 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8467 = Fp(x8465.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][159 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8467);
          reg = x8467;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8468 = Fp(x8465.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8469 = x8468 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][160 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8469);
          reg = x8469;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8470 = Fp(x8465.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8471 = x8470 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][161 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8471);
          reg = x8471;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8472 = Fp(x8465.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8473 = x8472 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][162 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8473);
          reg = x8473;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8474 = Fp(x8465.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8475 = x8474 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][163 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8475);
          reg = x8475;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8476 = Fp(x8465.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8477 = x8476 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][164 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8477);
          reg = x8477;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8478 = Fp(x8465.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8479 = x8478 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][165 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8479);
          reg = x8479;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8480 = Fp(x8465.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8481 = x8480 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][166 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8481);
          reg = x8481;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8482 = Fp(x8465.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8483 = x8482 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][167 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8483);
          reg = x8483;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8484 = Fp(x8465.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8485 = x8484 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][168 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8485);
          reg = x8485;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8486 = Fp(x8465.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8487 = x8486 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][169 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8487);
          reg = x8487;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8488 = Fp(x8465.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8489 = x8488 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][170 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8489);
          reg = x8489;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8490 = Fp(x8465.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8491 = x8490 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8491);
          reg = x8491;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8492 = Fp(x8465.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8493 = x8492 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8493);
          reg = x8493;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8494 = Fp(x8465.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8495 = x8494 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][173 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8495);
          reg = x8495;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8496 = Fp(x8465.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8497 = x8496 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][174 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8497);
          reg = x8497;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8498 = args[2][159 * steps + ((cycle - 0) & mask)];
      assert(x8498 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8499 = args[2][160 * steps + ((cycle - 0) & mask)];
      assert(x8499 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8500 = x8499 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8501 = x8498 + x8500;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8502 = args[2][161 * steps + ((cycle - 0) & mask)];
      assert(x8502 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8503 = x8502 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8504 = x8501 + x8503;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8505 = args[2][162 * steps + ((cycle - 0) & mask)];
      assert(x8505 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8506 = x8505 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8507 = x8504 + x8506;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8508 = args[2][163 * steps + ((cycle - 0) & mask)];
      assert(x8508 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8509 = x8508 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8510 = x8507 + x8509;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8511 = args[2][164 * steps + ((cycle - 0) & mask)];
      assert(x8511 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8512 = x8511 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8513 = x8510 + x8512;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8514 = args[2][165 * steps + ((cycle - 0) & mask)];
      assert(x8514 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8515 = x8514 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8516 = x8513 + x8515;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8517 = args[2][166 * steps + ((cycle - 0) & mask)];
      assert(x8517 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8518 = x8517 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8519 = x8516 + x8518;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8520 = args[2][167 * steps + ((cycle - 0) & mask)];
      assert(x8520 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8521 = x8520 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8522 = x8519 + x8521;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8523 = args[2][168 * steps + ((cycle - 0) & mask)];
      assert(x8523 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8524 = x8523 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8525 = x8522 + x8524;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8526 = args[2][169 * steps + ((cycle - 0) & mask)];
      assert(x8526 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8527 = x8526 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8528 = x8525 + x8527;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8529 = args[2][170 * steps + ((cycle - 0) & mask)];
      assert(x8529 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8530 = x8529 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8531 = x8528 + x8530;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8532 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x8532 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8533 = x8532 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8534 = x8531 + x8533;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8535 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x8535 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8536 = x8535 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8537 = x8534 + x8536;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8538 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x8538 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8539 = x8538 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8540 = x8537 + x8539;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8541 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x8541 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8542 = x8541 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8543 = x8540 + x8542;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8544 = x8465 - x8543;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8545 = x8544 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8546 = Fp(x8545.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8546);
          reg = x8546;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8547 = args[2][73 * steps + ((cycle - 0) & mask)];
      assert(x8547 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8548 = x8545 - x8547;
      // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8549 = x8548 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8550 = x96 - x8549;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8551 = x8549 * x8550;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8551 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8552 = x8466 + x8545;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8553 = Fp(x8552.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][175 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8553);
          reg = x8553;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8554 = Fp(x8552.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8555 = x8554 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][176 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8555);
          reg = x8555;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8556 = Fp(x8552.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8557 = x8556 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8557);
          reg = x8557;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8558 = Fp(x8552.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8559 = x8558 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8559);
          reg = x8559;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8560 = Fp(x8552.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8561 = x8560 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8561);
          reg = x8561;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8562 = Fp(x8552.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8563 = x8562 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8563);
          reg = x8563;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8564 = Fp(x8552.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8565 = x8564 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8565);
          reg = x8565;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8566 = Fp(x8552.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8567 = x8566 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8567);
          reg = x8567;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8568 = Fp(x8552.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8569 = x8568 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8569);
          reg = x8569;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8570 = Fp(x8552.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8571 = x8570 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8571);
          reg = x8571;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8572 = Fp(x8552.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8573 = x8572 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8573);
          reg = x8573;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8574 = Fp(x8552.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8575 = x8574 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8575);
          reg = x8575;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8576 = Fp(x8552.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8577 = x8576 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8577);
          reg = x8577;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8578 = Fp(x8552.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8579 = x8578 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8579);
          reg = x8579;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8580 = Fp(x8552.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8581 = x8580 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8581);
          reg = x8581;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8582 = Fp(x8552.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8583 = x8582 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8583);
          reg = x8583;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8584 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x8584 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8585 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x8585 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8586 = x8585 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8587 = x8584 + x8586;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8588 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x8588 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8589 = x8588 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8590 = x8587 + x8589;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8591 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x8591 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8592 = x8591 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8593 = x8590 + x8592;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8594 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x8594 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8595 = x8594 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8596 = x8593 + x8595;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8597 = args[2][180 * steps + ((cycle - 0) & mask)];
      assert(x8597 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8598 = x8597 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8599 = x8596 + x8598;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8600 = args[2][181 * steps + ((cycle - 0) & mask)];
      assert(x8600 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8601 = x8600 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8602 = x8599 + x8601;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8603 = args[2][182 * steps + ((cycle - 0) & mask)];
      assert(x8603 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8604 = x8603 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8605 = x8602 + x8604;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8606 = args[2][183 * steps + ((cycle - 0) & mask)];
      assert(x8606 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8607 = x8606 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8608 = x8605 + x8607;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8609 = args[2][184 * steps + ((cycle - 0) & mask)];
      assert(x8609 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8610 = x8609 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8611 = x8608 + x8610;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8612 = args[2][185 * steps + ((cycle - 0) & mask)];
      assert(x8612 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8613 = x8612 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8614 = x8611 + x8613;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8615 = args[2][186 * steps + ((cycle - 0) & mask)];
      assert(x8615 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8616 = x8615 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8617 = x8614 + x8616;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8618 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x8618 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8619 = x8618 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8620 = x8617 + x8619;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8621 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x8621 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8622 = x8621 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8623 = x8620 + x8622;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8624 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x8624 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8625 = x8624 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8626 = x8623 + x8625;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8627 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x8627 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8628 = x8627 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8629 = x8626 + x8628;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8630 = x8552 - x8629;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8631 = x8630 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8632 = Fp(x8631.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8632);
          reg = x8632;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8633 = args[2][74 * steps + ((cycle - 0) & mask)];
      assert(x8633 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8634 = x8631 - x8633;
      // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8635 = x8634 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8636 = x96 - x8635;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8637 = x8635 * x8636;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8637 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:11))
      auto x8638 = args[2][155 * steps + ((cycle - 0) & mask)];
      assert(x8638 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:26))
      auto x8639 = args[2][156 * steps + ((cycle - 0) & mask)];
      assert(x8639 != Fp::invalid());
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8640 = Fp(x8638.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8640);
          reg = x8640;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8641 = Fp(x8638.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8642 = x8641 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8642);
          reg = x8642;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8643 = Fp(x8638.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8644 = x8643 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8644);
          reg = x8644;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8645 = Fp(x8638.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8646 = x8645 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8646);
          reg = x8646;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8647 = Fp(x8638.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8648 = x8647 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8648);
          reg = x8648;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8649 = Fp(x8638.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8650 = x8649 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8650);
          reg = x8650;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8651 = Fp(x8638.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8652 = x8651 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8652);
          reg = x8652;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8653 = Fp(x8638.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8654 = x8653 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8654);
          reg = x8654;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8655 = Fp(x8638.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8656 = x8655 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8656);
          reg = x8656;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8657 = Fp(x8638.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8658 = x8657 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8658);
          reg = x8658;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8659 = Fp(x8638.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8660 = x8659 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8660);
          reg = x8660;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8661 = Fp(x8638.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8662 = x8661 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8662);
          reg = x8662;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8663 = Fp(x8638.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8664 = x8663 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8664);
          reg = x8664;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8665 = Fp(x8638.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8666 = x8665 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8666);
          reg = x8666;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8667 = Fp(x8638.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8668 = x8667 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8668);
          reg = x8668;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8669 = Fp(x8638.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8670 = x8669 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8670);
          reg = x8670;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8671 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x8671 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8672 = args[2][192 * steps + ((cycle - 0) & mask)];
      assert(x8672 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8673 = x8672 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8674 = x8671 + x8673;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8675 = args[2][193 * steps + ((cycle - 0) & mask)];
      assert(x8675 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8676 = x8675 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8677 = x8674 + x8676;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8678 = args[2][194 * steps + ((cycle - 0) & mask)];
      assert(x8678 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8679 = x8678 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8680 = x8677 + x8679;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8681 = args[2][195 * steps + ((cycle - 0) & mask)];
      assert(x8681 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8682 = x8681 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8683 = x8680 + x8682;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8684 = args[2][196 * steps + ((cycle - 0) & mask)];
      assert(x8684 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8685 = x8684 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8686 = x8683 + x8685;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8687 = args[2][197 * steps + ((cycle - 0) & mask)];
      assert(x8687 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8688 = x8687 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8689 = x8686 + x8688;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8690 = args[2][198 * steps + ((cycle - 0) & mask)];
      assert(x8690 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8691 = x8690 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8692 = x8689 + x8691;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8693 = args[2][199 * steps + ((cycle - 0) & mask)];
      assert(x8693 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8694 = x8693 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8695 = x8692 + x8694;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8696 = args[2][200 * steps + ((cycle - 0) & mask)];
      assert(x8696 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8697 = x8696 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8698 = x8695 + x8697;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8699 = args[2][201 * steps + ((cycle - 0) & mask)];
      assert(x8699 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8700 = x8699 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8701 = x8698 + x8700;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8702 = args[2][202 * steps + ((cycle - 0) & mask)];
      assert(x8702 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8703 = x8702 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8704 = x8701 + x8703;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8705 = args[2][203 * steps + ((cycle - 0) & mask)];
      assert(x8705 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8706 = x8705 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8707 = x8704 + x8706;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8708 = args[2][204 * steps + ((cycle - 0) & mask)];
      assert(x8708 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8709 = x8708 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8710 = x8707 + x8709;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8711 = args[2][205 * steps + ((cycle - 0) & mask)];
      assert(x8711 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8712 = x8711 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8713 = x8710 + x8712;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8714 = args[2][206 * steps + ((cycle - 0) & mask)];
      assert(x8714 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8715 = x8714 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8716 = x8713 + x8715;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8717 = x8638 - x8716;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8718 = x8717 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
        auto x8719 = Fp(x8718.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8719);
          reg = x8719;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8720 = args[2][75 * steps + ((cycle - 0) & mask)];
      assert(x8720 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
      auto x8721 = x8718 - x8720;
      // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
      auto x8722 = x8721 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
      auto x8723 = x96 - x8722;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      auto x8724 = x8722 * x8723;
      // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
      if (x8724 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
      // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
      auto x8725 = x8639 + x8718;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8726 = Fp(x8725.asUInt32() & x96.asUInt32());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8726);
          reg = x8726;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8727 = Fp(x8725.asUInt32() & x93.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8728 = x8727 * x56;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8728);
          reg = x8728;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8729 = Fp(x8725.asUInt32() & x79.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8730 = x8729 * x77;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8730);
          reg = x8730;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8731 = Fp(x8725.asUInt32() & x72.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8732 = x8731 * x57;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8732);
          reg = x8732;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8733 = Fp(x8725.asUInt32() & x64.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8734 = x8733 * x58;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8734);
          reg = x8734;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8735 = Fp(x8725.asUInt32() & x60.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8736 = x8735 * x59;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][212 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8736);
          reg = x8736;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8737 = Fp(x8725.asUInt32() & x55.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8738 = x8737 * x54;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][213 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8738);
          reg = x8738;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8739 = Fp(x8725.asUInt32() & x63.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8740 = x8739 * x62;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][214 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8740);
          reg = x8740;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8741 = Fp(x8725.asUInt32() & x91.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8742 = x8741 * x90;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][215 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8742);
          reg = x8742;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8743 = Fp(x8725.asUInt32() & x22.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8744 = x8743 * x21;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][216 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8744);
          reg = x8744;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8745 = Fp(x8725.asUInt32() & x23.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8746 = x8745 * x20;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][217 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8746);
          reg = x8746;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8747 = Fp(x8725.asUInt32() & x19.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8748 = x8747 * x18;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][218 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8748);
          reg = x8748;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8749 = Fp(x8725.asUInt32() & x17.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8750 = x8749 * x16;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][219 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8750);
          reg = x8750;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8751 = Fp(x8725.asUInt32() & x15.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8752 = x8751 * x14;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][220 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8752);
          reg = x8752;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8753 = Fp(x8725.asUInt32() & x36.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8754 = x8753 * x13;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][221 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8754);
          reg = x8754;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
        auto x8755 = Fp(x8725.asUInt32() & x12.asUInt32());
        // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
        auto x8756 = x8755 * x11;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][222 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8756);
          reg = x8756;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8757 = args[2][207 * steps + ((cycle - 0) & mask)];
      assert(x8757 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8758 = args[2][208 * steps + ((cycle - 0) & mask)];
      assert(x8758 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8759 = x8758 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8760 = x8757 + x8759;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8761 = args[2][209 * steps + ((cycle - 0) & mask)];
      assert(x8761 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8762 = x8761 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8763 = x8760 + x8762;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8764 = args[2][210 * steps + ((cycle - 0) & mask)];
      assert(x8764 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8765 = x8764 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8766 = x8763 + x8765;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8767 = args[2][211 * steps + ((cycle - 0) & mask)];
      assert(x8767 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8768 = x8767 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8769 = x8766 + x8768;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8770 = args[2][212 * steps + ((cycle - 0) & mask)];
      assert(x8770 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8771 = x8770 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8772 = x8769 + x8771;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8773 = args[2][213 * steps + ((cycle - 0) & mask)];
      assert(x8773 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8774 = x8773 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8775 = x8772 + x8774;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8776 = args[2][214 * steps + ((cycle - 0) & mask)];
      assert(x8776 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8777 = x8776 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8778 = x8775 + x8777;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8779 = args[2][215 * steps + ((cycle - 0) & mask)];
      assert(x8779 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8780 = x8779 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8781 = x8778 + x8780;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8782 = args[2][216 * steps + ((cycle - 0) & mask)];
      assert(x8782 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8783 = x8782 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8784 = x8781 + x8783;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8785 = args[2][217 * steps + ((cycle - 0) & mask)];
      assert(x8785 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8786 = x8785 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8787 = x8784 + x8786;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8788 = args[2][218 * steps + ((cycle - 0) & mask)];
      assert(x8788 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8789 = x8788 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8790 = x8787 + x8789;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8791 = args[2][219 * steps + ((cycle - 0) & mask)];
      assert(x8791 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8792 = x8791 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8793 = x8790 + x8792;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8794 = args[2][220 * steps + ((cycle - 0) & mask)];
      assert(x8794 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8795 = x8794 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8796 = x8793 + x8795;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8797 = args[2][221 * steps + ((cycle - 0) & mask)];
      assert(x8797 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8798 = x8797 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8799 = x8796 + x8798;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8800 = args[2][222 * steps + ((cycle - 0) & mask)];
      assert(x8800 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
      auto x8801 = x8800 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
      auto x8802 = x8799 + x8801;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
      auto x8803 = x8725 - x8802;
      // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
      auto x8804 = x8803 * x10;
      {
        // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
        auto x8805 = Fp(x8804.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8805);
          reg = x8805;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8806 = args[2][76 * steps + ((cycle - 0) & mask)];
      assert(x8806 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
      auto x8807 = x8804 - x8806;
      // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
      auto x8808 = x8807 * x77;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
      auto x8809 = x96 - x8808;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      auto x8810 = x8808 * x8809;
      // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
      if (x8810 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[11](Reg)"("./zirgen/components/mux.h":49:25))
    auto x8811 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x8811 != Fp::invalid());
    if (x8811 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8812 = args[2][144 * steps + ((cycle - 1) & mask)];
      assert(x8812 != Fp::invalid());
      if (x8812 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[10](Reg)"("zirgen/circuit/rv32im/sha.cpp":341:72))
        auto x8813 = args[2][110 * steps + ((cycle - 1) & mask)];
        assert(x8813 != Fp::invalid());
        if (x8813 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":344:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x7);
            reg = x7;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":345:40))
          auto x8814 = args[2][146 * steps + ((cycle - 1) & mask)];
          assert(x8814 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":345:7)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8814);
            reg = x8814;
          }
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":347:22)
        auto x8815 = x96 - x8813;
        if (x8815 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":349:7)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x78);
            reg = x78;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":350:44))
          auto x8816 = args[2][146 * steps + ((cycle - 1) & mask)];
          assert(x8816 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":350:44)
          auto x8817 = x8816 - x96;
          // loc("zirgen/circuit/rv32im/sha.cpp":350:7)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8817);
            reg = x8817;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":353:18)
      auto x8818 = x96 - x8812;
      if (x8818 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x8819 = args[2][149 * steps + ((cycle - 1) & mask)];
        assert(x8819 != Fp::invalid());
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][149 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8819);
          reg = x8819;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":356:40))
        auto x8820 = args[2][143 * steps + ((cycle - 1) & mask)];
        assert(x8820 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":356:40)
        auto x8821 = x8820 - x96;
        // loc("zirgen/circuit/rv32im/sha.cpp":356:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8821);
          reg = x8821;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":357:38))
        auto x8822 = args[2][146 * steps + ((cycle - 1) & mask)];
        assert(x8822 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":357:5)
        {
          auto& reg = args[2][146 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8822);
          reg = x8822;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8823 = args[2][143 * steps + ((cycle - 0) & mask)];
      assert(x8823 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x8824 = (x8823 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][144 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8824);
          reg = x8824;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x8825 = inv(x8823);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][145 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8825);
          reg = x8825;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8826 = args[2][144 * steps + ((cycle - 0) & mask)];
      assert(x8826 != Fp::invalid());
      if (x8826 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x8823 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x8827 = x96 - x8826;
      if (x8827 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8828 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x8828 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x8829 = x8823 * x8828;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x8830 = x8829 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x8830 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8831 = args[2][149 * steps + ((cycle - 0) & mask)];
      assert(x8831 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":361:15)
      auto x8832 = x96 - x8831;
      if (x8826 != 0) {
        if (x8832 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        if (x8831 != 0) {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
        }
      }
      if (x8827 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][150 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":371:38))
      auto x8833 = args[2][140 * steps + ((cycle - 1) & mask)];
      assert(x8833 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":371:3)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8833);
        reg = x8833;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":372:40))
      auto x8834 = args[2][139 * steps + ((cycle - 1) & mask)];
      assert(x8834 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":372:3)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8834);
        reg = x8834;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8835 = args[2][151 * steps + ((cycle - 1) & mask)];
      assert(x8835 != Fp::invalid());
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][151 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8835);
        reg = x8835;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":374:36))
      auto x8836 = args[2][152 * steps + ((cycle - 1) & mask)];
      assert(x8836 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":374:3)
      {
        auto& reg = args[2][152 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8836);
        reg = x8836;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8837 = args[2][146 * steps + ((cycle - 0) & mask)];
      assert(x8837 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x8838 = (x8837 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][147 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8838);
          reg = x8838;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x8839 = inv(x8837);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][148 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8839);
          reg = x8839;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8840 = args[2][147 * steps + ((cycle - 0) & mask)];
      assert(x8840 != Fp::invalid());
      if (x8840 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x8837 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x8841 = x96 - x8840;
      if (x8841 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x8842 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x8842 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x8843 = x8837 * x8842;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x8844 = x8843 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x8844 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x8845 = x867 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x8846 = Fp(x8845.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8846);
          reg = x8846;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x8847 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x8847 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x8848 = x8845 - x8847;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x8849 = x8848 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x8850 = Fp(x8849.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8850);
          reg = x8850;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x8851 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x8851 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x8852 = x8849 - x8851;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x8853 = x8852 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x8854 = Fp(x8853.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8854);
          reg = x8854;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x8855 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x8855 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x8856 = x8853 - x8855;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x8857 = x8856 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x8858 = Fp(x8857.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8858);
          reg = x8858;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8859 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x8859 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x8860 = x8857 - x8859;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x8861 = x8860 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8861);
        reg = x8861;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8862 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x8862 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x8863 = x96 - x8862;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x8864 = x8862 * x8863;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x8864);
        reg = x8864;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x8865 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x8865 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x8866 = x93 - x8862;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x8867 = x8865 * x8866;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x8867 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x69;
      host_args.at(1) = x8831;
      host_args.at(2) = x8823;
      host_args.at(3) = x8837;
      host(ctx, "log", "SHA_MAIN: major = %u, minor = %u, count = %u, repeat = %u", host_args.data(), 4, host_outs.data(), 0);
      if (x8832 != 0) {
        // loc("zirgen/circuit/rv32im/sha.cpp":384:24)
        auto x8868 = x6 - x8823;
        {
          host_args.at(0) = x8868;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x8869 = host_outs.at(0);
          auto x8870 = host_outs.at(1);
          auto x8871 = host_outs.at(2);
          auto x8872 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8869);
            reg = x8869;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8870);
            reg = x8870;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8871);
            reg = x8871;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x8872);
            reg = x8872;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x8873 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x8873 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x8874 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x8874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x8875 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x8875 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x8876 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x8876 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8868);
          reg = x8868;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8873);
          reg = x8873;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8874);
          reg = x8874;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8875);
          reg = x8875;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x8876);
          reg = x8876;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8877 = args[2][79 * steps + ((cycle - 2) & mask)];
      assert(x8877 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8878 = args[2][80 * steps + ((cycle - 2) & mask)];
      assert(x8878 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8879 = args[2][81 * steps + ((cycle - 2) & mask)];
      assert(x8879 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8880 = args[2][82 * steps + ((cycle - 2) & mask)];
      assert(x8880 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8881 = args[2][83 * steps + ((cycle - 2) & mask)];
      assert(x8881 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8882 = args[2][84 * steps + ((cycle - 2) & mask)];
      assert(x8882 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8883 = args[2][85 * steps + ((cycle - 2) & mask)];
      assert(x8883 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8884 = args[2][86 * steps + ((cycle - 2) & mask)];
      assert(x8884 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8885 = args[2][87 * steps + ((cycle - 2) & mask)];
      assert(x8885 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8886 = args[2][88 * steps + ((cycle - 2) & mask)];
      assert(x8886 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8887 = args[2][12 * steps + ((cycle - 2) & mask)];
      assert(x8887 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8888 = args[2][13 * steps + ((cycle - 2) & mask)];
      assert(x8888 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8889 = args[2][14 * steps + ((cycle - 2) & mask)];
      assert(x8889 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8890 = args[2][15 * steps + ((cycle - 2) & mask)];
      assert(x8890 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8891 = args[2][16 * steps + ((cycle - 2) & mask)];
      assert(x8891 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8892 = args[2][17 * steps + ((cycle - 2) & mask)];
      assert(x8892 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8893 = args[2][18 * steps + ((cycle - 2) & mask)];
      assert(x8893 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8894 = args[2][19 * steps + ((cycle - 2) & mask)];
      assert(x8894 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8895 = args[2][20 * steps + ((cycle - 2) & mask)];
      assert(x8895 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8896 = args[2][21 * steps + ((cycle - 2) & mask)];
      assert(x8896 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8897 = args[2][22 * steps + ((cycle - 2) & mask)];
      assert(x8897 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8898 = args[2][23 * steps + ((cycle - 2) & mask)];
      assert(x8898 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8899 = args[2][24 * steps + ((cycle - 2) & mask)];
      assert(x8899 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8900 = args[2][25 * steps + ((cycle - 2) & mask)];
      assert(x8900 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8901 = args[2][26 * steps + ((cycle - 2) & mask)];
      assert(x8901 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8902 = args[2][27 * steps + ((cycle - 2) & mask)];
      assert(x8902 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8903 = args[2][28 * steps + ((cycle - 2) & mask)];
      assert(x8903 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8904 = args[2][29 * steps + ((cycle - 2) & mask)];
      assert(x8904 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8905 = args[2][30 * steps + ((cycle - 2) & mask)];
      assert(x8905 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8906 = args[2][31 * steps + ((cycle - 2) & mask)];
      assert(x8906 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8907 = args[2][32 * steps + ((cycle - 2) & mask)];
      assert(x8907 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8908 = args[2][33 * steps + ((cycle - 2) & mask)];
      assert(x8908 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8909 = args[2][79 * steps + ((cycle - 7) & mask)];
      assert(x8909 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8910 = args[2][80 * steps + ((cycle - 7) & mask)];
      assert(x8910 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8911 = args[2][81 * steps + ((cycle - 7) & mask)];
      assert(x8911 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8912 = args[2][82 * steps + ((cycle - 7) & mask)];
      assert(x8912 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8913 = args[2][83 * steps + ((cycle - 7) & mask)];
      assert(x8913 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8914 = args[2][84 * steps + ((cycle - 7) & mask)];
      assert(x8914 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8915 = args[2][85 * steps + ((cycle - 7) & mask)];
      assert(x8915 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8916 = args[2][86 * steps + ((cycle - 7) & mask)];
      assert(x8916 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8917 = args[2][87 * steps + ((cycle - 7) & mask)];
      assert(x8917 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8918 = args[2][88 * steps + ((cycle - 7) & mask)];
      assert(x8918 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8919 = args[2][12 * steps + ((cycle - 7) & mask)];
      assert(x8919 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8920 = args[2][13 * steps + ((cycle - 7) & mask)];
      assert(x8920 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8921 = args[2][14 * steps + ((cycle - 7) & mask)];
      assert(x8921 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8922 = args[2][15 * steps + ((cycle - 7) & mask)];
      assert(x8922 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8923 = args[2][16 * steps + ((cycle - 7) & mask)];
      assert(x8923 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8924 = args[2][17 * steps + ((cycle - 7) & mask)];
      assert(x8924 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8925 = args[2][18 * steps + ((cycle - 7) & mask)];
      assert(x8925 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8926 = args[2][19 * steps + ((cycle - 7) & mask)];
      assert(x8926 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8927 = args[2][20 * steps + ((cycle - 7) & mask)];
      assert(x8927 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8928 = args[2][21 * steps + ((cycle - 7) & mask)];
      assert(x8928 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8929 = args[2][22 * steps + ((cycle - 7) & mask)];
      assert(x8929 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8930 = args[2][23 * steps + ((cycle - 7) & mask)];
      assert(x8930 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8931 = args[2][24 * steps + ((cycle - 7) & mask)];
      assert(x8931 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8932 = args[2][25 * steps + ((cycle - 7) & mask)];
      assert(x8932 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8933 = args[2][26 * steps + ((cycle - 7) & mask)];
      assert(x8933 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8934 = args[2][27 * steps + ((cycle - 7) & mask)];
      assert(x8934 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8935 = args[2][28 * steps + ((cycle - 7) & mask)];
      assert(x8935 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8936 = args[2][29 * steps + ((cycle - 7) & mask)];
      assert(x8936 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8937 = args[2][30 * steps + ((cycle - 7) & mask)];
      assert(x8937 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8938 = args[2][31 * steps + ((cycle - 7) & mask)];
      assert(x8938 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8939 = args[2][32 * steps + ((cycle - 7) & mask)];
      assert(x8939 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8940 = args[2][33 * steps + ((cycle - 7) & mask)];
      assert(x8940 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8941 = args[2][79 * steps + ((cycle - 15) & mask)];
      assert(x8941 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8942 = args[2][80 * steps + ((cycle - 15) & mask)];
      assert(x8942 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8943 = args[2][81 * steps + ((cycle - 15) & mask)];
      assert(x8943 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8944 = args[2][82 * steps + ((cycle - 15) & mask)];
      assert(x8944 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8945 = args[2][83 * steps + ((cycle - 15) & mask)];
      assert(x8945 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8946 = args[2][84 * steps + ((cycle - 15) & mask)];
      assert(x8946 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8947 = args[2][85 * steps + ((cycle - 15) & mask)];
      assert(x8947 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8948 = args[2][86 * steps + ((cycle - 15) & mask)];
      assert(x8948 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8949 = args[2][87 * steps + ((cycle - 15) & mask)];
      assert(x8949 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8950 = args[2][88 * steps + ((cycle - 15) & mask)];
      assert(x8950 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8951 = args[2][12 * steps + ((cycle - 15) & mask)];
      assert(x8951 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8952 = args[2][13 * steps + ((cycle - 15) & mask)];
      assert(x8952 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8953 = args[2][14 * steps + ((cycle - 15) & mask)];
      assert(x8953 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8954 = args[2][15 * steps + ((cycle - 15) & mask)];
      assert(x8954 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8955 = args[2][16 * steps + ((cycle - 15) & mask)];
      assert(x8955 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8956 = args[2][17 * steps + ((cycle - 15) & mask)];
      assert(x8956 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8957 = args[2][18 * steps + ((cycle - 15) & mask)];
      assert(x8957 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8958 = args[2][19 * steps + ((cycle - 15) & mask)];
      assert(x8958 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8959 = args[2][20 * steps + ((cycle - 15) & mask)];
      assert(x8959 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8960 = args[2][21 * steps + ((cycle - 15) & mask)];
      assert(x8960 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8961 = args[2][22 * steps + ((cycle - 15) & mask)];
      assert(x8961 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8962 = args[2][23 * steps + ((cycle - 15) & mask)];
      assert(x8962 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8963 = args[2][24 * steps + ((cycle - 15) & mask)];
      assert(x8963 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8964 = args[2][25 * steps + ((cycle - 15) & mask)];
      assert(x8964 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8965 = args[2][26 * steps + ((cycle - 15) & mask)];
      assert(x8965 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8966 = args[2][27 * steps + ((cycle - 15) & mask)];
      assert(x8966 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8967 = args[2][28 * steps + ((cycle - 15) & mask)];
      assert(x8967 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8968 = args[2][29 * steps + ((cycle - 15) & mask)];
      assert(x8968 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8969 = args[2][30 * steps + ((cycle - 15) & mask)];
      assert(x8969 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8970 = args[2][31 * steps + ((cycle - 15) & mask)];
      assert(x8970 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8971 = args[2][32 * steps + ((cycle - 15) & mask)];
      assert(x8971 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8972 = args[2][33 * steps + ((cycle - 15) & mask)];
      assert(x8972 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8973 = args[2][79 * steps + ((cycle - 16) & mask)];
      assert(x8973 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8974 = args[2][80 * steps + ((cycle - 16) & mask)];
      assert(x8974 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8975 = args[2][81 * steps + ((cycle - 16) & mask)];
      assert(x8975 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8976 = args[2][82 * steps + ((cycle - 16) & mask)];
      assert(x8976 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8977 = args[2][83 * steps + ((cycle - 16) & mask)];
      assert(x8977 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8978 = args[2][84 * steps + ((cycle - 16) & mask)];
      assert(x8978 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8979 = args[2][85 * steps + ((cycle - 16) & mask)];
      assert(x8979 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8980 = args[2][86 * steps + ((cycle - 16) & mask)];
      assert(x8980 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8981 = args[2][87 * steps + ((cycle - 16) & mask)];
      assert(x8981 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8982 = args[2][88 * steps + ((cycle - 16) & mask)];
      assert(x8982 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8983 = args[2][12 * steps + ((cycle - 16) & mask)];
      assert(x8983 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8984 = args[2][13 * steps + ((cycle - 16) & mask)];
      assert(x8984 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8985 = args[2][14 * steps + ((cycle - 16) & mask)];
      assert(x8985 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8986 = args[2][15 * steps + ((cycle - 16) & mask)];
      assert(x8986 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8987 = args[2][16 * steps + ((cycle - 16) & mask)];
      assert(x8987 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8988 = args[2][17 * steps + ((cycle - 16) & mask)];
      assert(x8988 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8989 = args[2][18 * steps + ((cycle - 16) & mask)];
      assert(x8989 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8990 = args[2][19 * steps + ((cycle - 16) & mask)];
      assert(x8990 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8991 = args[2][20 * steps + ((cycle - 16) & mask)];
      assert(x8991 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8992 = args[2][21 * steps + ((cycle - 16) & mask)];
      assert(x8992 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8993 = args[2][22 * steps + ((cycle - 16) & mask)];
      assert(x8993 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8994 = args[2][23 * steps + ((cycle - 16) & mask)];
      assert(x8994 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8995 = args[2][24 * steps + ((cycle - 16) & mask)];
      assert(x8995 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8996 = args[2][25 * steps + ((cycle - 16) & mask)];
      assert(x8996 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8997 = args[2][26 * steps + ((cycle - 16) & mask)];
      assert(x8997 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8998 = args[2][27 * steps + ((cycle - 16) & mask)];
      assert(x8998 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x8999 = args[2][28 * steps + ((cycle - 16) & mask)];
      assert(x8999 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9000 = args[2][29 * steps + ((cycle - 16) & mask)];
      assert(x9000 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9001 = args[2][30 * steps + ((cycle - 16) & mask)];
      assert(x9001 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9002 = args[2][31 * steps + ((cycle - 16) & mask)];
      assert(x9002 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9003 = args[2][32 * steps + ((cycle - 16) & mask)];
      assert(x9003 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x9004 = args[2][33 * steps + ((cycle - 16) & mask)];
      assert(x9004 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9005 = x8959 + x8944;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9006 = x8959 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9007 = x9006 * x8944;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9008 = x9005 - x9007;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9009 = x8960 + x8945;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9010 = x8960 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9011 = x9010 * x8945;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9012 = x9009 - x9011;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9013 = x8961 + x8946;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9014 = x8961 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9015 = x9014 * x8946;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9016 = x9013 - x9015;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9017 = x8962 + x8947;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9018 = x8962 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9019 = x9018 * x8947;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9020 = x9017 - x9019;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9021 = x8963 + x8948;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9022 = x8963 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9023 = x9022 * x8948;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9024 = x9021 - x9023;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9025 = x8964 + x8949;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9026 = x8964 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9027 = x9026 * x8949;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9028 = x9025 - x9027;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9029 = x8965 + x8950;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9030 = x8965 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9031 = x9030 * x8950;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9032 = x9029 - x9031;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9033 = x8966 + x8951;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9034 = x8966 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9035 = x9034 * x8951;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9036 = x9033 - x9035;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9037 = x8967 + x8952;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9038 = x8967 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9039 = x9038 * x8952;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9040 = x9037 - x9039;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9041 = x8968 + x8953;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9042 = x8968 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9043 = x9042 * x8953;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9044 = x9041 - x9043;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9045 = x8969 + x8954;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9046 = x8969 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9047 = x9046 * x8954;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9048 = x9045 - x9047;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9049 = x8970 + x8955;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9050 = x8970 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9051 = x9050 * x8955;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9052 = x9049 - x9051;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9053 = x8971 + x8956;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9054 = x8971 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9055 = x9054 * x8956;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9056 = x9053 - x9055;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9057 = x8972 + x8957;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9058 = x8972 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9059 = x9058 * x8957;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9060 = x9057 - x9059;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9061 = x8941 + x8958;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9062 = x8941 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9063 = x9062 * x8958;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9064 = x9061 - x9063;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9065 = x8942 + x8959;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9066 = x8942 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9067 = x9066 * x8959;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9068 = x9065 - x9067;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9069 = x8943 + x8960;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9070 = x8943 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9071 = x9070 * x8960;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9072 = x9069 - x9071;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9073 = x8944 + x8961;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9074 = x8944 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9075 = x9074 * x8961;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9076 = x9073 - x9075;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9077 = x8945 + x8962;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9078 = x8945 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9079 = x9078 * x8962;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9080 = x9077 - x9079;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9081 = x8946 + x8963;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9082 = x8946 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9083 = x9082 * x8963;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9084 = x9081 - x9083;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9085 = x8947 + x8964;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9086 = x8947 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9087 = x9086 * x8964;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9088 = x9085 - x9087;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9089 = x8948 + x8965;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9090 = x8948 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9091 = x9090 * x8965;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9092 = x9089 - x9091;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9093 = x8949 + x8966;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9094 = x8949 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9095 = x9094 * x8966;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9096 = x9093 - x9095;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9097 = x8950 + x8967;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9098 = x8950 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9099 = x9098 * x8967;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9100 = x9097 - x9099;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9101 = x8951 + x8968;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9102 = x8951 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9103 = x9102 * x8968;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9104 = x9101 - x9103;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9105 = x8952 + x8969;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9106 = x8952 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9107 = x9106 * x8969;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9108 = x9105 - x9107;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9109 = x8953 + x8970;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9110 = x8953 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9111 = x9110 * x8970;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9112 = x9109 - x9111;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9113 = x8954 + x8971;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9114 = x8954 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9115 = x9114 * x8971;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9116 = x9113 - x9115;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9117 = x8955 + x8972;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9118 = x8955 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9119 = x9118 * x8972;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9120 = x9117 - x9119;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9121 = x8948 + x9008;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9122 = x9090 * x9008;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9123 = x9121 - x9122;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9124 = x8949 + x9012;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9125 = x9094 * x9012;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9126 = x9124 - x9125;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9127 = x8950 + x9016;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9128 = x9098 * x9016;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9129 = x9127 - x9128;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9130 = x8951 + x9020;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9131 = x9102 * x9020;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9132 = x9130 - x9131;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9133 = x8952 + x9024;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9134 = x9106 * x9024;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9135 = x9133 - x9134;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9136 = x8953 + x9028;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9137 = x9110 * x9028;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9138 = x9136 - x9137;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9139 = x8954 + x9032;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9140 = x9114 * x9032;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9141 = x9139 - x9140;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9142 = x8955 + x9036;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9143 = x9118 * x9036;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9144 = x9142 - x9143;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9145 = x8956 + x9040;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9146 = x8956 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9147 = x9146 * x9040;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9148 = x9145 - x9147;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9149 = x8957 + x9044;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9150 = x8957 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9151 = x9150 * x9044;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9152 = x9149 - x9151;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9153 = x8958 + x9048;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9154 = x8958 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9155 = x9154 * x9048;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9156 = x9153 - x9155;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9157 = x8959 + x9052;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9158 = x9006 * x9052;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9159 = x9157 - x9158;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9160 = x8960 + x9056;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9161 = x9010 * x9056;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9162 = x9160 - x9161;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9163 = x8961 + x9060;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9164 = x9014 * x9060;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9165 = x9163 - x9164;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9166 = x8962 + x9064;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9167 = x9018 * x9064;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9168 = x9166 - x9167;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9169 = x8963 + x9068;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9170 = x9022 * x9068;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9171 = x9169 - x9170;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9172 = x8964 + x9072;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9173 = x9026 * x9072;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9174 = x9172 - x9173;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9175 = x8965 + x9076;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9176 = x9030 * x9076;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9177 = x9175 - x9176;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9178 = x8966 + x9080;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9179 = x9034 * x9080;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9180 = x9178 - x9179;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9181 = x8967 + x9084;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9182 = x9038 * x9084;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9183 = x9181 - x9182;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9184 = x8968 + x9088;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9185 = x9042 * x9088;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9186 = x9184 - x9185;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9187 = x8969 + x9092;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9188 = x9046 * x9092;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9189 = x9187 - x9188;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9190 = x8970 + x9096;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9191 = x9050 * x9096;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9192 = x9190 - x9191;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9193 = x8971 + x9100;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9194 = x9054 * x9100;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9195 = x9193 - x9194;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9196 = x8972 + x9104;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9197 = x9058 * x9104;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9198 = x9196 - x9197;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9199 = x8941 + x9108;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9200 = x9062 * x9108;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9201 = x9199 - x9200;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9202 = x8942 + x9112;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9203 = x9066 * x9112;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9204 = x9202 - x9203;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9205 = x8943 + x9116;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9206 = x9070 * x9116;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9207 = x9205 - x9206;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9208 = x8944 + x9120;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9209 = x9074 * x9120;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9210 = x9208 - x9209;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9211 = x8945 + x8956;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9212 = x9078 * x8956;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9213 = x9211 - x9212;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9214 = x8946 + x8957;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9215 = x9082 * x8957;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9216 = x9214 - x9215;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9217 = x8947 + x8958;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9218 = x9086 * x8958;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9219 = x9217 - x9218;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9220 = x8896 + x8887;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9221 = x8896 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9222 = x9221 * x8887;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9223 = x9220 - x9222;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9224 = x8897 + x8888;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9225 = x8897 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9226 = x9225 * x8888;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9227 = x9224 - x9226;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9228 = x8898 + x8889;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9229 = x8898 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9230 = x9229 * x8889;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9231 = x9228 - x9230;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9232 = x8899 + x8890;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9233 = x8899 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9234 = x9233 * x8890;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9235 = x9232 - x9234;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9236 = x8900 + x8891;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9237 = x8900 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9238 = x9237 * x8891;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9239 = x9236 - x9238;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9240 = x8901 + x8892;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9241 = x8901 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9242 = x9241 * x8892;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9243 = x9240 - x9242;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9244 = x8902 + x8893;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9245 = x8902 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9246 = x9245 * x8893;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9247 = x9244 - x9246;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9248 = x8903 + x8894;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9249 = x8903 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9250 = x9249 * x8894;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9251 = x9248 - x9250;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9252 = x8904 + x8895;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9253 = x8904 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9254 = x9253 * x8895;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9255 = x9252 - x9254;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9256 = x8905 + x8896;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9257 = x8905 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9258 = x9257 * x8896;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9259 = x9256 - x9258;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9260 = x8906 + x8897;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9261 = x8906 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9262 = x9261 * x8897;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9263 = x9260 - x9262;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9264 = x8907 + x8898;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9265 = x8907 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9266 = x9265 * x8898;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9267 = x9264 - x9266;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9268 = x8908 + x8899;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9269 = x8908 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9270 = x9269 * x8899;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9271 = x9268 - x9270;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9272 = x8877 + x8900;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9273 = x8877 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9274 = x9273 * x8900;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9275 = x9272 - x9274;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9276 = x8878 + x8901;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9277 = x8878 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9278 = x9277 * x8901;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9279 = x9276 - x9278;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9280 = x8879 + x8902;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9281 = x8879 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9282 = x9281 * x8902;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9283 = x9280 - x9282;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9284 = x8880 + x8903;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9285 = x8880 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9286 = x9285 * x8903;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9287 = x9284 - x9286;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9288 = x8881 + x8904;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9289 = x8881 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9290 = x9289 * x8904;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9291 = x9288 - x9290;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9292 = x8882 + x8905;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9293 = x8882 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9294 = x9293 * x8905;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9295 = x9292 - x9294;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9296 = x8883 + x8906;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9297 = x8883 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9298 = x9297 * x8906;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9299 = x9296 - x9298;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9300 = x8884 + x8907;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9301 = x8884 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9302 = x9301 * x8907;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9303 = x9300 - x9302;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9304 = x8885 + x8908;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9305 = x8885 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9306 = x9305 * x8908;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9307 = x9304 - x9306;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9308 = x8894 + x9223;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9309 = x8894 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9310 = x9309 * x9223;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9311 = x9308 - x9310;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9312 = x8895 + x9227;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9313 = x8895 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9314 = x9313 * x9227;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9315 = x9312 - x9314;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9316 = x8896 + x9231;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9317 = x9221 * x9231;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9318 = x9316 - x9317;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9319 = x8897 + x9235;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9320 = x9225 * x9235;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9321 = x9319 - x9320;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9322 = x8898 + x9239;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9323 = x9229 * x9239;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9324 = x9322 - x9323;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9325 = x8899 + x9243;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9326 = x9233 * x9243;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9327 = x9325 - x9326;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9328 = x8900 + x9247;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9329 = x9237 * x9247;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9330 = x9328 - x9329;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9331 = x8901 + x9251;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9332 = x9241 * x9251;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9333 = x9331 - x9332;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9334 = x8902 + x9255;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9335 = x9245 * x9255;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9336 = x9334 - x9335;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9337 = x8903 + x9259;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9338 = x9249 * x9259;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9339 = x9337 - x9338;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9340 = x8904 + x9263;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9341 = x9253 * x9263;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9342 = x9340 - x9341;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9343 = x8905 + x9267;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9344 = x9257 * x9267;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9345 = x9343 - x9344;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9346 = x8906 + x9271;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9347 = x9261 * x9271;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9348 = x9346 - x9347;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9349 = x8907 + x9275;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9350 = x9265 * x9275;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9351 = x9349 - x9350;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9352 = x8908 + x9279;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9353 = x9269 * x9279;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9354 = x9352 - x9353;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9355 = x8877 + x9283;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9356 = x9273 * x9283;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9357 = x9355 - x9356;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9358 = x8878 + x9287;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9359 = x9277 * x9287;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9360 = x9358 - x9359;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9361 = x8879 + x9291;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9362 = x9281 * x9291;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9363 = x9361 - x9362;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9364 = x8880 + x9295;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9365 = x9285 * x9295;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9366 = x9364 - x9365;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9367 = x8881 + x9299;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9368 = x9289 * x9299;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9369 = x9367 - x9368;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9370 = x8882 + x9303;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9371 = x9293 * x9303;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9372 = x9370 - x9371;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9373 = x8883 + x9307;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9374 = x9297 * x9307;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9375 = x9373 - x9374;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9376 = x8884 + x8886;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9377 = x9301 * x8886;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9378 = x9376 - x9377;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9379 = x8885 + x8887;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9380 = x9305 * x8887;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9381 = x9379 - x9380;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9382 = x8886 + x8888;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9383 = x8886 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9384 = x9383 * x8888;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9385 = x9382 - x9384;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9386 = x8887 + x8889;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9387 = x8887 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9388 = x9387 * x8889;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9389 = x9386 - x9388;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9390 = x8888 + x8890;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9391 = x8888 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9392 = x9391 * x8890;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9393 = x9390 - x9392;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9394 = x8889 + x8891;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9395 = x8889 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9396 = x9395 * x8891;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9397 = x9394 - x9396;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9398 = x8890 + x8892;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9399 = x8890 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9400 = x9399 * x8892;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9401 = x9398 - x9400;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9402 = x8891 + x8893;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9403 = x8891 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9404 = x9403 * x8893;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9405 = x9402 - x9404;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9406 = x8892 + x8894;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9407 = x8892 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9408 = x9407 * x8894;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9409 = x9406 - x9408;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9410 = x8893 + x8895;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9411 = x8893 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x9412 = x9411 * x8895;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x9413 = x9410 - x9412;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9414 = x8974 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9415 = x8973 + x9414;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9416 = x8975 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9417 = x9415 + x9416;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9418 = x8976 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9419 = x9417 + x9418;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9420 = x8977 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9421 = x9419 + x9420;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9422 = x8978 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9423 = x9421 + x9422;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9424 = x8979 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9425 = x9423 + x9424;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9426 = x8980 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9427 = x9425 + x9426;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9428 = x8981 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9429 = x9427 + x9428;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9430 = x8982 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9431 = x9429 + x9430;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9432 = x8983 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9433 = x9431 + x9432;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9434 = x8984 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9435 = x9433 + x9434;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9436 = x8985 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9437 = x9435 + x9436;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9438 = x8986 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9439 = x9437 + x9438;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9440 = x8987 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9441 = x9439 + x9440;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9442 = x8988 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9443 = x9441 + x9442;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9444 = x8990 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9445 = x8989 + x9444;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9446 = x8991 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9447 = x9445 + x9446;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9448 = x8992 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9449 = x9447 + x9448;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9450 = x8993 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9451 = x9449 + x9450;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9452 = x8994 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9453 = x9451 + x9452;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9454 = x8995 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9455 = x9453 + x9454;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9456 = x8996 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9457 = x9455 + x9456;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9458 = x8997 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9459 = x9457 + x9458;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9460 = x8998 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9461 = x9459 + x9460;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9462 = x8999 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9463 = x9461 + x9462;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9464 = x9000 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9465 = x9463 + x9464;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9466 = x9001 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9467 = x9465 + x9466;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9468 = x9002 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9469 = x9467 + x9468;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9470 = x9003 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9471 = x9469 + x9470;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9472 = x9004 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9473 = x9471 + x9472;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9474 = x9126 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9475 = x9123 + x9474;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9476 = x9129 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9477 = x9475 + x9476;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9478 = x9132 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9479 = x9477 + x9478;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9480 = x9135 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9481 = x9479 + x9480;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9482 = x9138 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9483 = x9481 + x9482;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9484 = x9141 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9485 = x9483 + x9484;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9486 = x9144 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9487 = x9485 + x9486;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9488 = x9148 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9489 = x9487 + x9488;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9490 = x9152 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9491 = x9489 + x9490;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9492 = x9156 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9493 = x9491 + x9492;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9494 = x9159 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9495 = x9493 + x9494;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9496 = x9162 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9497 = x9495 + x9496;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9498 = x9165 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9499 = x9497 + x9498;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9500 = x9168 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9501 = x9499 + x9500;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9502 = x9171 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9503 = x9501 + x9502;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9504 = x9177 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9505 = x9174 + x9504;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9506 = x9180 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9507 = x9505 + x9506;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9508 = x9183 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9509 = x9507 + x9508;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9510 = x9186 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9511 = x9509 + x9510;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9512 = x9189 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9513 = x9511 + x9512;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9514 = x9192 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9515 = x9513 + x9514;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9516 = x9195 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9517 = x9515 + x9516;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9518 = x9198 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9519 = x9517 + x9518;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9520 = x9201 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9521 = x9519 + x9520;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9522 = x9204 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9523 = x9521 + x9522;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9524 = x9207 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9525 = x9523 + x9524;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9526 = x9210 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9527 = x9525 + x9526;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9528 = x9213 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9529 = x9527 + x9528;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9530 = x9216 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9531 = x9529 + x9530;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9532 = x9219 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9533 = x9531 + x9532;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9534 = x8910 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9535 = x8909 + x9534;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9536 = x8911 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9537 = x9535 + x9536;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9538 = x8912 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9539 = x9537 + x9538;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9540 = x8913 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9541 = x9539 + x9540;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9542 = x8914 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9543 = x9541 + x9542;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9544 = x8915 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9545 = x9543 + x9544;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9546 = x8916 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9547 = x9545 + x9546;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9548 = x8917 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9549 = x9547 + x9548;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9550 = x8918 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9551 = x9549 + x9550;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9552 = x8919 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9553 = x9551 + x9552;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9554 = x8920 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9555 = x9553 + x9554;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9556 = x8921 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9557 = x9555 + x9556;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9558 = x8922 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9559 = x9557 + x9558;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9560 = x8923 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9561 = x9559 + x9560;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9562 = x8924 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9563 = x9561 + x9562;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9564 = x8926 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9565 = x8925 + x9564;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9566 = x8927 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9567 = x9565 + x9566;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9568 = x8928 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9569 = x9567 + x9568;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9570 = x8929 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9571 = x9569 + x9570;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9572 = x8930 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9573 = x9571 + x9572;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9574 = x8931 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9575 = x9573 + x9574;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9576 = x8932 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9577 = x9575 + x9576;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9578 = x8933 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9579 = x9577 + x9578;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9580 = x8934 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9581 = x9579 + x9580;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9582 = x8935 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9583 = x9581 + x9582;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9584 = x8936 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9585 = x9583 + x9584;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9586 = x8937 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9587 = x9585 + x9586;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9588 = x8938 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9589 = x9587 + x9588;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9590 = x8939 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9591 = x9589 + x9590;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9592 = x8940 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9593 = x9591 + x9592;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9594 = x9315 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9595 = x9311 + x9594;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9596 = x9318 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9597 = x9595 + x9596;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9598 = x9321 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9599 = x9597 + x9598;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9600 = x9324 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9601 = x9599 + x9600;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9602 = x9327 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9603 = x9601 + x9602;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9604 = x9330 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9605 = x9603 + x9604;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9606 = x9333 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9607 = x9605 + x9606;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9608 = x9336 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9609 = x9607 + x9608;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9610 = x9339 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9611 = x9609 + x9610;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9612 = x9342 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9613 = x9611 + x9612;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9614 = x9345 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9615 = x9613 + x9614;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9616 = x9348 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9617 = x9615 + x9616;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9618 = x9351 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9619 = x9617 + x9618;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9620 = x9354 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9621 = x9619 + x9620;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9622 = x9357 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9623 = x9621 + x9622;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9624 = x9363 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9625 = x9360 + x9624;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9626 = x9366 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9627 = x9625 + x9626;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9628 = x9369 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9629 = x9627 + x9628;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9630 = x9372 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9631 = x9629 + x9630;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9632 = x9375 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9633 = x9631 + x9632;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9634 = x9378 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9635 = x9633 + x9634;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9636 = x9381 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9637 = x9635 + x9636;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9638 = x9385 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9639 = x9637 + x9638;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9640 = x9389 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9641 = x9639 + x9640;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9642 = x9393 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9643 = x9641 + x9642;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9644 = x9397 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9645 = x9643 + x9644;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9646 = x9401 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9647 = x9645 + x9646;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9648 = x9405 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9649 = x9647 + x9648;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9650 = x9409 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9651 = x9649 + x9650;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x9652 = x9413 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x9653 = x9651 + x9652;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9654 = x9563 + x9623;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9655 = x9593 + x9653;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9656 = x9503 + x9654;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9657 = x9533 + x9655;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9658 = x9443 + x9656;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x9659 = x9473 + x9657;
      // loc("zirgen/circuit/rv32im/sha.cpp":460:5)
      {
        auto& reg = args[2][157 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9658);
        reg = x9658;
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":460:5)
      {
        auto& reg = args[2][158 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x9659);
        reg = x9659;
      }
      if (x8831 != 0) {
        {
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9660 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9660 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9661 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9661 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9662 = x9661 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9663 = x9660 + x9662;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9664 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9664 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9665 = x9664 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9666 = x9663 + x9665;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9667 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9667 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9668 = x9667 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9669 = x9666 + x9668;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9670 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9670 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9671 = x9670 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9672 = x9669 + x9671;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9673 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9673 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9674 = x9673 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9675 = x9672 + x9674;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9676 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9676 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9677 = x9676 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9678 = x9675 + x9677;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9679 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9679 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9680 = x9679 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9681 = x9678 + x9680;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9682 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9682 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9683 = x9682 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9684 = x9681 + x9683;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9685 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9685 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9686 = x9685 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9687 = x9684 + x9686;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9688 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9688 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9689 = x9688 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9690 = x9687 + x9689;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9691 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9691 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9692 = x9691 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9693 = x9690 + x9692;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9694 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9694 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9695 = x9694 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9696 = x9693 + x9695;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9697 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9697 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9698 = x9697 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9699 = x9696 + x9698;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9700 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9700 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9701 = x9700 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9702 = x9699 + x9701;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9703 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9703 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9704 = x9703 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9705 = x9702 + x9704;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9706 = x95 - x9705;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9707 = x9706 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9707);
          reg = x9707;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9708 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9708 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9709 = Fp(x9708.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9709);
            reg = x9709;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9710 = Fp(x9708.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9711 = x9710 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9711);
            reg = x9711;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9712 = Fp(x9708.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9713 = x9712 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9713);
            reg = x9713;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9714 = Fp(x9708.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9715 = x9714 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9715);
            reg = x9715;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9716 = Fp(x9708.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9717 = x9716 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9717);
            reg = x9717;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9718 = Fp(x9708.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9719 = x9718 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9719);
            reg = x9719;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9720 = Fp(x9708.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9721 = x9720 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9721);
            reg = x9721;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9722 = Fp(x9708.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9723 = x9722 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9723);
            reg = x9723;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9724 = Fp(x9708.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9725 = x9724 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9725);
            reg = x9725;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9726 = Fp(x9708.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9727 = x9726 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9727);
            reg = x9727;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9728 = Fp(x9708.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9729 = x9728 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9729);
            reg = x9729;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9730 = Fp(x9708.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9731 = x9730 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9731);
            reg = x9731;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9732 = Fp(x9708.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9733 = x9732 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9733);
            reg = x9733;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9734 = Fp(x9708.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9735 = x9734 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9735);
            reg = x9735;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9736 = Fp(x9708.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9737 = x9736 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9737);
            reg = x9737;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9738 = Fp(x9708.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9739 = x9738 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9739);
            reg = x9739;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9740 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x9740 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9741 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9741 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9742 = x9741 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9743 = x9740 + x9742;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9744 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9744 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9745 = x9744 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9746 = x9743 + x9745;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9747 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9747 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9748 = x9747 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9749 = x9746 + x9748;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9750 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9750 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9751 = x9750 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9752 = x9749 + x9751;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9753 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9753 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9754 = x9753 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9755 = x9752 + x9754;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9756 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9756 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9757 = x9756 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9758 = x9755 + x9757;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9759 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9759 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9760 = x9759 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9761 = x9758 + x9760;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9762 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9762 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9763 = x9762 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9764 = x9761 + x9763;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9765 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9765 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9766 = x9765 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9767 = x9764 + x9766;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9768 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9768 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9769 = x9768 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9770 = x9767 + x9769;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9771 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9771 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9772 = x9771 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9773 = x9770 + x9772;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9774 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9774 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9775 = x9774 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9776 = x9773 + x9775;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9777 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9777 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9778 = x9777 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9779 = x9776 + x9778;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9780 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9780 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9781 = x9780 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9782 = x9779 + x9781;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9783 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9783 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9784 = x9783 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9785 = x9782 + x9784;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9786 = x9708 - x9785;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9787 = x9786 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9787);
          reg = x9787;
        }
      }
      if (x8832 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:11))
        auto x9788 = args[2][157 * steps + ((cycle - 0) & mask)];
        assert(x9788 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:26))
        auto x9789 = args[2][158 * steps + ((cycle - 0) & mask)];
        assert(x9789 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9790 = Fp(x9788.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9790);
            reg = x9790;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9791 = Fp(x9788.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9792 = x9791 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9792);
            reg = x9792;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9793 = Fp(x9788.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9794 = x9793 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9794);
            reg = x9794;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9795 = Fp(x9788.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9796 = x9795 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9796);
            reg = x9796;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9797 = Fp(x9788.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9798 = x9797 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9798);
            reg = x9798;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9799 = Fp(x9788.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9800 = x9799 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9800);
            reg = x9800;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9801 = Fp(x9788.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9802 = x9801 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9802);
            reg = x9802;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9803 = Fp(x9788.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9804 = x9803 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9804);
            reg = x9804;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9805 = Fp(x9788.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9806 = x9805 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9806);
            reg = x9806;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9807 = Fp(x9788.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9808 = x9807 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9808);
            reg = x9808;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9809 = Fp(x9788.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9810 = x9809 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9810);
            reg = x9810;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9811 = Fp(x9788.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9812 = x9811 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][13 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9812);
            reg = x9812;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9813 = Fp(x9788.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9814 = x9813 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][14 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9814);
            reg = x9814;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9815 = Fp(x9788.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9816 = x9815 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][15 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9816);
            reg = x9816;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9817 = Fp(x9788.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9818 = x9817 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][16 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9818);
            reg = x9818;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9819 = Fp(x9788.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9820 = x9819 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][17 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9820);
            reg = x9820;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9821 = args[2][79 * steps + ((cycle - 0) & mask)];
        assert(x9821 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9822 = args[2][80 * steps + ((cycle - 0) & mask)];
        assert(x9822 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9823 = x9822 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9824 = x9821 + x9823;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9825 = args[2][81 * steps + ((cycle - 0) & mask)];
        assert(x9825 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9826 = x9825 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9827 = x9824 + x9826;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9828 = args[2][82 * steps + ((cycle - 0) & mask)];
        assert(x9828 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9829 = x9828 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9830 = x9827 + x9829;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9831 = args[2][83 * steps + ((cycle - 0) & mask)];
        assert(x9831 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9832 = x9831 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9833 = x9830 + x9832;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9834 = args[2][84 * steps + ((cycle - 0) & mask)];
        assert(x9834 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9835 = x9834 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9836 = x9833 + x9835;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9837 = args[2][85 * steps + ((cycle - 0) & mask)];
        assert(x9837 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9838 = x9837 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9839 = x9836 + x9838;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9840 = args[2][86 * steps + ((cycle - 0) & mask)];
        assert(x9840 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9841 = x9840 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9842 = x9839 + x9841;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9843 = args[2][87 * steps + ((cycle - 0) & mask)];
        assert(x9843 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9844 = x9843 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9845 = x9842 + x9844;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9846 = args[2][88 * steps + ((cycle - 0) & mask)];
        assert(x9846 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9847 = x9846 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9848 = x9845 + x9847;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9849 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x9849 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9850 = x9849 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9851 = x9848 + x9850;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9852 = args[2][13 * steps + ((cycle - 0) & mask)];
        assert(x9852 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9853 = x9852 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9854 = x9851 + x9853;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9855 = args[2][14 * steps + ((cycle - 0) & mask)];
        assert(x9855 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9856 = x9855 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9857 = x9854 + x9856;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9858 = args[2][15 * steps + ((cycle - 0) & mask)];
        assert(x9858 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9859 = x9858 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9860 = x9857 + x9859;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9861 = args[2][16 * steps + ((cycle - 0) & mask)];
        assert(x9861 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9862 = x9861 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9863 = x9860 + x9862;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9864 = args[2][17 * steps + ((cycle - 0) & mask)];
        assert(x9864 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9865 = x9864 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9866 = x9863 + x9865;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9867 = x9788 - x9866;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9868 = x9867 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9868);
          reg = x9868;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9869 = args[2][77 * steps + ((cycle - 0) & mask)];
        assert(x9869 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":117:30)
        auto x9870 = x9789 + x9869;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9871 = Fp(x9870.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][18 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9871);
            reg = x9871;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9872 = Fp(x9870.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9873 = x9872 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][19 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9873);
            reg = x9873;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9874 = Fp(x9870.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9875 = x9874 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][20 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9875);
            reg = x9875;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9876 = Fp(x9870.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9877 = x9876 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9877);
            reg = x9877;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9878 = Fp(x9870.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9879 = x9878 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9879);
            reg = x9879;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9880 = Fp(x9870.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9881 = x9880 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9881);
            reg = x9881;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9882 = Fp(x9870.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9883 = x9882 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9883);
            reg = x9883;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9884 = Fp(x9870.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9885 = x9884 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9885);
            reg = x9885;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9886 = Fp(x9870.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9887 = x9886 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9887);
            reg = x9887;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9888 = Fp(x9870.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9889 = x9888 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9889);
            reg = x9889;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9890 = Fp(x9870.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9891 = x9890 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9891);
            reg = x9891;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9892 = Fp(x9870.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9893 = x9892 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9893);
            reg = x9893;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9894 = Fp(x9870.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9895 = x9894 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9895);
            reg = x9895;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9896 = Fp(x9870.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9897 = x9896 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9897);
            reg = x9897;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9898 = Fp(x9870.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9899 = x9898 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9899);
            reg = x9899;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x9900 = Fp(x9870.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x9901 = x9900 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x9901);
            reg = x9901;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9902 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x9902 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9903 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x9903 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9904 = x9903 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9905 = x9902 + x9904;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9906 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x9906 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9907 = x9906 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9908 = x9905 + x9907;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9909 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x9909 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9910 = x9909 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9911 = x9908 + x9910;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9912 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x9912 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9913 = x9912 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9914 = x9911 + x9913;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9915 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x9915 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9916 = x9915 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9917 = x9914 + x9916;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9918 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x9918 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9919 = x9918 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9920 = x9917 + x9919;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9921 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x9921 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9922 = x9921 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9923 = x9920 + x9922;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9924 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x9924 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9925 = x9924 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9926 = x9923 + x9925;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9927 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x9927 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9928 = x9927 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9929 = x9926 + x9928;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9930 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x9930 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9931 = x9930 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9932 = x9929 + x9931;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9933 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x9933 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9934 = x9933 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9935 = x9932 + x9934;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9936 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x9936 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9937 = x9936 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9938 = x9935 + x9937;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9939 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x9939 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9940 = x9939 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9941 = x9938 + x9940;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9942 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x9942 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9943 = x9942 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9944 = x9941 + x9943;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9945 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x9945 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x9946 = x9945 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x9947 = x9944 + x9946;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x9948 = x9870 - x9947;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x9949 = x9948 * x10;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x9949);
          reg = x9949;
        }
      }
      if (x8831 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9950 = args[2][159 * steps + ((cycle - 4) & mask)];
        assert(x9950 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9951 = args[2][160 * steps + ((cycle - 4) & mask)];
        assert(x9951 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9952 = args[2][161 * steps + ((cycle - 4) & mask)];
        assert(x9952 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9953 = args[2][162 * steps + ((cycle - 4) & mask)];
        assert(x9953 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9954 = args[2][163 * steps + ((cycle - 4) & mask)];
        assert(x9954 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9955 = args[2][164 * steps + ((cycle - 4) & mask)];
        assert(x9955 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9956 = args[2][165 * steps + ((cycle - 4) & mask)];
        assert(x9956 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9957 = args[2][166 * steps + ((cycle - 4) & mask)];
        assert(x9957 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9958 = args[2][167 * steps + ((cycle - 4) & mask)];
        assert(x9958 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9959 = args[2][168 * steps + ((cycle - 4) & mask)];
        assert(x9959 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9960 = args[2][169 * steps + ((cycle - 4) & mask)];
        assert(x9960 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9961 = args[2][170 * steps + ((cycle - 4) & mask)];
        assert(x9961 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9962 = args[2][171 * steps + ((cycle - 4) & mask)];
        assert(x9962 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9963 = args[2][172 * steps + ((cycle - 4) & mask)];
        assert(x9963 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9964 = args[2][173 * steps + ((cycle - 4) & mask)];
        assert(x9964 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9965 = args[2][174 * steps + ((cycle - 4) & mask)];
        assert(x9965 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9966 = args[2][175 * steps + ((cycle - 4) & mask)];
        assert(x9966 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9967 = args[2][176 * steps + ((cycle - 4) & mask)];
        assert(x9967 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9968 = args[2][177 * steps + ((cycle - 4) & mask)];
        assert(x9968 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9969 = args[2][178 * steps + ((cycle - 4) & mask)];
        assert(x9969 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9970 = args[2][179 * steps + ((cycle - 4) & mask)];
        assert(x9970 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9971 = args[2][180 * steps + ((cycle - 4) & mask)];
        assert(x9971 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9972 = args[2][181 * steps + ((cycle - 4) & mask)];
        assert(x9972 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9973 = args[2][182 * steps + ((cycle - 4) & mask)];
        assert(x9973 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9974 = args[2][183 * steps + ((cycle - 4) & mask)];
        assert(x9974 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9975 = args[2][184 * steps + ((cycle - 4) & mask)];
        assert(x9975 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9976 = args[2][185 * steps + ((cycle - 4) & mask)];
        assert(x9976 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9977 = args[2][186 * steps + ((cycle - 4) & mask)];
        assert(x9977 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9978 = args[2][187 * steps + ((cycle - 4) & mask)];
        assert(x9978 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9979 = args[2][188 * steps + ((cycle - 4) & mask)];
        assert(x9979 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9980 = args[2][189 * steps + ((cycle - 4) & mask)];
        assert(x9980 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x9981 = args[2][190 * steps + ((cycle - 4) & mask)];
        assert(x9981 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9982 = x9951 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9983 = x9950 + x9982;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9984 = x9952 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9985 = x9983 + x9984;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9986 = x9953 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9987 = x9985 + x9986;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9988 = x9954 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9989 = x9987 + x9988;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9990 = x9955 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9991 = x9989 + x9990;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9992 = x9956 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9993 = x9991 + x9992;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9994 = x9957 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9995 = x9993 + x9994;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9996 = x9958 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9997 = x9995 + x9996;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x9998 = x9959 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x9999 = x9997 + x9998;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10000 = x9960 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10001 = x9999 + x10000;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10002 = x9961 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10003 = x10001 + x10002;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10004 = x9962 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10005 = x10003 + x10004;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10006 = x9963 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10007 = x10005 + x10006;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10008 = x9964 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10009 = x10007 + x10008;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10010 = x9965 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10011 = x10009 + x10010;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10012 = x9967 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10013 = x9966 + x10012;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10014 = x9968 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10015 = x10013 + x10014;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10016 = x9969 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10017 = x10015 + x10016;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10018 = x9970 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10019 = x10017 + x10018;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10020 = x9971 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10021 = x10019 + x10020;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10022 = x9972 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10023 = x10021 + x10022;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10024 = x9973 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10025 = x10023 + x10024;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10026 = x9974 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10027 = x10025 + x10026;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10028 = x9975 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10029 = x10027 + x10028;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10030 = x9976 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10031 = x10029 + x10030;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10032 = x9977 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10033 = x10031 + x10032;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10034 = x9978 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10035 = x10033 + x10034;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10036 = x9979 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10037 = x10035 + x10036;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10038 = x9980 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10039 = x10037 + x10038;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10040 = x9981 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10041 = x10039 + x10040;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10042 = args[2][159 * steps + ((cycle - 68) & mask)];
        assert(x10042 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10043 = args[2][160 * steps + ((cycle - 68) & mask)];
        assert(x10043 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10044 = args[2][161 * steps + ((cycle - 68) & mask)];
        assert(x10044 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10045 = args[2][162 * steps + ((cycle - 68) & mask)];
        assert(x10045 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10046 = args[2][163 * steps + ((cycle - 68) & mask)];
        assert(x10046 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10047 = args[2][164 * steps + ((cycle - 68) & mask)];
        assert(x10047 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10048 = args[2][165 * steps + ((cycle - 68) & mask)];
        assert(x10048 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10049 = args[2][166 * steps + ((cycle - 68) & mask)];
        assert(x10049 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10050 = args[2][167 * steps + ((cycle - 68) & mask)];
        assert(x10050 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10051 = args[2][168 * steps + ((cycle - 68) & mask)];
        assert(x10051 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10052 = args[2][169 * steps + ((cycle - 68) & mask)];
        assert(x10052 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10053 = args[2][170 * steps + ((cycle - 68) & mask)];
        assert(x10053 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10054 = args[2][171 * steps + ((cycle - 68) & mask)];
        assert(x10054 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10055 = args[2][172 * steps + ((cycle - 68) & mask)];
        assert(x10055 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10056 = args[2][173 * steps + ((cycle - 68) & mask)];
        assert(x10056 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10057 = args[2][174 * steps + ((cycle - 68) & mask)];
        assert(x10057 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10058 = args[2][175 * steps + ((cycle - 68) & mask)];
        assert(x10058 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10059 = args[2][176 * steps + ((cycle - 68) & mask)];
        assert(x10059 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10060 = args[2][177 * steps + ((cycle - 68) & mask)];
        assert(x10060 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10061 = args[2][178 * steps + ((cycle - 68) & mask)];
        assert(x10061 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10062 = args[2][179 * steps + ((cycle - 68) & mask)];
        assert(x10062 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10063 = args[2][180 * steps + ((cycle - 68) & mask)];
        assert(x10063 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10064 = args[2][181 * steps + ((cycle - 68) & mask)];
        assert(x10064 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10065 = args[2][182 * steps + ((cycle - 68) & mask)];
        assert(x10065 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10066 = args[2][183 * steps + ((cycle - 68) & mask)];
        assert(x10066 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10067 = args[2][184 * steps + ((cycle - 68) & mask)];
        assert(x10067 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10068 = args[2][185 * steps + ((cycle - 68) & mask)];
        assert(x10068 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10069 = args[2][186 * steps + ((cycle - 68) & mask)];
        assert(x10069 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10070 = args[2][187 * steps + ((cycle - 68) & mask)];
        assert(x10070 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10071 = args[2][188 * steps + ((cycle - 68) & mask)];
        assert(x10071 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10072 = args[2][189 * steps + ((cycle - 68) & mask)];
        assert(x10072 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10073 = args[2][190 * steps + ((cycle - 68) & mask)];
        assert(x10073 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10074 = x10043 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10075 = x10042 + x10074;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10076 = x10044 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10077 = x10075 + x10076;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10078 = x10045 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10079 = x10077 + x10078;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10080 = x10046 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10081 = x10079 + x10080;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10082 = x10047 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10083 = x10081 + x10082;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10084 = x10048 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10085 = x10083 + x10084;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10086 = x10049 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10087 = x10085 + x10086;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10088 = x10050 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10089 = x10087 + x10088;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10090 = x10051 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10091 = x10089 + x10090;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10092 = x10052 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10093 = x10091 + x10092;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10094 = x10053 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10095 = x10093 + x10094;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10096 = x10054 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10097 = x10095 + x10096;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10098 = x10055 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10099 = x10097 + x10098;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10100 = x10056 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10101 = x10099 + x10100;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10102 = x10057 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10103 = x10101 + x10102;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10104 = x10059 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10105 = x10058 + x10104;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10106 = x10060 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10107 = x10105 + x10106;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10108 = x10061 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10109 = x10107 + x10108;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10110 = x10062 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10111 = x10109 + x10110;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10112 = x10063 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10113 = x10111 + x10112;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10114 = x10064 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10115 = x10113 + x10114;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10116 = x10065 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10117 = x10115 + x10116;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10118 = x10066 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10119 = x10117 + x10118;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10120 = x10067 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10121 = x10119 + x10120;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10122 = x10068 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10123 = x10121 + x10122;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10124 = x10069 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10125 = x10123 + x10124;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10126 = x10070 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10127 = x10125 + x10126;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10128 = x10071 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10129 = x10127 + x10128;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10130 = x10072 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10131 = x10129 + x10130;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10132 = x10073 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10133 = x10131 + x10132;
        // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10134 = x10011 + x10103;
        // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10135 = x10041 + x10133;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10136 = Fp(x10134.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10136);
            reg = x10136;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10137 = Fp(x10134.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10138 = x10137 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10138);
            reg = x10138;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10139 = Fp(x10134.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10140 = x10139 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10140);
            reg = x10140;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10141 = Fp(x10134.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10142 = x10141 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10142);
            reg = x10142;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10143 = Fp(x10134.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10144 = x10143 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10144);
            reg = x10144;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10145 = Fp(x10134.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10146 = x10145 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10146);
            reg = x10146;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10147 = Fp(x10134.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10148 = x10147 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10148);
            reg = x10148;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10149 = Fp(x10134.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10150 = x10149 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10150);
            reg = x10150;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10151 = Fp(x10134.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10152 = x10151 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10152);
            reg = x10152;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10153 = Fp(x10134.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10154 = x10153 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10154);
            reg = x10154;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10155 = Fp(x10134.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10156 = x10155 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10156);
            reg = x10156;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10157 = Fp(x10134.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10158 = x10157 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10158);
            reg = x10158;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10159 = Fp(x10134.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10160 = x10159 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10160);
            reg = x10160;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10161 = Fp(x10134.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10162 = x10161 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10162);
            reg = x10162;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10163 = Fp(x10134.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10164 = x10163 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10164);
            reg = x10164;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10165 = Fp(x10134.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10166 = x10165 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10166);
            reg = x10166;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10167 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x10167 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10168 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x10168 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10169 = x10168 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10170 = x10167 + x10169;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10171 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x10171 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10172 = x10171 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10173 = x10170 + x10172;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10174 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x10174 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10175 = x10174 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10176 = x10173 + x10175;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10177 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x10177 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10178 = x10177 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10179 = x10176 + x10178;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10180 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x10180 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10181 = x10180 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10182 = x10179 + x10181;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10183 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x10183 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10184 = x10183 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10185 = x10182 + x10184;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10186 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x10186 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10187 = x10186 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10188 = x10185 + x10187;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10189 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x10189 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10190 = x10189 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10191 = x10188 + x10190;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10192 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x10192 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10193 = x10192 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10194 = x10191 + x10193;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10195 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x10195 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10196 = x10195 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10197 = x10194 + x10196;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10198 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x10198 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10199 = x10198 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10200 = x10197 + x10199;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10201 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x10201 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10202 = x10201 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10203 = x10200 + x10202;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10204 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x10204 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10205 = x10204 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10206 = x10203 + x10205;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10207 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x10207 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10208 = x10207 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10209 = x10206 + x10208;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10210 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x10210 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10211 = x10210 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10212 = x10209 + x10211;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10213 = x10134 - x10212;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10214 = x10213 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10215 = Fp(x10214.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10215);
            reg = x10215;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10216 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x10216 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10217 = x10214 - x10216;
        // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10218 = x10217 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10219 = x96 - x10218;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10220 = x10218 * x10219;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10220 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10221 = x10135 + x10214;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10222 = Fp(x10221.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10222);
            reg = x10222;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10223 = Fp(x10221.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10224 = x10223 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10224);
            reg = x10224;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10225 = Fp(x10221.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10226 = x10225 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10226);
            reg = x10226;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10227 = Fp(x10221.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10228 = x10227 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10228);
            reg = x10228;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10229 = Fp(x10221.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10230 = x10229 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10230);
            reg = x10230;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10231 = Fp(x10221.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10232 = x10231 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10232);
            reg = x10232;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10233 = Fp(x10221.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10234 = x10233 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10234);
            reg = x10234;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10235 = Fp(x10221.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10236 = x10235 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10236);
            reg = x10236;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10237 = Fp(x10221.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10238 = x10237 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10238);
            reg = x10238;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10239 = Fp(x10221.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10240 = x10239 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10240);
            reg = x10240;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10241 = Fp(x10221.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10242 = x10241 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10242);
            reg = x10242;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10243 = Fp(x10221.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10244 = x10243 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10244);
            reg = x10244;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10245 = Fp(x10221.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10246 = x10245 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10246);
            reg = x10246;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10247 = Fp(x10221.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10248 = x10247 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10248);
            reg = x10248;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10249 = Fp(x10221.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10250 = x10249 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10250);
            reg = x10250;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10251 = Fp(x10221.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10252 = x10251 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10252);
            reg = x10252;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10253 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x10253 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10254 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x10254 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10255 = x10254 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10256 = x10253 + x10255;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10257 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x10257 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10258 = x10257 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10259 = x10256 + x10258;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10260 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x10260 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10261 = x10260 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10262 = x10259 + x10261;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10263 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x10263 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10264 = x10263 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10265 = x10262 + x10264;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10266 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x10266 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10267 = x10266 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10268 = x10265 + x10267;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10269 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x10269 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10270 = x10269 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10271 = x10268 + x10270;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10272 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x10272 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10273 = x10272 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10274 = x10271 + x10273;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10275 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x10275 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10276 = x10275 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10277 = x10274 + x10276;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10278 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x10278 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10279 = x10278 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10280 = x10277 + x10279;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10281 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x10281 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10282 = x10281 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10283 = x10280 + x10282;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10284 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x10284 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10285 = x10284 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10286 = x10283 + x10285;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10287 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x10287 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10288 = x10287 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10289 = x10286 + x10288;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10290 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x10290 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10291 = x10290 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10292 = x10289 + x10291;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10293 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x10293 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10294 = x10293 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10295 = x10292 + x10294;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10296 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x10296 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10297 = x10296 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10298 = x10295 + x10297;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10299 = x10221 - x10298;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10300 = x10299 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10301 = Fp(x10300.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10301);
            reg = x10301;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10302 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x10302 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10303 = x10300 - x10302;
        // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10304 = x10303 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10305 = x96 - x10304;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10306 = x10304 * x10305;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10306 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10307 = args[2][191 * steps + ((cycle - 4) & mask)];
        assert(x10307 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10308 = args[2][192 * steps + ((cycle - 4) & mask)];
        assert(x10308 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10309 = args[2][193 * steps + ((cycle - 4) & mask)];
        assert(x10309 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10310 = args[2][194 * steps + ((cycle - 4) & mask)];
        assert(x10310 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10311 = args[2][195 * steps + ((cycle - 4) & mask)];
        assert(x10311 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10312 = args[2][196 * steps + ((cycle - 4) & mask)];
        assert(x10312 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10313 = args[2][197 * steps + ((cycle - 4) & mask)];
        assert(x10313 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10314 = args[2][198 * steps + ((cycle - 4) & mask)];
        assert(x10314 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10315 = args[2][199 * steps + ((cycle - 4) & mask)];
        assert(x10315 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10316 = args[2][200 * steps + ((cycle - 4) & mask)];
        assert(x10316 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10317 = args[2][201 * steps + ((cycle - 4) & mask)];
        assert(x10317 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10318 = args[2][202 * steps + ((cycle - 4) & mask)];
        assert(x10318 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10319 = args[2][203 * steps + ((cycle - 4) & mask)];
        assert(x10319 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10320 = args[2][204 * steps + ((cycle - 4) & mask)];
        assert(x10320 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10321 = args[2][205 * steps + ((cycle - 4) & mask)];
        assert(x10321 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10322 = args[2][206 * steps + ((cycle - 4) & mask)];
        assert(x10322 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10323 = args[2][207 * steps + ((cycle - 4) & mask)];
        assert(x10323 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10324 = args[2][208 * steps + ((cycle - 4) & mask)];
        assert(x10324 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10325 = args[2][209 * steps + ((cycle - 4) & mask)];
        assert(x10325 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10326 = args[2][210 * steps + ((cycle - 4) & mask)];
        assert(x10326 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10327 = args[2][211 * steps + ((cycle - 4) & mask)];
        assert(x10327 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10328 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x10328 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10329 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x10329 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10330 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x10330 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10331 = args[2][215 * steps + ((cycle - 4) & mask)];
        assert(x10331 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10332 = args[2][216 * steps + ((cycle - 4) & mask)];
        assert(x10332 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10333 = args[2][217 * steps + ((cycle - 4) & mask)];
        assert(x10333 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10334 = args[2][218 * steps + ((cycle - 4) & mask)];
        assert(x10334 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10335 = args[2][219 * steps + ((cycle - 4) & mask)];
        assert(x10335 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10336 = args[2][220 * steps + ((cycle - 4) & mask)];
        assert(x10336 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10337 = args[2][221 * steps + ((cycle - 4) & mask)];
        assert(x10337 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10338 = args[2][222 * steps + ((cycle - 4) & mask)];
        assert(x10338 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10339 = x10308 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10340 = x10307 + x10339;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10341 = x10309 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10342 = x10340 + x10341;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10343 = x10310 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10344 = x10342 + x10343;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10345 = x10311 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10346 = x10344 + x10345;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10347 = x10312 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10348 = x10346 + x10347;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10349 = x10313 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10350 = x10348 + x10349;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10351 = x10314 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10352 = x10350 + x10351;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10353 = x10315 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10354 = x10352 + x10353;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10355 = x10316 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10356 = x10354 + x10355;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10357 = x10317 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10358 = x10356 + x10357;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10359 = x10318 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10360 = x10358 + x10359;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10361 = x10319 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10362 = x10360 + x10361;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10363 = x10320 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10364 = x10362 + x10363;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10365 = x10321 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10366 = x10364 + x10365;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10367 = x10322 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10368 = x10366 + x10367;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10369 = x10324 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10370 = x10323 + x10369;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10371 = x10325 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10372 = x10370 + x10371;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10373 = x10326 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10374 = x10372 + x10373;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10375 = x10327 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10376 = x10374 + x10375;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10377 = x10328 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10378 = x10376 + x10377;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10379 = x10329 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10380 = x10378 + x10379;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10381 = x10330 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10382 = x10380 + x10381;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10383 = x10331 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10384 = x10382 + x10383;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10385 = x10332 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10386 = x10384 + x10385;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10387 = x10333 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10388 = x10386 + x10387;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10389 = x10334 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10390 = x10388 + x10389;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10391 = x10335 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10392 = x10390 + x10391;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10393 = x10336 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10394 = x10392 + x10393;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10395 = x10337 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10396 = x10394 + x10395;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10397 = x10338 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10398 = x10396 + x10397;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10399 = args[2][191 * steps + ((cycle - 68) & mask)];
        assert(x10399 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10400 = args[2][192 * steps + ((cycle - 68) & mask)];
        assert(x10400 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10401 = args[2][193 * steps + ((cycle - 68) & mask)];
        assert(x10401 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10402 = args[2][194 * steps + ((cycle - 68) & mask)];
        assert(x10402 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10403 = args[2][195 * steps + ((cycle - 68) & mask)];
        assert(x10403 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10404 = args[2][196 * steps + ((cycle - 68) & mask)];
        assert(x10404 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10405 = args[2][197 * steps + ((cycle - 68) & mask)];
        assert(x10405 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10406 = args[2][198 * steps + ((cycle - 68) & mask)];
        assert(x10406 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10407 = args[2][199 * steps + ((cycle - 68) & mask)];
        assert(x10407 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10408 = args[2][200 * steps + ((cycle - 68) & mask)];
        assert(x10408 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10409 = args[2][201 * steps + ((cycle - 68) & mask)];
        assert(x10409 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10410 = args[2][202 * steps + ((cycle - 68) & mask)];
        assert(x10410 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10411 = args[2][203 * steps + ((cycle - 68) & mask)];
        assert(x10411 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10412 = args[2][204 * steps + ((cycle - 68) & mask)];
        assert(x10412 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10413 = args[2][205 * steps + ((cycle - 68) & mask)];
        assert(x10413 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10414 = args[2][206 * steps + ((cycle - 68) & mask)];
        assert(x10414 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10415 = args[2][207 * steps + ((cycle - 68) & mask)];
        assert(x10415 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10416 = args[2][208 * steps + ((cycle - 68) & mask)];
        assert(x10416 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10417 = args[2][209 * steps + ((cycle - 68) & mask)];
        assert(x10417 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10418 = args[2][210 * steps + ((cycle - 68) & mask)];
        assert(x10418 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10419 = args[2][211 * steps + ((cycle - 68) & mask)];
        assert(x10419 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10420 = args[2][212 * steps + ((cycle - 68) & mask)];
        assert(x10420 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10421 = args[2][213 * steps + ((cycle - 68) & mask)];
        assert(x10421 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10422 = args[2][214 * steps + ((cycle - 68) & mask)];
        assert(x10422 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10423 = args[2][215 * steps + ((cycle - 68) & mask)];
        assert(x10423 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10424 = args[2][216 * steps + ((cycle - 68) & mask)];
        assert(x10424 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10425 = args[2][217 * steps + ((cycle - 68) & mask)];
        assert(x10425 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10426 = args[2][218 * steps + ((cycle - 68) & mask)];
        assert(x10426 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10427 = args[2][219 * steps + ((cycle - 68) & mask)];
        assert(x10427 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10428 = args[2][220 * steps + ((cycle - 68) & mask)];
        assert(x10428 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10429 = args[2][221 * steps + ((cycle - 68) & mask)];
        assert(x10429 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10430 = args[2][222 * steps + ((cycle - 68) & mask)];
        assert(x10430 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10431 = x10400 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10432 = x10399 + x10431;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10433 = x10401 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10434 = x10432 + x10433;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10435 = x10402 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10436 = x10434 + x10435;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10437 = x10403 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10438 = x10436 + x10437;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10439 = x10404 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10440 = x10438 + x10439;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10441 = x10405 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10442 = x10440 + x10441;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10443 = x10406 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10444 = x10442 + x10443;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10445 = x10407 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10446 = x10444 + x10445;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10447 = x10408 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10448 = x10446 + x10447;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10449 = x10409 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10450 = x10448 + x10449;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10451 = x10410 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10452 = x10450 + x10451;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10453 = x10411 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10454 = x10452 + x10453;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10455 = x10412 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10456 = x10454 + x10455;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10457 = x10413 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10458 = x10456 + x10457;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10459 = x10414 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10460 = x10458 + x10459;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10461 = x10416 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10462 = x10415 + x10461;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10463 = x10417 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10464 = x10462 + x10463;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10465 = x10418 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10466 = x10464 + x10465;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10467 = x10419 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10468 = x10466 + x10467;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10469 = x10420 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10470 = x10468 + x10469;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10471 = x10421 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10472 = x10470 + x10471;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10473 = x10422 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10474 = x10472 + x10473;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10475 = x10423 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10476 = x10474 + x10475;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10477 = x10424 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10478 = x10476 + x10477;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10479 = x10425 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10480 = x10478 + x10479;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10481 = x10426 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10482 = x10480 + x10481;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10483 = x10427 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10484 = x10482 + x10483;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10485 = x10428 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10486 = x10484 + x10485;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10487 = x10429 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10488 = x10486 + x10487;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
        auto x10489 = x10430 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
        auto x10490 = x10488 + x10489;
        // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10491 = x10368 + x10460;
        // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
        auto x10492 = x10398 + x10490;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10493 = Fp(x10491.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10493);
            reg = x10493;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10494 = Fp(x10491.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10495 = x10494 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10495);
            reg = x10495;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10496 = Fp(x10491.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10497 = x10496 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10497);
            reg = x10497;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10498 = Fp(x10491.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10499 = x10498 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10499);
            reg = x10499;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10500 = Fp(x10491.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10501 = x10500 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10501);
            reg = x10501;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10502 = Fp(x10491.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10503 = x10502 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10503);
            reg = x10503;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10504 = Fp(x10491.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10505 = x10504 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10505);
            reg = x10505;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10506 = Fp(x10491.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10507 = x10506 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10507);
            reg = x10507;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10508 = Fp(x10491.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10509 = x10508 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10509);
            reg = x10509;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10510 = Fp(x10491.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10511 = x10510 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10511);
            reg = x10511;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10512 = Fp(x10491.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10513 = x10512 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10513);
            reg = x10513;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10514 = Fp(x10491.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10515 = x10514 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10515);
            reg = x10515;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10516 = Fp(x10491.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10517 = x10516 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10517);
            reg = x10517;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10518 = Fp(x10491.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10519 = x10518 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10519);
            reg = x10519;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10520 = Fp(x10491.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10521 = x10520 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10521);
            reg = x10521;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10522 = Fp(x10491.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10523 = x10522 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10523);
            reg = x10523;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10524 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x10524 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10525 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x10525 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10526 = x10525 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10527 = x10524 + x10526;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10528 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x10528 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10529 = x10528 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10530 = x10527 + x10529;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10531 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x10531 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10532 = x10531 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10533 = x10530 + x10532;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10534 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x10534 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10535 = x10534 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10536 = x10533 + x10535;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10537 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x10537 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10538 = x10537 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10539 = x10536 + x10538;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10540 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x10540 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10541 = x10540 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10542 = x10539 + x10541;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10543 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x10543 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10544 = x10543 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10545 = x10542 + x10544;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10546 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x10546 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10547 = x10546 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10548 = x10545 + x10547;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10549 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x10549 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10550 = x10549 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10551 = x10548 + x10550;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10552 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x10552 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10553 = x10552 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10554 = x10551 + x10553;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10555 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x10555 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10556 = x10555 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10557 = x10554 + x10556;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10558 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x10558 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10559 = x10558 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10560 = x10557 + x10559;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10561 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x10561 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10562 = x10561 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10563 = x10560 + x10562;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10564 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x10564 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10565 = x10564 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10566 = x10563 + x10565;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10567 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x10567 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10568 = x10567 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10569 = x10566 + x10568;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10570 = x10491 - x10569;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10571 = x10570 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
          auto x10572 = Fp(x10571.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10572);
            reg = x10572;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10573 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x10573 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
        auto x10574 = x10571 - x10573;
        // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
        auto x10575 = x10574 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
        auto x10576 = x96 - x10575;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        auto x10577 = x10575 * x10576;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        if (x10577 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
        auto x10578 = x10492 + x10571;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10579 = Fp(x10578.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10579);
            reg = x10579;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10580 = Fp(x10578.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10581 = x10580 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10581);
            reg = x10581;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10582 = Fp(x10578.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10583 = x10582 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10583);
            reg = x10583;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10584 = Fp(x10578.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10585 = x10584 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10585);
            reg = x10585;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10586 = Fp(x10578.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10587 = x10586 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10587);
            reg = x10587;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10588 = Fp(x10578.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10589 = x10588 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10589);
            reg = x10589;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10590 = Fp(x10578.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10591 = x10590 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10591);
            reg = x10591;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10592 = Fp(x10578.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10593 = x10592 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10593);
            reg = x10593;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10594 = Fp(x10578.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10595 = x10594 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10595);
            reg = x10595;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10596 = Fp(x10578.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10597 = x10596 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10597);
            reg = x10597;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10598 = Fp(x10578.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10599 = x10598 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10599);
            reg = x10599;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10600 = Fp(x10578.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10601 = x10600 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10601);
            reg = x10601;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10602 = Fp(x10578.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10603 = x10602 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10603);
            reg = x10603;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10604 = Fp(x10578.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10605 = x10604 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10605);
            reg = x10605;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10606 = Fp(x10578.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10607 = x10606 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10607);
            reg = x10607;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x10608 = Fp(x10578.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x10609 = x10608 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10609);
            reg = x10609;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10610 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x10610 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10611 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x10611 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10612 = x10611 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10613 = x10610 + x10612;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10614 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x10614 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10615 = x10614 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10616 = x10613 + x10615;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10617 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x10617 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10618 = x10617 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10619 = x10616 + x10618;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10620 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x10620 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10621 = x10620 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10622 = x10619 + x10621;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10623 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x10623 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10624 = x10623 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10625 = x10622 + x10624;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10626 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x10626 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10627 = x10626 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10628 = x10625 + x10627;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10629 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x10629 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10630 = x10629 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10631 = x10628 + x10630;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10632 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x10632 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10633 = x10632 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10634 = x10631 + x10633;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10635 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x10635 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10636 = x10635 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10637 = x10634 + x10636;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10638 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x10638 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10639 = x10638 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10640 = x10637 + x10639;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10641 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x10641 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10642 = x10641 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10643 = x10640 + x10642;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10644 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x10644 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10645 = x10644 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10646 = x10643 + x10645;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10647 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x10647 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10648 = x10647 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10649 = x10646 + x10648;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10650 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x10650 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10651 = x10650 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10652 = x10649 + x10651;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10653 = args[2][222 * steps + ((cycle - 0) & mask)];
        assert(x10653 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x10654 = x10653 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x10655 = x10652 + x10654;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x10656 = x10578 - x10655;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x10657 = x10656 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
          auto x10658 = Fp(x10657.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10658);
            reg = x10658;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x10659 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x10659 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
        auto x10660 = x10657 - x10659;
        // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
        auto x10661 = x10660 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
        auto x10662 = x96 - x10661;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        auto x10663 = x10661 * x10662;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        if (x10663 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x10664 = args[2][151 * steps + ((cycle - 0) & mask)];
      assert(x10664 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":402:17)
      auto x10665 = x96 - x10664;
      if (x8840 != 0) {
        if (x10664 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
          auto x10666 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x10666 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":406:26)
          auto x10667 = x10666 + x8823;
          {
            host_args.at(0) = x10667;
            host_args.at(1) = x96;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10668 = host_outs.at(0);
            auto x10669 = host_outs.at(1);
            auto x10670 = host_outs.at(2);
            auto x10671 = host_outs.at(3);
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][119 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10668);
              reg = x10668;
            }
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][120 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10669);
              reg = x10669;
            }
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][121 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10670);
              reg = x10670;
            }
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][122 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10671);
              reg = x10671;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10672 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10672 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10673 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10673 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10674 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10674 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10675 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10675 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10667);
            reg = x10667;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10672);
            reg = x10672;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10673);
            reg = x10673;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10674);
            reg = x10674;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10675);
            reg = x10675;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":407:26)
          auto x10676 = x10666 + x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":407:26)
          auto x10677 = x10676 + x8823;
          {
            host_args.at(0) = x10677;
            host_args.at(1) = x96;
            host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
            auto x10678 = host_outs.at(0);
            auto x10679 = host_outs.at(1);
            auto x10680 = host_outs.at(2);
            auto x10681 = host_outs.at(3);
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][126 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10678);
              reg = x10678;
            }
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][127 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10679);
              reg = x10679;
            }
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][128 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10680);
              reg = x10680;
            }
            // loc("zirgen/components/u32.cpp":82:5)
            {
              auto& reg = args[2][129 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x10681);
              reg = x10681;
            }
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10682 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x10682 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10683 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x10683 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10684 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x10684 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10685 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x10685 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10677);
            reg = x10677;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10682);
            reg = x10682;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10683);
            reg = x10683;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10684);
            reg = x10684;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10685);
            reg = x10685;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
          auto x10686 = args[2][116 * steps + ((cycle - 0) & mask)];
          assert(x10686 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":408:39)
          auto x10687 = x10686 * x79;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10688 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10688 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10689 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10689 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10690 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10690 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10691 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10691 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10692 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10692 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10693 = x10692 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10694 = x10688 + x10693;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10695 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10695 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10696 = x10695 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10697 = x10689 + x10696;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10698 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10698 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10699 = x10698 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10700 = x10690 + x10699;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10701 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10701 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10702 = x10701 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10703 = x10691 + x10702;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10704 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10704 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10705 = x10704 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10706 = x10694 + x10705;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10707 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10707 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10708 = x10707 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10709 = x10697 + x10708;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10710 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10710 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10711 = x10710 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10712 = x10700 + x10711;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10713 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10713 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10714 = x10713 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10715 = x10703 + x10714;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10716 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10716 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10717 = x10716 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10718 = x10706 + x10717;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10719 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10719 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10720 = x10719 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10721 = x10709 + x10720;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10722 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10722 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10723 = x10722 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10724 = x10712 + x10723;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10725 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10725 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10726 = x10725 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10727 = x10715 + x10726;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10728 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10728 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10729 = x10728 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10730 = x10718 + x10729;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10731 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10731 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10732 = x10731 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10733 = x10721 + x10732;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10734 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10734 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10735 = x10734 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10736 = x10724 + x10735;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10737 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10737 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10738 = x10737 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10739 = x10727 + x10738;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10740 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10740 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10741 = x10740 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10742 = x10730 + x10741;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10743 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10743 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10744 = x10743 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10745 = x10733 + x10744;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10746 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10746 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10747 = x10746 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10748 = x10736 + x10747;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10749 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10749 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10750 = x10749 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10751 = x10739 + x10750;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10752 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10752 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10753 = x10752 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10754 = x10742 + x10753;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10755 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10755 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10756 = x10755 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10757 = x10745 + x10756;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10758 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10758 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10759 = x10758 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10760 = x10748 + x10759;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10761 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10761 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10762 = x10761 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10763 = x10751 + x10762;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10764 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10764 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10765 = x10764 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10766 = x10754 + x10765;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10767 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10767 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10768 = x10767 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10769 = x10757 + x10768;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10770 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10770 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10771 = x10770 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10772 = x10760 + x10771;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10773 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10773 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10774 = x10773 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10775 = x10763 + x10774;
          host_args.at(0) = x10687;
          host_args.at(1) = x10672;
          host_args.at(2) = x10673;
          host_args.at(3) = x10674;
          host_args.at(4) = x10675;
          host_args.at(5) = x10775;
          host_args.at(6) = x10772;
          host_args.at(7) = x10769;
          host_args.at(8) = x10766;
          host(ctx, "log", "  io0: [%10x] %w, a: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
          auto x10776 = args[2][123 * steps + ((cycle - 0) & mask)];
          assert(x10776 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":409:39)
          auto x10777 = x10776 * x79;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10778 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10778 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10779 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10779 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10780 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10780 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10781 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x10781 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10782 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10782 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10783 = x10782 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10784 = x10778 + x10783;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10785 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10785 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10786 = x10785 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10787 = x10779 + x10786;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10788 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10788 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10789 = x10788 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10790 = x10780 + x10789;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10791 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x10791 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10792 = x10791 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10793 = x10781 + x10792;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10794 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x10794 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10795 = x10794 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10796 = x10784 + x10795;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10797 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x10797 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10798 = x10797 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10799 = x10787 + x10798;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10800 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x10800 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10801 = x10800 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10802 = x10790 + x10801;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10803 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x10803 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10804 = x10803 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10805 = x10793 + x10804;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10806 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x10806 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10807 = x10806 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10808 = x10796 + x10807;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10809 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x10809 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10810 = x10809 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10811 = x10799 + x10810;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10812 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x10812 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10813 = x10812 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10814 = x10802 + x10813;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10815 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x10815 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10816 = x10815 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10817 = x10805 + x10816;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10818 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x10818 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10819 = x10818 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10820 = x10808 + x10819;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10821 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x10821 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10822 = x10821 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10823 = x10811 + x10822;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10824 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x10824 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10825 = x10824 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10826 = x10814 + x10825;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10827 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x10827 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10828 = x10827 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10829 = x10817 + x10828;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10830 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x10830 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10831 = x10830 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10832 = x10820 + x10831;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10833 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x10833 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10834 = x10833 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10835 = x10823 + x10834;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10836 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x10836 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10837 = x10836 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10838 = x10826 + x10837;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10839 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x10839 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10840 = x10839 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10841 = x10829 + x10840;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10842 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x10842 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10843 = x10842 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10844 = x10832 + x10843;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10845 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x10845 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10846 = x10845 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10847 = x10835 + x10846;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10848 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x10848 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10849 = x10848 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10850 = x10838 + x10849;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10851 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x10851 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10852 = x10851 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10853 = x10841 + x10852;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10854 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x10854 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10855 = x10854 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10856 = x10844 + x10855;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10857 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x10857 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10858 = x10857 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10859 = x10847 + x10858;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10860 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x10860 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10861 = x10860 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10862 = x10850 + x10861;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10863 = args[2][222 * steps + ((cycle - 0) & mask)];
          assert(x10863 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10864 = x10863 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10865 = x10853 + x10864;
          host_args.at(0) = x10777;
          host_args.at(1) = x10682;
          host_args.at(2) = x10683;
          host_args.at(3) = x10684;
          host_args.at(4) = x10685;
          host_args.at(5) = x10865;
          host_args.at(6) = x10862;
          host_args.at(7) = x10859;
          host_args.at(8) = x10856;
          host(ctx, "log", "  io1: [%10x] %w, e: %w", host_args.data(), 9, host_outs.data(), 0);
          // loc("./zirgen/components/u32.h":25:12)
          auto x10866 = x10673 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10867 = x10672 + x10866;
          // loc("./zirgen/components/u32.h":26:12)
          auto x10868 = x10674 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10869 = x10867 + x10868;
          // loc("./zirgen/components/u32.h":27:12)
          auto x10870 = x10675 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10871 = x10869 + x10870;
          // loc("./zirgen/components/u32.h":25:12)
          auto x10872 = x10772 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10873 = x10775 + x10872;
          // loc("./zirgen/components/u32.h":26:12)
          auto x10874 = x10769 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10875 = x10873 + x10874;
          // loc("./zirgen/components/u32.h":27:12)
          auto x10876 = x10766 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10877 = x10875 + x10876;
          // loc("zirgen/circuit/rv32im/sha.cpp":410:10)
          auto x10878 = x10871 - x10877;
          // loc("zirgen/circuit/rv32im/sha.cpp":410:10)
          if (x10878 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:410");
          // loc("./zirgen/components/u32.h":25:12)
          auto x10879 = x10683 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10880 = x10682 + x10879;
          // loc("./zirgen/components/u32.h":26:12)
          auto x10881 = x10684 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10882 = x10880 + x10881;
          // loc("./zirgen/components/u32.h":27:12)
          auto x10883 = x10685 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10884 = x10882 + x10883;
          // loc("./zirgen/components/u32.h":25:12)
          auto x10885 = x10862 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10886 = x10865 + x10885;
          // loc("./zirgen/components/u32.h":26:12)
          auto x10887 = x10859 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10888 = x10886 + x10887;
          // loc("./zirgen/components/u32.h":27:12)
          auto x10889 = x10856 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x10890 = x10888 + x10889;
          // loc("zirgen/circuit/rv32im/sha.cpp":411:10)
          auto x10891 = x10884 - x10890;
          // loc("zirgen/circuit/rv32im/sha.cpp":411:10)
          if (x10891 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:411");
        }
        if (x10665 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
          auto x10892 = args[2][139 * steps + ((cycle - 0) & mask)];
          assert(x10892 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":414:27)
          auto x10893 = x10892 + x8823;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10894 = args[2][159 * steps + ((cycle - 0) & mask)];
          assert(x10894 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10895 = args[2][167 * steps + ((cycle - 0) & mask)];
          assert(x10895 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10896 = args[2][175 * steps + ((cycle - 0) & mask)];
          assert(x10896 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10897 = args[2][183 * steps + ((cycle - 0) & mask)];
          assert(x10897 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10898 = args[2][160 * steps + ((cycle - 0) & mask)];
          assert(x10898 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10899 = x10898 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10900 = x10894 + x10899;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10901 = args[2][168 * steps + ((cycle - 0) & mask)];
          assert(x10901 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10902 = x10901 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10903 = x10895 + x10902;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10904 = args[2][176 * steps + ((cycle - 0) & mask)];
          assert(x10904 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10905 = x10904 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10906 = x10896 + x10905;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10907 = args[2][184 * steps + ((cycle - 0) & mask)];
          assert(x10907 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10908 = x10907 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10909 = x10897 + x10908;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10910 = args[2][161 * steps + ((cycle - 0) & mask)];
          assert(x10910 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10911 = x10910 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10912 = x10900 + x10911;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10913 = args[2][169 * steps + ((cycle - 0) & mask)];
          assert(x10913 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10914 = x10913 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10915 = x10903 + x10914;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10916 = args[2][177 * steps + ((cycle - 0) & mask)];
          assert(x10916 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10917 = x10916 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10918 = x10906 + x10917;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10919 = args[2][185 * steps + ((cycle - 0) & mask)];
          assert(x10919 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10920 = x10919 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10921 = x10909 + x10920;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10922 = args[2][162 * steps + ((cycle - 0) & mask)];
          assert(x10922 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10923 = x10922 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10924 = x10912 + x10923;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10925 = args[2][170 * steps + ((cycle - 0) & mask)];
          assert(x10925 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10926 = x10925 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10927 = x10915 + x10926;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10928 = args[2][178 * steps + ((cycle - 0) & mask)];
          assert(x10928 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10929 = x10928 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10930 = x10918 + x10929;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10931 = args[2][186 * steps + ((cycle - 0) & mask)];
          assert(x10931 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10932 = x10931 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10933 = x10921 + x10932;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10934 = args[2][163 * steps + ((cycle - 0) & mask)];
          assert(x10934 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10935 = x10934 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10936 = x10924 + x10935;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10937 = args[2][171 * steps + ((cycle - 0) & mask)];
          assert(x10937 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10938 = x10937 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10939 = x10927 + x10938;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10940 = args[2][179 * steps + ((cycle - 0) & mask)];
          assert(x10940 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10941 = x10940 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10942 = x10930 + x10941;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10943 = args[2][187 * steps + ((cycle - 0) & mask)];
          assert(x10943 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10944 = x10943 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10945 = x10933 + x10944;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10946 = args[2][164 * steps + ((cycle - 0) & mask)];
          assert(x10946 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10947 = x10946 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10948 = x10936 + x10947;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10949 = args[2][172 * steps + ((cycle - 0) & mask)];
          assert(x10949 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10950 = x10949 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10951 = x10939 + x10950;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10952 = args[2][180 * steps + ((cycle - 0) & mask)];
          assert(x10952 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10953 = x10952 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10954 = x10942 + x10953;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10955 = args[2][188 * steps + ((cycle - 0) & mask)];
          assert(x10955 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10956 = x10955 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10957 = x10945 + x10956;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10958 = args[2][165 * steps + ((cycle - 0) & mask)];
          assert(x10958 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10959 = x10958 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10960 = x10948 + x10959;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10961 = args[2][173 * steps + ((cycle - 0) & mask)];
          assert(x10961 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10962 = x10961 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10963 = x10951 + x10962;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10964 = args[2][181 * steps + ((cycle - 0) & mask)];
          assert(x10964 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10965 = x10964 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10966 = x10954 + x10965;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10967 = args[2][189 * steps + ((cycle - 0) & mask)];
          assert(x10967 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10968 = x10967 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10969 = x10957 + x10968;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10970 = args[2][166 * steps + ((cycle - 0) & mask)];
          assert(x10970 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10971 = x10970 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10972 = x10960 + x10971;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10973 = args[2][174 * steps + ((cycle - 0) & mask)];
          assert(x10973 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10974 = x10973 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10975 = x10963 + x10974;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10976 = args[2][182 * steps + ((cycle - 0) & mask)];
          assert(x10976 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10977 = x10976 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10978 = x10966 + x10977;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10979 = args[2][190 * steps + ((cycle - 0) & mask)];
          assert(x10979 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10980 = x10979 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10981 = x10969 + x10980;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10981);
            reg = x10981;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10978);
            reg = x10978;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10975);
            reg = x10975;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10972);
            reg = x10972;
          }
          {
            host_args.at(0) = x10893;
            host_args.at(1) = x10981;
            host_args.at(2) = x10978;
            host_args.at(3) = x10975;
            host_args.at(4) = x10972;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10982 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x10982 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10983 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x10983 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10984 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x10984 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10985 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x10985 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10893);
            reg = x10893;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10982);
            reg = x10982;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10983);
            reg = x10983;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10984);
            reg = x10984;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10985);
            reg = x10985;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":415:27)
          auto x10986 = x10892 + x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":415:27)
          auto x10987 = x10986 + x8823;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10988 = args[2][191 * steps + ((cycle - 0) & mask)];
          assert(x10988 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10989 = args[2][199 * steps + ((cycle - 0) & mask)];
          assert(x10989 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10990 = args[2][207 * steps + ((cycle - 0) & mask)];
          assert(x10990 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10991 = args[2][215 * steps + ((cycle - 0) & mask)];
          assert(x10991 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10992 = args[2][192 * steps + ((cycle - 0) & mask)];
          assert(x10992 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10993 = x10992 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10994 = x10988 + x10993;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10995 = args[2][200 * steps + ((cycle - 0) & mask)];
          assert(x10995 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10996 = x10995 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x10997 = x10989 + x10996;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x10998 = args[2][208 * steps + ((cycle - 0) & mask)];
          assert(x10998 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x10999 = x10998 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11000 = x10990 + x10999;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11001 = args[2][216 * steps + ((cycle - 0) & mask)];
          assert(x11001 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11002 = x11001 * x93;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11003 = x10991 + x11002;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11004 = args[2][193 * steps + ((cycle - 0) & mask)];
          assert(x11004 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11005 = x11004 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11006 = x10994 + x11005;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11007 = args[2][201 * steps + ((cycle - 0) & mask)];
          assert(x11007 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11008 = x11007 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11009 = x10997 + x11008;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11010 = args[2][209 * steps + ((cycle - 0) & mask)];
          assert(x11010 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11011 = x11010 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11012 = x11000 + x11011;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11013 = args[2][217 * steps + ((cycle - 0) & mask)];
          assert(x11013 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11014 = x11013 * x79;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11015 = x11003 + x11014;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11016 = args[2][194 * steps + ((cycle - 0) & mask)];
          assert(x11016 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11017 = x11016 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11018 = x11006 + x11017;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11019 = args[2][202 * steps + ((cycle - 0) & mask)];
          assert(x11019 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11020 = x11019 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11021 = x11009 + x11020;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11022 = args[2][210 * steps + ((cycle - 0) & mask)];
          assert(x11022 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11023 = x11022 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11024 = x11012 + x11023;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11025 = args[2][218 * steps + ((cycle - 0) & mask)];
          assert(x11025 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11026 = x11025 * x72;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11027 = x11015 + x11026;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11028 = args[2][195 * steps + ((cycle - 0) & mask)];
          assert(x11028 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11029 = x11028 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11030 = x11018 + x11029;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11031 = args[2][203 * steps + ((cycle - 0) & mask)];
          assert(x11031 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11032 = x11031 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11033 = x11021 + x11032;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11034 = args[2][211 * steps + ((cycle - 0) & mask)];
          assert(x11034 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11035 = x11034 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11036 = x11024 + x11035;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11037 = args[2][219 * steps + ((cycle - 0) & mask)];
          assert(x11037 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11038 = x11037 * x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11039 = x11027 + x11038;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11040 = args[2][196 * steps + ((cycle - 0) & mask)];
          assert(x11040 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11041 = x11040 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11042 = x11030 + x11041;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11043 = args[2][204 * steps + ((cycle - 0) & mask)];
          assert(x11043 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11044 = x11043 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11045 = x11033 + x11044;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11046 = args[2][212 * steps + ((cycle - 0) & mask)];
          assert(x11046 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11047 = x11046 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11048 = x11036 + x11047;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11049 = args[2][220 * steps + ((cycle - 0) & mask)];
          assert(x11049 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11050 = x11049 * x60;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11051 = x11039 + x11050;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11052 = args[2][197 * steps + ((cycle - 0) & mask)];
          assert(x11052 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11053 = x11052 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11054 = x11042 + x11053;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11055 = args[2][205 * steps + ((cycle - 0) & mask)];
          assert(x11055 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11056 = x11055 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11057 = x11045 + x11056;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11058 = args[2][213 * steps + ((cycle - 0) & mask)];
          assert(x11058 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11059 = x11058 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11060 = x11048 + x11059;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11061 = args[2][221 * steps + ((cycle - 0) & mask)];
          assert(x11061 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11062 = x11061 * x55;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11063 = x11051 + x11062;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11064 = args[2][198 * steps + ((cycle - 0) & mask)];
          assert(x11064 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11065 = x11064 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11066 = x11054 + x11065;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11067 = args[2][206 * steps + ((cycle - 0) & mask)];
          assert(x11067 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11068 = x11067 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11069 = x11057 + x11068;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11070 = args[2][214 * steps + ((cycle - 0) & mask)];
          assert(x11070 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11071 = x11070 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11072 = x11060 + x11071;
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11073 = args[2][222 * steps + ((cycle - 0) & mask)];
          assert(x11073 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":147:53)
          auto x11074 = x11073 * x63;
          // loc("zirgen/circuit/rv32im/sha.cpp":147:30)
          auto x11075 = x11063 + x11074;
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11075);
            reg = x11075;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11072);
            reg = x11072;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11069);
            reg = x11069;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11066);
            reg = x11066;
          }
          {
            host_args.at(0) = x10987;
            host_args.at(1) = x11075;
            host_args.at(2) = x11072;
            host_args.at(3) = x11069;
            host_args.at(4) = x11066;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11076 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x11076 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11077 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x11077 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11078 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x11078 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x11079 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x11079 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x10987);
            reg = x10987;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11076);
            reg = x11076;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11077);
            reg = x11077;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11078);
            reg = x11078;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x11079);
            reg = x11079;
          }
        }
      }
      if (x8841 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        if (x8831 != 0) {
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11080 = args[2][159 * steps + ((cycle - 1) & mask)];
      assert(x11080 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11081 = args[2][160 * steps + ((cycle - 1) & mask)];
      assert(x11081 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11082 = args[2][161 * steps + ((cycle - 1) & mask)];
      assert(x11082 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11083 = args[2][162 * steps + ((cycle - 1) & mask)];
      assert(x11083 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11084 = args[2][163 * steps + ((cycle - 1) & mask)];
      assert(x11084 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11085 = args[2][164 * steps + ((cycle - 1) & mask)];
      assert(x11085 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11086 = args[2][165 * steps + ((cycle - 1) & mask)];
      assert(x11086 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11087 = args[2][166 * steps + ((cycle - 1) & mask)];
      assert(x11087 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11088 = args[2][167 * steps + ((cycle - 1) & mask)];
      assert(x11088 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11089 = args[2][168 * steps + ((cycle - 1) & mask)];
      assert(x11089 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11090 = args[2][169 * steps + ((cycle - 1) & mask)];
      assert(x11090 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11091 = args[2][170 * steps + ((cycle - 1) & mask)];
      assert(x11091 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11092 = args[2][171 * steps + ((cycle - 1) & mask)];
      assert(x11092 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11093 = args[2][172 * steps + ((cycle - 1) & mask)];
      assert(x11093 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11094 = args[2][173 * steps + ((cycle - 1) & mask)];
      assert(x11094 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11095 = args[2][174 * steps + ((cycle - 1) & mask)];
      assert(x11095 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11096 = args[2][175 * steps + ((cycle - 1) & mask)];
      assert(x11096 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11097 = args[2][176 * steps + ((cycle - 1) & mask)];
      assert(x11097 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11098 = args[2][177 * steps + ((cycle - 1) & mask)];
      assert(x11098 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11099 = args[2][178 * steps + ((cycle - 1) & mask)];
      assert(x11099 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11100 = args[2][179 * steps + ((cycle - 1) & mask)];
      assert(x11100 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11101 = args[2][180 * steps + ((cycle - 1) & mask)];
      assert(x11101 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11102 = args[2][181 * steps + ((cycle - 1) & mask)];
      assert(x11102 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11103 = args[2][182 * steps + ((cycle - 1) & mask)];
      assert(x11103 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11104 = args[2][183 * steps + ((cycle - 1) & mask)];
      assert(x11104 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11105 = args[2][184 * steps + ((cycle - 1) & mask)];
      assert(x11105 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11106 = args[2][185 * steps + ((cycle - 1) & mask)];
      assert(x11106 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11107 = args[2][186 * steps + ((cycle - 1) & mask)];
      assert(x11107 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11108 = args[2][187 * steps + ((cycle - 1) & mask)];
      assert(x11108 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11109 = args[2][188 * steps + ((cycle - 1) & mask)];
      assert(x11109 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11110 = args[2][189 * steps + ((cycle - 1) & mask)];
      assert(x11110 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11111 = args[2][190 * steps + ((cycle - 1) & mask)];
      assert(x11111 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11112 = args[2][159 * steps + ((cycle - 2) & mask)];
      assert(x11112 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11113 = args[2][160 * steps + ((cycle - 2) & mask)];
      assert(x11113 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11114 = args[2][161 * steps + ((cycle - 2) & mask)];
      assert(x11114 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11115 = args[2][162 * steps + ((cycle - 2) & mask)];
      assert(x11115 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11116 = args[2][163 * steps + ((cycle - 2) & mask)];
      assert(x11116 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11117 = args[2][164 * steps + ((cycle - 2) & mask)];
      assert(x11117 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11118 = args[2][165 * steps + ((cycle - 2) & mask)];
      assert(x11118 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11119 = args[2][166 * steps + ((cycle - 2) & mask)];
      assert(x11119 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11120 = args[2][167 * steps + ((cycle - 2) & mask)];
      assert(x11120 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11121 = args[2][168 * steps + ((cycle - 2) & mask)];
      assert(x11121 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11122 = args[2][169 * steps + ((cycle - 2) & mask)];
      assert(x11122 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11123 = args[2][170 * steps + ((cycle - 2) & mask)];
      assert(x11123 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11124 = args[2][171 * steps + ((cycle - 2) & mask)];
      assert(x11124 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11125 = args[2][172 * steps + ((cycle - 2) & mask)];
      assert(x11125 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11126 = args[2][173 * steps + ((cycle - 2) & mask)];
      assert(x11126 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11127 = args[2][174 * steps + ((cycle - 2) & mask)];
      assert(x11127 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11128 = args[2][175 * steps + ((cycle - 2) & mask)];
      assert(x11128 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11129 = args[2][176 * steps + ((cycle - 2) & mask)];
      assert(x11129 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11130 = args[2][177 * steps + ((cycle - 2) & mask)];
      assert(x11130 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11131 = args[2][178 * steps + ((cycle - 2) & mask)];
      assert(x11131 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11132 = args[2][179 * steps + ((cycle - 2) & mask)];
      assert(x11132 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11133 = args[2][180 * steps + ((cycle - 2) & mask)];
      assert(x11133 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11134 = args[2][181 * steps + ((cycle - 2) & mask)];
      assert(x11134 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11135 = args[2][182 * steps + ((cycle - 2) & mask)];
      assert(x11135 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11136 = args[2][183 * steps + ((cycle - 2) & mask)];
      assert(x11136 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11137 = args[2][184 * steps + ((cycle - 2) & mask)];
      assert(x11137 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11138 = args[2][185 * steps + ((cycle - 2) & mask)];
      assert(x11138 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11139 = args[2][186 * steps + ((cycle - 2) & mask)];
      assert(x11139 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11140 = args[2][187 * steps + ((cycle - 2) & mask)];
      assert(x11140 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11141 = args[2][188 * steps + ((cycle - 2) & mask)];
      assert(x11141 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11142 = args[2][189 * steps + ((cycle - 2) & mask)];
      assert(x11142 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11143 = args[2][190 * steps + ((cycle - 2) & mask)];
      assert(x11143 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11144 = args[2][159 * steps + ((cycle - 3) & mask)];
      assert(x11144 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11145 = args[2][160 * steps + ((cycle - 3) & mask)];
      assert(x11145 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11146 = args[2][161 * steps + ((cycle - 3) & mask)];
      assert(x11146 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11147 = args[2][162 * steps + ((cycle - 3) & mask)];
      assert(x11147 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11148 = args[2][163 * steps + ((cycle - 3) & mask)];
      assert(x11148 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11149 = args[2][164 * steps + ((cycle - 3) & mask)];
      assert(x11149 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11150 = args[2][165 * steps + ((cycle - 3) & mask)];
      assert(x11150 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11151 = args[2][166 * steps + ((cycle - 3) & mask)];
      assert(x11151 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11152 = args[2][167 * steps + ((cycle - 3) & mask)];
      assert(x11152 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11153 = args[2][168 * steps + ((cycle - 3) & mask)];
      assert(x11153 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11154 = args[2][169 * steps + ((cycle - 3) & mask)];
      assert(x11154 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11155 = args[2][170 * steps + ((cycle - 3) & mask)];
      assert(x11155 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11156 = args[2][171 * steps + ((cycle - 3) & mask)];
      assert(x11156 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11157 = args[2][172 * steps + ((cycle - 3) & mask)];
      assert(x11157 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11158 = args[2][173 * steps + ((cycle - 3) & mask)];
      assert(x11158 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11159 = args[2][174 * steps + ((cycle - 3) & mask)];
      assert(x11159 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11160 = args[2][175 * steps + ((cycle - 3) & mask)];
      assert(x11160 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11161 = args[2][176 * steps + ((cycle - 3) & mask)];
      assert(x11161 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11162 = args[2][177 * steps + ((cycle - 3) & mask)];
      assert(x11162 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11163 = args[2][178 * steps + ((cycle - 3) & mask)];
      assert(x11163 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11164 = args[2][179 * steps + ((cycle - 3) & mask)];
      assert(x11164 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11165 = args[2][180 * steps + ((cycle - 3) & mask)];
      assert(x11165 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11166 = args[2][181 * steps + ((cycle - 3) & mask)];
      assert(x11166 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11167 = args[2][182 * steps + ((cycle - 3) & mask)];
      assert(x11167 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11168 = args[2][183 * steps + ((cycle - 3) & mask)];
      assert(x11168 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11169 = args[2][184 * steps + ((cycle - 3) & mask)];
      assert(x11169 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11170 = args[2][185 * steps + ((cycle - 3) & mask)];
      assert(x11170 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11171 = args[2][186 * steps + ((cycle - 3) & mask)];
      assert(x11171 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11172 = args[2][187 * steps + ((cycle - 3) & mask)];
      assert(x11172 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11173 = args[2][188 * steps + ((cycle - 3) & mask)];
      assert(x11173 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11174 = args[2][189 * steps + ((cycle - 3) & mask)];
      assert(x11174 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11175 = args[2][190 * steps + ((cycle - 3) & mask)];
      assert(x11175 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11176 = args[2][159 * steps + ((cycle - 4) & mask)];
      assert(x11176 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11177 = args[2][160 * steps + ((cycle - 4) & mask)];
      assert(x11177 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11178 = args[2][161 * steps + ((cycle - 4) & mask)];
      assert(x11178 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11179 = args[2][162 * steps + ((cycle - 4) & mask)];
      assert(x11179 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11180 = args[2][163 * steps + ((cycle - 4) & mask)];
      assert(x11180 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11181 = args[2][164 * steps + ((cycle - 4) & mask)];
      assert(x11181 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11182 = args[2][165 * steps + ((cycle - 4) & mask)];
      assert(x11182 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11183 = args[2][166 * steps + ((cycle - 4) & mask)];
      assert(x11183 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11184 = args[2][167 * steps + ((cycle - 4) & mask)];
      assert(x11184 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11185 = args[2][168 * steps + ((cycle - 4) & mask)];
      assert(x11185 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11186 = args[2][169 * steps + ((cycle - 4) & mask)];
      assert(x11186 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11187 = args[2][170 * steps + ((cycle - 4) & mask)];
      assert(x11187 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11188 = args[2][171 * steps + ((cycle - 4) & mask)];
      assert(x11188 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11189 = args[2][172 * steps + ((cycle - 4) & mask)];
      assert(x11189 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11190 = args[2][173 * steps + ((cycle - 4) & mask)];
      assert(x11190 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11191 = args[2][174 * steps + ((cycle - 4) & mask)];
      assert(x11191 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11192 = args[2][175 * steps + ((cycle - 4) & mask)];
      assert(x11192 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11193 = args[2][176 * steps + ((cycle - 4) & mask)];
      assert(x11193 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11194 = args[2][177 * steps + ((cycle - 4) & mask)];
      assert(x11194 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11195 = args[2][178 * steps + ((cycle - 4) & mask)];
      assert(x11195 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11196 = args[2][179 * steps + ((cycle - 4) & mask)];
      assert(x11196 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11197 = args[2][180 * steps + ((cycle - 4) & mask)];
      assert(x11197 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11198 = args[2][181 * steps + ((cycle - 4) & mask)];
      assert(x11198 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11199 = args[2][182 * steps + ((cycle - 4) & mask)];
      assert(x11199 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11200 = args[2][183 * steps + ((cycle - 4) & mask)];
      assert(x11200 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11201 = args[2][184 * steps + ((cycle - 4) & mask)];
      assert(x11201 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11202 = args[2][185 * steps + ((cycle - 4) & mask)];
      assert(x11202 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11203 = args[2][186 * steps + ((cycle - 4) & mask)];
      assert(x11203 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11204 = args[2][187 * steps + ((cycle - 4) & mask)];
      assert(x11204 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11205 = args[2][188 * steps + ((cycle - 4) & mask)];
      assert(x11205 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11206 = args[2][189 * steps + ((cycle - 4) & mask)];
      assert(x11206 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11207 = args[2][190 * steps + ((cycle - 4) & mask)];
      assert(x11207 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11208 = args[2][191 * steps + ((cycle - 1) & mask)];
      assert(x11208 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11209 = args[2][192 * steps + ((cycle - 1) & mask)];
      assert(x11209 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11210 = args[2][193 * steps + ((cycle - 1) & mask)];
      assert(x11210 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11211 = args[2][194 * steps + ((cycle - 1) & mask)];
      assert(x11211 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11212 = args[2][195 * steps + ((cycle - 1) & mask)];
      assert(x11212 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11213 = args[2][196 * steps + ((cycle - 1) & mask)];
      assert(x11213 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11214 = args[2][197 * steps + ((cycle - 1) & mask)];
      assert(x11214 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11215 = args[2][198 * steps + ((cycle - 1) & mask)];
      assert(x11215 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11216 = args[2][199 * steps + ((cycle - 1) & mask)];
      assert(x11216 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11217 = args[2][200 * steps + ((cycle - 1) & mask)];
      assert(x11217 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11218 = args[2][201 * steps + ((cycle - 1) & mask)];
      assert(x11218 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11219 = args[2][202 * steps + ((cycle - 1) & mask)];
      assert(x11219 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11220 = args[2][203 * steps + ((cycle - 1) & mask)];
      assert(x11220 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11221 = args[2][204 * steps + ((cycle - 1) & mask)];
      assert(x11221 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11222 = args[2][205 * steps + ((cycle - 1) & mask)];
      assert(x11222 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11223 = args[2][206 * steps + ((cycle - 1) & mask)];
      assert(x11223 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11224 = args[2][207 * steps + ((cycle - 1) & mask)];
      assert(x11224 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11225 = args[2][208 * steps + ((cycle - 1) & mask)];
      assert(x11225 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11226 = args[2][209 * steps + ((cycle - 1) & mask)];
      assert(x11226 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11227 = args[2][210 * steps + ((cycle - 1) & mask)];
      assert(x11227 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11228 = args[2][211 * steps + ((cycle - 1) & mask)];
      assert(x11228 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11229 = args[2][212 * steps + ((cycle - 1) & mask)];
      assert(x11229 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11230 = args[2][213 * steps + ((cycle - 1) & mask)];
      assert(x11230 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11231 = args[2][214 * steps + ((cycle - 1) & mask)];
      assert(x11231 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11232 = args[2][215 * steps + ((cycle - 1) & mask)];
      assert(x11232 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11233 = args[2][216 * steps + ((cycle - 1) & mask)];
      assert(x11233 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11234 = args[2][217 * steps + ((cycle - 1) & mask)];
      assert(x11234 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11235 = args[2][218 * steps + ((cycle - 1) & mask)];
      assert(x11235 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11236 = args[2][219 * steps + ((cycle - 1) & mask)];
      assert(x11236 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11237 = args[2][220 * steps + ((cycle - 1) & mask)];
      assert(x11237 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11238 = args[2][221 * steps + ((cycle - 1) & mask)];
      assert(x11238 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11239 = args[2][222 * steps + ((cycle - 1) & mask)];
      assert(x11239 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11240 = args[2][191 * steps + ((cycle - 2) & mask)];
      assert(x11240 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11241 = args[2][192 * steps + ((cycle - 2) & mask)];
      assert(x11241 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11242 = args[2][193 * steps + ((cycle - 2) & mask)];
      assert(x11242 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11243 = args[2][194 * steps + ((cycle - 2) & mask)];
      assert(x11243 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11244 = args[2][195 * steps + ((cycle - 2) & mask)];
      assert(x11244 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11245 = args[2][196 * steps + ((cycle - 2) & mask)];
      assert(x11245 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11246 = args[2][197 * steps + ((cycle - 2) & mask)];
      assert(x11246 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11247 = args[2][198 * steps + ((cycle - 2) & mask)];
      assert(x11247 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11248 = args[2][199 * steps + ((cycle - 2) & mask)];
      assert(x11248 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11249 = args[2][200 * steps + ((cycle - 2) & mask)];
      assert(x11249 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11250 = args[2][201 * steps + ((cycle - 2) & mask)];
      assert(x11250 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11251 = args[2][202 * steps + ((cycle - 2) & mask)];
      assert(x11251 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11252 = args[2][203 * steps + ((cycle - 2) & mask)];
      assert(x11252 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11253 = args[2][204 * steps + ((cycle - 2) & mask)];
      assert(x11253 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11254 = args[2][205 * steps + ((cycle - 2) & mask)];
      assert(x11254 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11255 = args[2][206 * steps + ((cycle - 2) & mask)];
      assert(x11255 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11256 = args[2][207 * steps + ((cycle - 2) & mask)];
      assert(x11256 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11257 = args[2][208 * steps + ((cycle - 2) & mask)];
      assert(x11257 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11258 = args[2][209 * steps + ((cycle - 2) & mask)];
      assert(x11258 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11259 = args[2][210 * steps + ((cycle - 2) & mask)];
      assert(x11259 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11260 = args[2][211 * steps + ((cycle - 2) & mask)];
      assert(x11260 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11261 = args[2][212 * steps + ((cycle - 2) & mask)];
      assert(x11261 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11262 = args[2][213 * steps + ((cycle - 2) & mask)];
      assert(x11262 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11263 = args[2][214 * steps + ((cycle - 2) & mask)];
      assert(x11263 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11264 = args[2][215 * steps + ((cycle - 2) & mask)];
      assert(x11264 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11265 = args[2][216 * steps + ((cycle - 2) & mask)];
      assert(x11265 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11266 = args[2][217 * steps + ((cycle - 2) & mask)];
      assert(x11266 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11267 = args[2][218 * steps + ((cycle - 2) & mask)];
      assert(x11267 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11268 = args[2][219 * steps + ((cycle - 2) & mask)];
      assert(x11268 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11269 = args[2][220 * steps + ((cycle - 2) & mask)];
      assert(x11269 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11270 = args[2][221 * steps + ((cycle - 2) & mask)];
      assert(x11270 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11271 = args[2][222 * steps + ((cycle - 2) & mask)];
      assert(x11271 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11272 = args[2][191 * steps + ((cycle - 3) & mask)];
      assert(x11272 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11273 = args[2][192 * steps + ((cycle - 3) & mask)];
      assert(x11273 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11274 = args[2][193 * steps + ((cycle - 3) & mask)];
      assert(x11274 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11275 = args[2][194 * steps + ((cycle - 3) & mask)];
      assert(x11275 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11276 = args[2][195 * steps + ((cycle - 3) & mask)];
      assert(x11276 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11277 = args[2][196 * steps + ((cycle - 3) & mask)];
      assert(x11277 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11278 = args[2][197 * steps + ((cycle - 3) & mask)];
      assert(x11278 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11279 = args[2][198 * steps + ((cycle - 3) & mask)];
      assert(x11279 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11280 = args[2][199 * steps + ((cycle - 3) & mask)];
      assert(x11280 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11281 = args[2][200 * steps + ((cycle - 3) & mask)];
      assert(x11281 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11282 = args[2][201 * steps + ((cycle - 3) & mask)];
      assert(x11282 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11283 = args[2][202 * steps + ((cycle - 3) & mask)];
      assert(x11283 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11284 = args[2][203 * steps + ((cycle - 3) & mask)];
      assert(x11284 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11285 = args[2][204 * steps + ((cycle - 3) & mask)];
      assert(x11285 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11286 = args[2][205 * steps + ((cycle - 3) & mask)];
      assert(x11286 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11287 = args[2][206 * steps + ((cycle - 3) & mask)];
      assert(x11287 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11288 = args[2][207 * steps + ((cycle - 3) & mask)];
      assert(x11288 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11289 = args[2][208 * steps + ((cycle - 3) & mask)];
      assert(x11289 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11290 = args[2][209 * steps + ((cycle - 3) & mask)];
      assert(x11290 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11291 = args[2][210 * steps + ((cycle - 3) & mask)];
      assert(x11291 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11292 = args[2][211 * steps + ((cycle - 3) & mask)];
      assert(x11292 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11293 = args[2][212 * steps + ((cycle - 3) & mask)];
      assert(x11293 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11294 = args[2][213 * steps + ((cycle - 3) & mask)];
      assert(x11294 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11295 = args[2][214 * steps + ((cycle - 3) & mask)];
      assert(x11295 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11296 = args[2][215 * steps + ((cycle - 3) & mask)];
      assert(x11296 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11297 = args[2][216 * steps + ((cycle - 3) & mask)];
      assert(x11297 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11298 = args[2][217 * steps + ((cycle - 3) & mask)];
      assert(x11298 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11299 = args[2][218 * steps + ((cycle - 3) & mask)];
      assert(x11299 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11300 = args[2][219 * steps + ((cycle - 3) & mask)];
      assert(x11300 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11301 = args[2][220 * steps + ((cycle - 3) & mask)];
      assert(x11301 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11302 = args[2][221 * steps + ((cycle - 3) & mask)];
      assert(x11302 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11303 = args[2][222 * steps + ((cycle - 3) & mask)];
      assert(x11303 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11304 = args[2][191 * steps + ((cycle - 4) & mask)];
      assert(x11304 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11305 = args[2][192 * steps + ((cycle - 4) & mask)];
      assert(x11305 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11306 = args[2][193 * steps + ((cycle - 4) & mask)];
      assert(x11306 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11307 = args[2][194 * steps + ((cycle - 4) & mask)];
      assert(x11307 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11308 = args[2][195 * steps + ((cycle - 4) & mask)];
      assert(x11308 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11309 = args[2][196 * steps + ((cycle - 4) & mask)];
      assert(x11309 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11310 = args[2][197 * steps + ((cycle - 4) & mask)];
      assert(x11310 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11311 = args[2][198 * steps + ((cycle - 4) & mask)];
      assert(x11311 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11312 = args[2][199 * steps + ((cycle - 4) & mask)];
      assert(x11312 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11313 = args[2][200 * steps + ((cycle - 4) & mask)];
      assert(x11313 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11314 = args[2][201 * steps + ((cycle - 4) & mask)];
      assert(x11314 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11315 = args[2][202 * steps + ((cycle - 4) & mask)];
      assert(x11315 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11316 = args[2][203 * steps + ((cycle - 4) & mask)];
      assert(x11316 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11317 = args[2][204 * steps + ((cycle - 4) & mask)];
      assert(x11317 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11318 = args[2][205 * steps + ((cycle - 4) & mask)];
      assert(x11318 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11319 = args[2][206 * steps + ((cycle - 4) & mask)];
      assert(x11319 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11320 = args[2][207 * steps + ((cycle - 4) & mask)];
      assert(x11320 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11321 = args[2][208 * steps + ((cycle - 4) & mask)];
      assert(x11321 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11322 = args[2][209 * steps + ((cycle - 4) & mask)];
      assert(x11322 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11323 = args[2][210 * steps + ((cycle - 4) & mask)];
      assert(x11323 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11324 = args[2][211 * steps + ((cycle - 4) & mask)];
      assert(x11324 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11325 = args[2][212 * steps + ((cycle - 4) & mask)];
      assert(x11325 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11326 = args[2][213 * steps + ((cycle - 4) & mask)];
      assert(x11326 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11327 = args[2][214 * steps + ((cycle - 4) & mask)];
      assert(x11327 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11328 = args[2][215 * steps + ((cycle - 4) & mask)];
      assert(x11328 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11329 = args[2][216 * steps + ((cycle - 4) & mask)];
      assert(x11329 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11330 = args[2][217 * steps + ((cycle - 4) & mask)];
      assert(x11330 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11331 = args[2][218 * steps + ((cycle - 4) & mask)];
      assert(x11331 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11332 = args[2][219 * steps + ((cycle - 4) & mask)];
      assert(x11332 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11333 = args[2][220 * steps + ((cycle - 4) & mask)];
      assert(x11333 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11334 = args[2][221 * steps + ((cycle - 4) & mask)];
      assert(x11334 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11335 = args[2][222 * steps + ((cycle - 4) & mask)];
      assert(x11335 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11336 = args[2][79 * steps + ((cycle - 0) & mask)];
      assert(x11336 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11337 = args[2][80 * steps + ((cycle - 0) & mask)];
      assert(x11337 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11338 = args[2][81 * steps + ((cycle - 0) & mask)];
      assert(x11338 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11339 = args[2][82 * steps + ((cycle - 0) & mask)];
      assert(x11339 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11340 = args[2][83 * steps + ((cycle - 0) & mask)];
      assert(x11340 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11341 = args[2][84 * steps + ((cycle - 0) & mask)];
      assert(x11341 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11342 = args[2][85 * steps + ((cycle - 0) & mask)];
      assert(x11342 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11343 = args[2][86 * steps + ((cycle - 0) & mask)];
      assert(x11343 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11344 = args[2][87 * steps + ((cycle - 0) & mask)];
      assert(x11344 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11345 = args[2][88 * steps + ((cycle - 0) & mask)];
      assert(x11345 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11346 = args[2][12 * steps + ((cycle - 0) & mask)];
      assert(x11346 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11347 = args[2][13 * steps + ((cycle - 0) & mask)];
      assert(x11347 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11348 = args[2][14 * steps + ((cycle - 0) & mask)];
      assert(x11348 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11349 = args[2][15 * steps + ((cycle - 0) & mask)];
      assert(x11349 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11350 = args[2][16 * steps + ((cycle - 0) & mask)];
      assert(x11350 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11351 = args[2][17 * steps + ((cycle - 0) & mask)];
      assert(x11351 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11352 = args[2][18 * steps + ((cycle - 0) & mask)];
      assert(x11352 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11353 = args[2][19 * steps + ((cycle - 0) & mask)];
      assert(x11353 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11354 = args[2][20 * steps + ((cycle - 0) & mask)];
      assert(x11354 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11355 = args[2][21 * steps + ((cycle - 0) & mask)];
      assert(x11355 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11356 = args[2][22 * steps + ((cycle - 0) & mask)];
      assert(x11356 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11357 = args[2][23 * steps + ((cycle - 0) & mask)];
      assert(x11357 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11358 = args[2][24 * steps + ((cycle - 0) & mask)];
      assert(x11358 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11359 = args[2][25 * steps + ((cycle - 0) & mask)];
      assert(x11359 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11360 = args[2][26 * steps + ((cycle - 0) & mask)];
      assert(x11360 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11361 = args[2][27 * steps + ((cycle - 0) & mask)];
      assert(x11361 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11362 = args[2][28 * steps + ((cycle - 0) & mask)];
      assert(x11362 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11363 = args[2][29 * steps + ((cycle - 0) & mask)];
      assert(x11363 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11364 = args[2][30 * steps + ((cycle - 0) & mask)];
      assert(x11364 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11365 = args[2][31 * steps + ((cycle - 0) & mask)];
      assert(x11365 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11366 = args[2][32 * steps + ((cycle - 0) & mask)];
      assert(x11366 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11367 = args[2][33 * steps + ((cycle - 0) & mask)];
      assert(x11367 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11368 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x11368 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11369 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x11369 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11370 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x11370 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x11371 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x11371 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/sha.cpp":132:26)
      auto x11372 = x11369 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":132:11)
      auto x11373 = x11368 + x11372;
      // loc("zirgen/circuit/rv32im/sha.cpp":132:61)
      auto x11374 = x11371 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":132:46)
      auto x11375 = x11370 + x11374;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11376 = x11093 + x11102;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11377 = x11093 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11378 = x11377 * x11102;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11379 = x11376 - x11378;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11380 = x11094 + x11103;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11381 = x11094 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11382 = x11381 * x11103;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11383 = x11380 - x11382;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11384 = x11095 + x11104;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11385 = x11095 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11386 = x11385 * x11104;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11387 = x11384 - x11386;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11388 = x11096 + x11105;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11389 = x11096 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11390 = x11389 * x11105;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11391 = x11388 - x11390;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11392 = x11097 + x11106;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11393 = x11097 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11394 = x11393 * x11106;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11395 = x11392 - x11394;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11396 = x11098 + x11107;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11397 = x11098 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11398 = x11397 * x11107;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11399 = x11396 - x11398;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11400 = x11099 + x11108;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11401 = x11099 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11402 = x11401 * x11108;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11403 = x11400 - x11402;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11404 = x11100 + x11109;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11405 = x11100 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11406 = x11405 * x11109;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11407 = x11404 - x11406;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11408 = x11101 + x11110;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11409 = x11101 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11410 = x11409 * x11110;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11411 = x11408 - x11410;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11412 = x11102 + x11111;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11413 = x11102 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11414 = x11413 * x11111;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11415 = x11412 - x11414;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11416 = x11103 + x11080;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11417 = x11103 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11418 = x11417 * x11080;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11419 = x11416 - x11418;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11420 = x11104 + x11081;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11421 = x11104 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11422 = x11421 * x11081;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11423 = x11420 - x11422;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11424 = x11105 + x11082;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11425 = x11105 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11426 = x11425 * x11082;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11427 = x11424 - x11426;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11428 = x11106 + x11083;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11429 = x11106 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11430 = x11429 * x11083;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11431 = x11428 - x11430;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11432 = x11107 + x11084;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11433 = x11107 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11434 = x11433 * x11084;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11435 = x11432 - x11434;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11436 = x11108 + x11085;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11437 = x11108 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11438 = x11437 * x11085;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11439 = x11436 - x11438;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11440 = x11109 + x11086;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11441 = x11109 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11442 = x11441 * x11086;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11443 = x11440 - x11442;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11444 = x11110 + x11087;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11445 = x11110 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11446 = x11445 * x11087;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11447 = x11444 - x11446;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11448 = x11111 + x11088;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11449 = x11111 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11450 = x11449 * x11088;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11451 = x11448 - x11450;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11452 = x11080 + x11089;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11453 = x11080 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11454 = x11453 * x11089;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11455 = x11452 - x11454;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11456 = x11081 + x11090;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11457 = x11081 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11458 = x11457 * x11090;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11459 = x11456 - x11458;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11460 = x11082 + x11091;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11461 = x11082 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11462 = x11461 * x11091;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11463 = x11460 - x11462;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11464 = x11083 + x11092;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11465 = x11083 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11466 = x11465 * x11092;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11467 = x11464 - x11466;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11468 = x11084 + x11093;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11469 = x11084 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11470 = x11469 * x11093;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11471 = x11468 - x11470;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11472 = x11085 + x11094;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11473 = x11085 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11474 = x11473 * x11094;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11475 = x11472 - x11474;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11476 = x11086 + x11095;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11477 = x11086 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11478 = x11477 * x11095;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11479 = x11476 - x11478;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11480 = x11087 + x11096;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11481 = x11087 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11482 = x11481 * x11096;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11483 = x11480 - x11482;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11484 = x11088 + x11097;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11485 = x11088 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11486 = x11485 * x11097;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11487 = x11484 - x11486;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11488 = x11089 + x11098;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11489 = x11089 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11490 = x11489 * x11098;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11491 = x11488 - x11490;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11492 = x11090 + x11099;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11493 = x11090 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11494 = x11493 * x11099;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11495 = x11492 - x11494;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11496 = x11091 + x11100;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11497 = x11091 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11498 = x11497 * x11100;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11499 = x11496 - x11498;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11500 = x11092 + x11101;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11501 = x11092 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11502 = x11501 * x11101;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11503 = x11500 - x11502;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11504 = x11082 + x11379;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11505 = x11461 * x11379;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11506 = x11504 - x11505;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11507 = x11083 + x11383;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11508 = x11465 * x11383;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11509 = x11507 - x11508;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11510 = x11084 + x11387;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11511 = x11469 * x11387;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11512 = x11510 - x11511;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11513 = x11085 + x11391;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11514 = x11473 * x11391;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11515 = x11513 - x11514;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11516 = x11086 + x11395;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11517 = x11477 * x11395;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11518 = x11516 - x11517;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11519 = x11087 + x11399;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11520 = x11481 * x11399;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11521 = x11519 - x11520;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11522 = x11088 + x11403;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11523 = x11485 * x11403;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11524 = x11522 - x11523;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11525 = x11089 + x11407;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11526 = x11489 * x11407;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11527 = x11525 - x11526;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11528 = x11090 + x11411;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11529 = x11493 * x11411;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11530 = x11528 - x11529;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11531 = x11091 + x11415;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11532 = x11497 * x11415;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11533 = x11531 - x11532;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11534 = x11092 + x11419;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11535 = x11501 * x11419;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11536 = x11534 - x11535;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11537 = x11093 + x11423;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11538 = x11377 * x11423;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11539 = x11537 - x11538;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11540 = x11094 + x11427;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11541 = x11381 * x11427;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11542 = x11540 - x11541;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11543 = x11095 + x11431;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11544 = x11385 * x11431;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11545 = x11543 - x11544;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11546 = x11096 + x11435;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11547 = x11389 * x11435;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11548 = x11546 - x11547;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11549 = x11097 + x11439;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11550 = x11393 * x11439;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11551 = x11549 - x11550;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11552 = x11098 + x11443;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11553 = x11397 * x11443;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11554 = x11552 - x11553;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11555 = x11099 + x11447;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11556 = x11401 * x11447;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11557 = x11555 - x11556;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11558 = x11100 + x11451;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11559 = x11405 * x11451;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11560 = x11558 - x11559;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11561 = x11101 + x11455;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11562 = x11409 * x11455;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11563 = x11561 - x11562;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11564 = x11102 + x11459;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11565 = x11413 * x11459;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11566 = x11564 - x11565;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11567 = x11103 + x11463;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11568 = x11417 * x11463;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11569 = x11567 - x11568;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11570 = x11104 + x11467;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11571 = x11421 * x11467;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11572 = x11570 - x11571;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11573 = x11105 + x11471;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11574 = x11425 * x11471;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11575 = x11573 - x11574;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11576 = x11106 + x11475;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11577 = x11429 * x11475;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11578 = x11576 - x11577;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11579 = x11107 + x11479;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11580 = x11433 * x11479;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11581 = x11579 - x11580;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11582 = x11108 + x11483;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11583 = x11437 * x11483;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11584 = x11582 - x11583;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11585 = x11109 + x11487;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11586 = x11441 * x11487;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11587 = x11585 - x11586;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11588 = x11110 + x11491;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11589 = x11445 * x11491;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11590 = x11588 - x11589;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11591 = x11111 + x11495;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11592 = x11449 * x11495;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11593 = x11591 - x11592;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11594 = x11080 + x11499;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11595 = x11453 * x11499;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11596 = x11594 - x11595;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11597 = x11081 + x11503;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11598 = x11457 * x11503;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11599 = x11597 - x11598;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11600 = x11219 + x11233;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11601 = x11219 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11602 = x11601 * x11233;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11603 = x11600 - x11602;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11604 = x11220 + x11234;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11605 = x11220 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11606 = x11605 * x11234;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11607 = x11604 - x11606;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11608 = x11221 + x11235;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11609 = x11221 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11610 = x11609 * x11235;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11611 = x11608 - x11610;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11612 = x11222 + x11236;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11613 = x11222 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11614 = x11613 * x11236;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11615 = x11612 - x11614;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11616 = x11223 + x11237;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11617 = x11223 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11618 = x11617 * x11237;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11619 = x11616 - x11618;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11620 = x11224 + x11238;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11621 = x11224 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11622 = x11621 * x11238;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11623 = x11620 - x11622;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11624 = x11225 + x11239;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11625 = x11225 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11626 = x11625 * x11239;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11627 = x11624 - x11626;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11628 = x11226 + x11208;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11629 = x11226 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11630 = x11629 * x11208;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11631 = x11628 - x11630;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11632 = x11227 + x11209;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11633 = x11227 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11634 = x11633 * x11209;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11635 = x11632 - x11634;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11636 = x11228 + x11210;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11637 = x11228 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11638 = x11637 * x11210;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11639 = x11636 - x11638;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11640 = x11229 + x11211;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11641 = x11229 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11642 = x11641 * x11211;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11643 = x11640 - x11642;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11644 = x11230 + x11212;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11645 = x11230 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11646 = x11645 * x11212;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11647 = x11644 - x11646;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11648 = x11231 + x11213;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11649 = x11231 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11650 = x11649 * x11213;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11651 = x11648 - x11650;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11652 = x11232 + x11214;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11653 = x11232 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11654 = x11653 * x11214;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11655 = x11652 - x11654;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11656 = x11233 + x11215;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11657 = x11233 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11658 = x11657 * x11215;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11659 = x11656 - x11658;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11660 = x11234 + x11216;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11661 = x11234 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11662 = x11661 * x11216;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11663 = x11660 - x11662;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11664 = x11235 + x11217;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11665 = x11235 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11666 = x11665 * x11217;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11667 = x11664 - x11666;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11668 = x11236 + x11218;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11669 = x11236 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11670 = x11669 * x11218;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11671 = x11668 - x11670;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11672 = x11237 + x11219;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11673 = x11237 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11674 = x11673 * x11219;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11675 = x11672 - x11674;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11676 = x11238 + x11220;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11677 = x11238 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11678 = x11677 * x11220;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11679 = x11676 - x11678;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11680 = x11239 + x11221;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11681 = x11239 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11682 = x11681 * x11221;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11683 = x11680 - x11682;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11684 = x11208 + x11222;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11685 = x11208 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11686 = x11685 * x11222;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11687 = x11684 - x11686;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11688 = x11209 + x11223;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11689 = x11209 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11690 = x11689 * x11223;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11691 = x11688 - x11690;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11692 = x11210 + x11224;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11693 = x11210 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11694 = x11693 * x11224;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11695 = x11692 - x11694;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11696 = x11211 + x11225;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11697 = x11211 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11698 = x11697 * x11225;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11699 = x11696 - x11698;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11700 = x11212 + x11226;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11701 = x11212 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11702 = x11701 * x11226;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11703 = x11700 - x11702;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11704 = x11213 + x11227;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11705 = x11213 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11706 = x11705 * x11227;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11707 = x11704 - x11706;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11708 = x11214 + x11228;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11709 = x11214 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11710 = x11709 * x11228;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11711 = x11708 - x11710;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11712 = x11215 + x11229;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11713 = x11215 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11714 = x11713 * x11229;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11715 = x11712 - x11714;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11716 = x11216 + x11230;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11717 = x11216 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11718 = x11717 * x11230;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11719 = x11716 - x11718;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11720 = x11217 + x11231;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11721 = x11217 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11722 = x11721 * x11231;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11723 = x11720 - x11722;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11724 = x11218 + x11232;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11725 = x11218 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11726 = x11725 * x11232;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11727 = x11724 - x11726;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11728 = x11214 + x11603;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11729 = x11709 * x11603;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11730 = x11728 - x11729;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11731 = x11215 + x11607;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11732 = x11713 * x11607;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11733 = x11731 - x11732;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11734 = x11216 + x11611;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11735 = x11717 * x11611;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11736 = x11734 - x11735;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11737 = x11217 + x11615;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11738 = x11721 * x11615;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11739 = x11737 - x11738;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11740 = x11218 + x11619;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11741 = x11725 * x11619;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11742 = x11740 - x11741;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11743 = x11219 + x11623;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11744 = x11601 * x11623;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11745 = x11743 - x11744;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11746 = x11220 + x11627;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11747 = x11605 * x11627;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11748 = x11746 - x11747;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11749 = x11221 + x11631;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11750 = x11609 * x11631;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11751 = x11749 - x11750;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11752 = x11222 + x11635;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11753 = x11613 * x11635;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11754 = x11752 - x11753;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11755 = x11223 + x11639;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11756 = x11617 * x11639;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11757 = x11755 - x11756;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11758 = x11224 + x11643;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11759 = x11621 * x11643;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11760 = x11758 - x11759;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11761 = x11225 + x11647;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11762 = x11625 * x11647;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11763 = x11761 - x11762;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11764 = x11226 + x11651;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11765 = x11629 * x11651;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11766 = x11764 - x11765;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11767 = x11227 + x11655;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11768 = x11633 * x11655;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11769 = x11767 - x11768;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11770 = x11228 + x11659;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11771 = x11637 * x11659;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11772 = x11770 - x11771;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11773 = x11229 + x11663;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11774 = x11641 * x11663;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11775 = x11773 - x11774;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11776 = x11230 + x11667;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11777 = x11645 * x11667;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11778 = x11776 - x11777;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11779 = x11231 + x11671;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11780 = x11649 * x11671;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11781 = x11779 - x11780;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11782 = x11232 + x11675;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11783 = x11653 * x11675;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11784 = x11782 - x11783;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11785 = x11233 + x11679;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11786 = x11657 * x11679;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11787 = x11785 - x11786;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11788 = x11234 + x11683;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11789 = x11661 * x11683;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11790 = x11788 - x11789;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11791 = x11235 + x11687;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11792 = x11665 * x11687;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11793 = x11791 - x11792;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11794 = x11236 + x11691;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11795 = x11669 * x11691;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11796 = x11794 - x11795;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11797 = x11237 + x11695;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11798 = x11673 * x11695;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11799 = x11797 - x11798;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11800 = x11238 + x11699;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11801 = x11677 * x11699;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11802 = x11800 - x11801;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11803 = x11239 + x11703;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11804 = x11681 * x11703;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11805 = x11803 - x11804;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11806 = x11208 + x11707;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11807 = x11685 * x11707;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11808 = x11806 - x11807;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11809 = x11209 + x11711;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11810 = x11689 * x11711;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11811 = x11809 - x11810;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11812 = x11210 + x11715;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11813 = x11693 * x11715;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11814 = x11812 - x11813;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11815 = x11211 + x11719;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11816 = x11697 * x11719;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11817 = x11815 - x11816;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11818 = x11212 + x11723;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11819 = x11701 * x11723;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11820 = x11818 - x11819;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11821 = x11213 + x11727;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:28)
      auto x11822 = x11705 * x11727;
      // loc("zirgen/circuit/rv32im/sha.cpp":47:14)
      auto x11823 = x11821 - x11822;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11824 = x11337 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11825 = x11336 + x11824;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11826 = x11338 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11827 = x11825 + x11826;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11828 = x11339 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11829 = x11827 + x11828;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11830 = x11340 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11831 = x11829 + x11830;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11832 = x11341 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11833 = x11831 + x11832;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11834 = x11342 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11835 = x11833 + x11834;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11836 = x11343 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11837 = x11835 + x11836;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11838 = x11344 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11839 = x11837 + x11838;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11840 = x11345 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11841 = x11839 + x11840;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11842 = x11346 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11843 = x11841 + x11842;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11844 = x11347 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11845 = x11843 + x11844;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11846 = x11348 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11847 = x11845 + x11846;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11848 = x11349 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11849 = x11847 + x11848;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11850 = x11350 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11851 = x11849 + x11850;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11852 = x11351 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11853 = x11851 + x11852;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11854 = x11353 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11855 = x11352 + x11854;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11856 = x11354 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11857 = x11855 + x11856;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11858 = x11355 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11859 = x11857 + x11858;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11860 = x11356 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11861 = x11859 + x11860;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11862 = x11357 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11863 = x11861 + x11862;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11864 = x11358 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11865 = x11863 + x11864;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11866 = x11359 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11867 = x11865 + x11866;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11868 = x11360 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11869 = x11867 + x11868;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11870 = x11361 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11871 = x11869 + x11870;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11872 = x11362 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11873 = x11871 + x11872;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11874 = x11363 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11875 = x11873 + x11874;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11876 = x11364 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11877 = x11875 + x11876;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11878 = x11365 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11879 = x11877 + x11878;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11880 = x11366 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11881 = x11879 + x11880;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11882 = x11367 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11883 = x11881 + x11882;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11884 = x11305 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11885 = x11304 + x11884;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11886 = x11306 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11887 = x11885 + x11886;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11888 = x11307 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11889 = x11887 + x11888;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11890 = x11308 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11891 = x11889 + x11890;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11892 = x11309 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11893 = x11891 + x11892;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11894 = x11310 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11895 = x11893 + x11894;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11896 = x11311 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11897 = x11895 + x11896;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11898 = x11312 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11899 = x11897 + x11898;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11900 = x11313 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11901 = x11899 + x11900;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11902 = x11314 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11903 = x11901 + x11902;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11904 = x11315 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11905 = x11903 + x11904;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11906 = x11316 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11907 = x11905 + x11906;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11908 = x11317 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11909 = x11907 + x11908;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11910 = x11318 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11911 = x11909 + x11910;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11912 = x11319 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11913 = x11911 + x11912;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11914 = x11321 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11915 = x11320 + x11914;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11916 = x11322 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11917 = x11915 + x11916;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11918 = x11323 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11919 = x11917 + x11918;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11920 = x11324 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11921 = x11919 + x11920;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11922 = x11325 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11923 = x11921 + x11922;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11924 = x11326 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11925 = x11923 + x11924;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11926 = x11327 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11927 = x11925 + x11926;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11928 = x11328 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11929 = x11927 + x11928;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11930 = x11329 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11931 = x11929 + x11930;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11932 = x11330 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11933 = x11931 + x11932;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11934 = x11331 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11935 = x11933 + x11934;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11936 = x11332 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11937 = x11935 + x11936;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11938 = x11333 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11939 = x11937 + x11938;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11940 = x11334 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11941 = x11939 + x11940;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x11942 = x11335 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x11943 = x11941 + x11942;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11944 = x11208 * x11240;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11945 = x96 - x11208;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11946 = x11945 * x11272;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11947 = x11944 + x11946;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11948 = x11209 * x11241;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11949 = x96 - x11209;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11950 = x11949 * x11273;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11951 = x11948 + x11950;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11952 = x11210 * x11242;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11953 = x96 - x11210;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11954 = x11953 * x11274;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11955 = x11952 + x11954;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11956 = x11211 * x11243;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11957 = x96 - x11211;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11958 = x11957 * x11275;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11959 = x11956 + x11958;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11960 = x11212 * x11244;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11961 = x96 - x11212;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11962 = x11961 * x11276;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11963 = x11960 + x11962;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11964 = x11213 * x11245;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11965 = x96 - x11213;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11966 = x11965 * x11277;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11967 = x11964 + x11966;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11968 = x11214 * x11246;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11969 = x96 - x11214;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11970 = x11969 * x11278;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11971 = x11968 + x11970;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11972 = x11215 * x11247;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11973 = x96 - x11215;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11974 = x11973 * x11279;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11975 = x11972 + x11974;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11976 = x11216 * x11248;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11977 = x96 - x11216;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11978 = x11977 * x11280;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11979 = x11976 + x11978;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11980 = x11217 * x11249;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11981 = x96 - x11217;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11982 = x11981 * x11281;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11983 = x11980 + x11982;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11984 = x11218 * x11250;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11985 = x96 - x11218;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11986 = x11985 * x11282;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11987 = x11984 + x11986;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11988 = x11219 * x11251;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11989 = x96 - x11219;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11990 = x11989 * x11283;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11991 = x11988 + x11990;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11992 = x11220 * x11252;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11993 = x96 - x11220;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11994 = x11993 * x11284;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11995 = x11992 + x11994;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11996 = x11221 * x11253;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x11997 = x96 - x11221;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x11998 = x11997 * x11285;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x11999 = x11996 + x11998;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12000 = x11222 * x11254;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12001 = x96 - x11222;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12002 = x12001 * x11286;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12003 = x12000 + x12002;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12004 = x11223 * x11255;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12005 = x96 - x11223;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12006 = x12005 * x11287;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12007 = x12004 + x12006;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12008 = x11224 * x11256;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12009 = x96 - x11224;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12010 = x12009 * x11288;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12011 = x12008 + x12010;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12012 = x11225 * x11257;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12013 = x96 - x11225;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12014 = x12013 * x11289;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12015 = x12012 + x12014;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12016 = x11226 * x11258;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12017 = x96 - x11226;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12018 = x12017 * x11290;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12019 = x12016 + x12018;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12020 = x11227 * x11259;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12021 = x96 - x11227;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12022 = x12021 * x11291;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12023 = x12020 + x12022;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12024 = x11228 * x11260;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12025 = x96 - x11228;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12026 = x12025 * x11292;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12027 = x12024 + x12026;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12028 = x11229 * x11261;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12029 = x96 - x11229;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12030 = x12029 * x11293;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12031 = x12028 + x12030;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12032 = x11230 * x11262;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12033 = x96 - x11230;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12034 = x12033 * x11294;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12035 = x12032 + x12034;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12036 = x11231 * x11263;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12037 = x96 - x11231;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12038 = x12037 * x11295;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12039 = x12036 + x12038;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12040 = x11232 * x11264;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12041 = x96 - x11232;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12042 = x12041 * x11296;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12043 = x12040 + x12042;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12044 = x11233 * x11265;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12045 = x96 - x11233;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12046 = x12045 * x11297;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12047 = x12044 + x12046;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12048 = x11234 * x11266;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12049 = x96 - x11234;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12050 = x12049 * x11298;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12051 = x12048 + x12050;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12052 = x11235 * x11267;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12053 = x96 - x11235;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12054 = x12053 * x11299;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12055 = x12052 + x12054;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12056 = x11236 * x11268;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12057 = x96 - x11236;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12058 = x12057 * x11300;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12059 = x12056 + x12058;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12060 = x11237 * x11269;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12061 = x96 - x11237;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12062 = x12061 * x11301;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12063 = x12060 + x12062;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12064 = x11238 * x11270;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12065 = x96 - x11238;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12066 = x12065 * x11302;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12067 = x12064 + x12066;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12068 = x11239 * x11271;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:29)
      auto x12069 = x96 - x11239;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:28)
      auto x12070 = x12069 * x11303;
      // loc("zirgen/circuit/rv32im/sha.cpp":64:14)
      auto x12071 = x12068 + x12070;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12072 = x11951 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12073 = x11947 + x12072;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12074 = x11955 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12075 = x12073 + x12074;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12076 = x11959 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12077 = x12075 + x12076;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12078 = x11963 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12079 = x12077 + x12078;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12080 = x11967 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12081 = x12079 + x12080;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12082 = x11971 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12083 = x12081 + x12082;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12084 = x11975 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12085 = x12083 + x12084;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12086 = x11979 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12087 = x12085 + x12086;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12088 = x11983 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12089 = x12087 + x12088;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12090 = x11987 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12091 = x12089 + x12090;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12092 = x11991 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12093 = x12091 + x12092;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12094 = x11995 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12095 = x12093 + x12094;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12096 = x11999 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12097 = x12095 + x12096;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12098 = x12003 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12099 = x12097 + x12098;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12100 = x12007 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12101 = x12099 + x12100;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12102 = x12015 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12103 = x12011 + x12102;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12104 = x12019 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12105 = x12103 + x12104;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12106 = x12023 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12107 = x12105 + x12106;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12108 = x12027 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12109 = x12107 + x12108;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12110 = x12031 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12111 = x12109 + x12110;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12112 = x12035 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12113 = x12111 + x12112;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12114 = x12039 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12115 = x12113 + x12114;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12116 = x12043 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12117 = x12115 + x12116;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12118 = x12047 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12119 = x12117 + x12118;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12120 = x12051 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12121 = x12119 + x12120;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12122 = x12055 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12123 = x12121 + x12122;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12124 = x12059 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12125 = x12123 + x12124;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12126 = x12063 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12127 = x12125 + x12126;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12128 = x12067 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12129 = x12127 + x12128;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12130 = x12071 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12131 = x12129 + x12130;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12132 = x11733 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12133 = x11730 + x12132;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12134 = x11736 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12135 = x12133 + x12134;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12136 = x11739 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12137 = x12135 + x12136;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12138 = x11742 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12139 = x12137 + x12138;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12140 = x11745 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12141 = x12139 + x12140;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12142 = x11748 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12143 = x12141 + x12142;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12144 = x11751 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12145 = x12143 + x12144;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12146 = x11754 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12147 = x12145 + x12146;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12148 = x11757 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12149 = x12147 + x12148;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12150 = x11760 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12151 = x12149 + x12150;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12152 = x11763 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12153 = x12151 + x12152;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12154 = x11766 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12155 = x12153 + x12154;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12156 = x11769 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12157 = x12155 + x12156;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12158 = x11772 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12159 = x12157 + x12158;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12160 = x11775 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12161 = x12159 + x12160;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12162 = x11781 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12163 = x11778 + x12162;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12164 = x11784 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12165 = x12163 + x12164;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12166 = x11787 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12167 = x12165 + x12166;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12168 = x11790 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12169 = x12167 + x12168;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12170 = x11793 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12171 = x12169 + x12170;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12172 = x11796 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12173 = x12171 + x12172;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12174 = x11799 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12175 = x12173 + x12174;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12176 = x11802 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12177 = x12175 + x12176;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12178 = x11805 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12179 = x12177 + x12178;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12180 = x11808 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12181 = x12179 + x12180;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12182 = x11811 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12183 = x12181 + x12182;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12184 = x11814 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12185 = x12183 + x12184;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12186 = x11817 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12187 = x12185 + x12186;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12188 = x11820 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12189 = x12187 + x12188;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12190 = x11823 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12191 = x12189 + x12190;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12192 = x12101 + x12161;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12193 = x12131 + x12191;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12194 = x11913 + x12192;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12195 = x11943 + x12193;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12196 = x11373 + x12194;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12197 = x11375 + x12195;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12198 = x11853 + x12196;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12199 = x11883 + x12197;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12200 = x11080 * x11112;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12201 = x96 - x11144;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12202 = x12200 * x12201;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12203 = x96 - x11112;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12204 = x11080 * x12203;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12205 = x12204 * x11144;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12206 = x12202 + x12205;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12207 = x96 - x11080;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12208 = x12207 * x11112;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12209 = x12208 * x11144;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12210 = x12206 + x12209;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12211 = x12200 * x11144;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12212 = x12210 + x12211;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12213 = x11081 * x11113;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12214 = x96 - x11145;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12215 = x12213 * x12214;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12216 = x96 - x11113;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12217 = x11081 * x12216;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12218 = x12217 * x11145;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12219 = x12215 + x12218;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12220 = x96 - x11081;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12221 = x12220 * x11113;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12222 = x12221 * x11145;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12223 = x12219 + x12222;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12224 = x12213 * x11145;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12225 = x12223 + x12224;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12226 = x11082 * x11114;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12227 = x96 - x11146;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12228 = x12226 * x12227;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12229 = x96 - x11114;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12230 = x11082 * x12229;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12231 = x12230 * x11146;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12232 = x12228 + x12231;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12233 = x96 - x11082;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12234 = x12233 * x11114;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12235 = x12234 * x11146;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12236 = x12232 + x12235;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12237 = x12226 * x11146;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12238 = x12236 + x12237;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12239 = x11083 * x11115;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12240 = x96 - x11147;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12241 = x12239 * x12240;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12242 = x96 - x11115;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12243 = x11083 * x12242;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12244 = x12243 * x11147;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12245 = x12241 + x12244;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12246 = x96 - x11083;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12247 = x12246 * x11115;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12248 = x12247 * x11147;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12249 = x12245 + x12248;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12250 = x12239 * x11147;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12251 = x12249 + x12250;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12252 = x11084 * x11116;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12253 = x96 - x11148;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12254 = x12252 * x12253;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12255 = x96 - x11116;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12256 = x11084 * x12255;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12257 = x12256 * x11148;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12258 = x12254 + x12257;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12259 = x96 - x11084;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12260 = x12259 * x11116;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12261 = x12260 * x11148;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12262 = x12258 + x12261;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12263 = x12252 * x11148;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12264 = x12262 + x12263;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12265 = x11085 * x11117;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12266 = x96 - x11149;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12267 = x12265 * x12266;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12268 = x96 - x11117;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12269 = x11085 * x12268;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12270 = x12269 * x11149;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12271 = x12267 + x12270;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12272 = x96 - x11085;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12273 = x12272 * x11117;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12274 = x12273 * x11149;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12275 = x12271 + x12274;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12276 = x12265 * x11149;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12277 = x12275 + x12276;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12278 = x11086 * x11118;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12279 = x96 - x11150;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12280 = x12278 * x12279;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12281 = x96 - x11118;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12282 = x11086 * x12281;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12283 = x12282 * x11150;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12284 = x12280 + x12283;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12285 = x96 - x11086;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12286 = x12285 * x11118;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12287 = x12286 * x11150;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12288 = x12284 + x12287;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12289 = x12278 * x11150;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12290 = x12288 + x12289;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12291 = x11087 * x11119;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12292 = x96 - x11151;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12293 = x12291 * x12292;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12294 = x96 - x11119;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12295 = x11087 * x12294;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12296 = x12295 * x11151;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12297 = x12293 + x12296;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12298 = x96 - x11087;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12299 = x12298 * x11119;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12300 = x12299 * x11151;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12301 = x12297 + x12300;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12302 = x12291 * x11151;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12303 = x12301 + x12302;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12304 = x11088 * x11120;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12305 = x96 - x11152;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12306 = x12304 * x12305;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12307 = x96 - x11120;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12308 = x11088 * x12307;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12309 = x12308 * x11152;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12310 = x12306 + x12309;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12311 = x96 - x11088;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12312 = x12311 * x11120;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12313 = x12312 * x11152;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12314 = x12310 + x12313;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12315 = x12304 * x11152;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12316 = x12314 + x12315;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12317 = x11089 * x11121;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12318 = x96 - x11153;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12319 = x12317 * x12318;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12320 = x96 - x11121;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12321 = x11089 * x12320;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12322 = x12321 * x11153;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12323 = x12319 + x12322;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12324 = x96 - x11089;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12325 = x12324 * x11121;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12326 = x12325 * x11153;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12327 = x12323 + x12326;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12328 = x12317 * x11153;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12329 = x12327 + x12328;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12330 = x11090 * x11122;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12331 = x96 - x11154;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12332 = x12330 * x12331;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12333 = x96 - x11122;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12334 = x11090 * x12333;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12335 = x12334 * x11154;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12336 = x12332 + x12335;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12337 = x96 - x11090;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12338 = x12337 * x11122;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12339 = x12338 * x11154;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12340 = x12336 + x12339;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12341 = x12330 * x11154;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12342 = x12340 + x12341;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12343 = x11091 * x11123;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12344 = x96 - x11155;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12345 = x12343 * x12344;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12346 = x96 - x11123;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12347 = x11091 * x12346;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12348 = x12347 * x11155;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12349 = x12345 + x12348;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12350 = x96 - x11091;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12351 = x12350 * x11123;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12352 = x12351 * x11155;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12353 = x12349 + x12352;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12354 = x12343 * x11155;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12355 = x12353 + x12354;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12356 = x11092 * x11124;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12357 = x96 - x11156;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12358 = x12356 * x12357;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12359 = x96 - x11124;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12360 = x11092 * x12359;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12361 = x12360 * x11156;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12362 = x12358 + x12361;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12363 = x96 - x11092;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12364 = x12363 * x11124;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12365 = x12364 * x11156;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12366 = x12362 + x12365;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12367 = x12356 * x11156;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12368 = x12366 + x12367;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12369 = x11093 * x11125;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12370 = x96 - x11157;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12371 = x12369 * x12370;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12372 = x96 - x11125;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12373 = x11093 * x12372;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12374 = x12373 * x11157;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12375 = x12371 + x12374;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12376 = x96 - x11093;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12377 = x12376 * x11125;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12378 = x12377 * x11157;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12379 = x12375 + x12378;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12380 = x12369 * x11157;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12381 = x12379 + x12380;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12382 = x11094 * x11126;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12383 = x96 - x11158;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12384 = x12382 * x12383;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12385 = x96 - x11126;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12386 = x11094 * x12385;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12387 = x12386 * x11158;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12388 = x12384 + x12387;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12389 = x96 - x11094;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12390 = x12389 * x11126;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12391 = x12390 * x11158;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12392 = x12388 + x12391;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12393 = x12382 * x11158;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12394 = x12392 + x12393;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12395 = x11095 * x11127;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12396 = x96 - x11159;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12397 = x12395 * x12396;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12398 = x96 - x11127;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12399 = x11095 * x12398;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12400 = x12399 * x11159;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12401 = x12397 + x12400;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12402 = x96 - x11095;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12403 = x12402 * x11127;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12404 = x12403 * x11159;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12405 = x12401 + x12404;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12406 = x12395 * x11159;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12407 = x12405 + x12406;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12408 = x11096 * x11128;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12409 = x96 - x11160;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12410 = x12408 * x12409;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12411 = x96 - x11128;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12412 = x11096 * x12411;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12413 = x12412 * x11160;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12414 = x12410 + x12413;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12415 = x96 - x11096;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12416 = x12415 * x11128;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12417 = x12416 * x11160;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12418 = x12414 + x12417;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12419 = x12408 * x11160;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12420 = x12418 + x12419;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12421 = x11097 * x11129;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12422 = x96 - x11161;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12423 = x12421 * x12422;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12424 = x96 - x11129;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12425 = x11097 * x12424;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12426 = x12425 * x11161;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12427 = x12423 + x12426;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12428 = x96 - x11097;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12429 = x12428 * x11129;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12430 = x12429 * x11161;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12431 = x12427 + x12430;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12432 = x12421 * x11161;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12433 = x12431 + x12432;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12434 = x11098 * x11130;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12435 = x96 - x11162;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12436 = x12434 * x12435;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12437 = x96 - x11130;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12438 = x11098 * x12437;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12439 = x12438 * x11162;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12440 = x12436 + x12439;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12441 = x96 - x11098;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12442 = x12441 * x11130;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12443 = x12442 * x11162;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12444 = x12440 + x12443;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12445 = x12434 * x11162;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12446 = x12444 + x12445;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12447 = x11099 * x11131;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12448 = x96 - x11163;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12449 = x12447 * x12448;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12450 = x96 - x11131;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12451 = x11099 * x12450;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12452 = x12451 * x11163;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12453 = x12449 + x12452;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12454 = x96 - x11099;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12455 = x12454 * x11131;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12456 = x12455 * x11163;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12457 = x12453 + x12456;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12458 = x12447 * x11163;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12459 = x12457 + x12458;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12460 = x11100 * x11132;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12461 = x96 - x11164;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12462 = x12460 * x12461;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12463 = x96 - x11132;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12464 = x11100 * x12463;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12465 = x12464 * x11164;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12466 = x12462 + x12465;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12467 = x96 - x11100;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12468 = x12467 * x11132;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12469 = x12468 * x11164;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12470 = x12466 + x12469;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12471 = x12460 * x11164;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12472 = x12470 + x12471;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12473 = x11101 * x11133;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12474 = x96 - x11165;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12475 = x12473 * x12474;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12476 = x96 - x11133;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12477 = x11101 * x12476;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12478 = x12477 * x11165;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12479 = x12475 + x12478;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12480 = x96 - x11101;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12481 = x12480 * x11133;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12482 = x12481 * x11165;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12483 = x12479 + x12482;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12484 = x12473 * x11165;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12485 = x12483 + x12484;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12486 = x11102 * x11134;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12487 = x96 - x11166;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12488 = x12486 * x12487;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12489 = x96 - x11134;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12490 = x11102 * x12489;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12491 = x12490 * x11166;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12492 = x12488 + x12491;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12493 = x96 - x11102;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12494 = x12493 * x11134;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12495 = x12494 * x11166;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12496 = x12492 + x12495;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12497 = x12486 * x11166;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12498 = x12496 + x12497;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12499 = x11103 * x11135;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12500 = x96 - x11167;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12501 = x12499 * x12500;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12502 = x96 - x11135;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12503 = x11103 * x12502;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12504 = x12503 * x11167;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12505 = x12501 + x12504;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12506 = x96 - x11103;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12507 = x12506 * x11135;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12508 = x12507 * x11167;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12509 = x12505 + x12508;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12510 = x12499 * x11167;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12511 = x12509 + x12510;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12512 = x11104 * x11136;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12513 = x96 - x11168;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12514 = x12512 * x12513;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12515 = x96 - x11136;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12516 = x11104 * x12515;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12517 = x12516 * x11168;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12518 = x12514 + x12517;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12519 = x96 - x11104;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12520 = x12519 * x11136;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12521 = x12520 * x11168;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12522 = x12518 + x12521;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12523 = x12512 * x11168;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12524 = x12522 + x12523;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12525 = x11105 * x11137;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12526 = x96 - x11169;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12527 = x12525 * x12526;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12528 = x96 - x11137;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12529 = x11105 * x12528;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12530 = x12529 * x11169;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12531 = x12527 + x12530;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12532 = x96 - x11105;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12533 = x12532 * x11137;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12534 = x12533 * x11169;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12535 = x12531 + x12534;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12536 = x12525 * x11169;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12537 = x12535 + x12536;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12538 = x11106 * x11138;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12539 = x96 - x11170;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12540 = x12538 * x12539;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12541 = x96 - x11138;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12542 = x11106 * x12541;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12543 = x12542 * x11170;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12544 = x12540 + x12543;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12545 = x96 - x11106;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12546 = x12545 * x11138;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12547 = x12546 * x11170;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12548 = x12544 + x12547;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12549 = x12538 * x11170;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12550 = x12548 + x12549;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12551 = x11107 * x11139;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12552 = x96 - x11171;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12553 = x12551 * x12552;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12554 = x96 - x11139;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12555 = x11107 * x12554;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12556 = x12555 * x11171;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12557 = x12553 + x12556;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12558 = x96 - x11107;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12559 = x12558 * x11139;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12560 = x12559 * x11171;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12561 = x12557 + x12560;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12562 = x12551 * x11171;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12563 = x12561 + x12562;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12564 = x11108 * x11140;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12565 = x96 - x11172;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12566 = x12564 * x12565;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12567 = x96 - x11140;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12568 = x11108 * x12567;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12569 = x12568 * x11172;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12570 = x12566 + x12569;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12571 = x96 - x11108;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12572 = x12571 * x11140;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12573 = x12572 * x11172;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12574 = x12570 + x12573;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12575 = x12564 * x11172;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12576 = x12574 + x12575;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12577 = x11109 * x11141;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12578 = x96 - x11173;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12579 = x12577 * x12578;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12580 = x96 - x11141;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12581 = x11109 * x12580;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12582 = x12581 * x11173;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12583 = x12579 + x12582;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12584 = x96 - x11109;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12585 = x12584 * x11141;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12586 = x12585 * x11173;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12587 = x12583 + x12586;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12588 = x12577 * x11173;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12589 = x12587 + x12588;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12590 = x11110 * x11142;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12591 = x96 - x11174;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12592 = x12590 * x12591;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12593 = x96 - x11142;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12594 = x11110 * x12593;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12595 = x12594 * x11174;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12596 = x12592 + x12595;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12597 = x96 - x11110;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12598 = x12597 * x11142;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12599 = x12598 * x11174;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12600 = x12596 + x12599;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12601 = x12590 * x11174;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12602 = x12600 + x12601;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12603 = x11111 * x11143;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:29)
      auto x12604 = x96 - x11175;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12605 = x12603 * x12604;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:49)
      auto x12606 = x96 - x11143;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12607 = x11111 * x12606;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:41)
      auto x12608 = x12607 * x11175;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12609 = x12605 + x12608;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:69)
      auto x12610 = x96 - x11111;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12611 = x12610 * x11143;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:68)
      auto x12612 = x12611 * x11175;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12613 = x12609 + x12612;
      // loc("zirgen/circuit/rv32im/sha.cpp":56:14)
      auto x12614 = x12603 * x11175;
      // loc("zirgen/circuit/rv32im/sha.cpp":55:14)
      auto x12615 = x12613 + x12614;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12616 = x12225 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12617 = x12212 + x12616;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12618 = x12238 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12619 = x12617 + x12618;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12620 = x12251 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12621 = x12619 + x12620;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12622 = x12264 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12623 = x12621 + x12622;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12624 = x12277 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12625 = x12623 + x12624;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12626 = x12290 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12627 = x12625 + x12626;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12628 = x12303 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12629 = x12627 + x12628;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12630 = x12316 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12631 = x12629 + x12630;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12632 = x12329 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12633 = x12631 + x12632;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12634 = x12342 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12635 = x12633 + x12634;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12636 = x12355 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12637 = x12635 + x12636;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12638 = x12368 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12639 = x12637 + x12638;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12640 = x12381 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12641 = x12639 + x12640;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12642 = x12394 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12643 = x12641 + x12642;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12644 = x12407 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12645 = x12643 + x12644;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12646 = x12433 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12647 = x12420 + x12646;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12648 = x12446 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12649 = x12647 + x12648;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12650 = x12459 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12651 = x12649 + x12650;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12652 = x12472 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12653 = x12651 + x12652;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12654 = x12485 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12655 = x12653 + x12654;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12656 = x12498 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12657 = x12655 + x12656;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12658 = x12511 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12659 = x12657 + x12658;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12660 = x12524 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12661 = x12659 + x12660;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12662 = x12537 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12663 = x12661 + x12662;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12664 = x12550 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12665 = x12663 + x12664;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12666 = x12563 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12667 = x12665 + x12666;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12668 = x12576 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12669 = x12667 + x12668;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12670 = x12589 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12671 = x12669 + x12670;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12672 = x12602 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12673 = x12671 + x12672;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12674 = x12615 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12675 = x12673 + x12674;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12676 = x11509 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12677 = x11506 + x12676;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12678 = x11512 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12679 = x12677 + x12678;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12680 = x11515 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12681 = x12679 + x12680;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12682 = x11518 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12683 = x12681 + x12682;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12684 = x11521 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12685 = x12683 + x12684;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12686 = x11524 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12687 = x12685 + x12686;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12688 = x11527 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12689 = x12687 + x12688;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12690 = x11530 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12691 = x12689 + x12690;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12692 = x11533 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12693 = x12691 + x12692;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12694 = x11536 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12695 = x12693 + x12694;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12696 = x11539 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12697 = x12695 + x12696;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12698 = x11542 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12699 = x12697 + x12698;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12700 = x11545 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12701 = x12699 + x12700;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12702 = x11548 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12703 = x12701 + x12702;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12704 = x11551 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12705 = x12703 + x12704;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12706 = x11557 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12707 = x11554 + x12706;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12708 = x11560 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12709 = x12707 + x12708;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12710 = x11563 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12711 = x12709 + x12710;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12712 = x11566 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12713 = x12711 + x12712;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12714 = x11569 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12715 = x12713 + x12714;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12716 = x11572 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12717 = x12715 + x12716;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12718 = x11575 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12719 = x12717 + x12718;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12720 = x11578 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12721 = x12719 + x12720;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12722 = x11581 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12723 = x12721 + x12722;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12724 = x11584 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12725 = x12723 + x12724;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12726 = x11587 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12727 = x12725 + x12726;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12728 = x11590 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12729 = x12727 + x12728;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12730 = x11593 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12731 = x12729 + x12730;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12732 = x11596 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12733 = x12731 + x12732;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12734 = x11599 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12735 = x12733 + x12734;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12736 = x12645 + x12705;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12737 = x12675 + x12735;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12738 = x12198 + x12736;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12739 = x12199 + x12737;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12740 = x11177 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12741 = x11176 + x12740;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12742 = x11178 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12743 = x12741 + x12742;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12744 = x11179 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12745 = x12743 + x12744;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12746 = x11180 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12747 = x12745 + x12746;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12748 = x11181 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12749 = x12747 + x12748;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12750 = x11182 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12751 = x12749 + x12750;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12752 = x11183 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12753 = x12751 + x12752;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12754 = x11184 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12755 = x12753 + x12754;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12756 = x11185 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12757 = x12755 + x12756;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12758 = x11186 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12759 = x12757 + x12758;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12760 = x11187 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12761 = x12759 + x12760;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12762 = x11188 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12763 = x12761 + x12762;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12764 = x11189 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12765 = x12763 + x12764;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12766 = x11190 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12767 = x12765 + x12766;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12768 = x11191 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12769 = x12767 + x12768;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12770 = x11193 * x93;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12771 = x11192 + x12770;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12772 = x11194 * x79;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12773 = x12771 + x12772;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12774 = x11195 * x72;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12775 = x12773 + x12774;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12776 = x11196 * x64;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12777 = x12775 + x12776;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12778 = x11197 * x60;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12779 = x12777 + x12778;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12780 = x11198 * x55;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12781 = x12779 + x12780;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12782 = x11199 * x63;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12783 = x12781 + x12782;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12784 = x11200 * x91;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12785 = x12783 + x12784;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12786 = x11201 * x22;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12787 = x12785 + x12786;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12788 = x11202 * x23;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12789 = x12787 + x12788;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12790 = x11203 * x19;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12791 = x12789 + x12790;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12792 = x11204 * x17;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12793 = x12791 + x12792;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12794 = x11205 * x15;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12795 = x12793 + x12794;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12796 = x11206 * x36;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12797 = x12795 + x12796;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:25)
      auto x12798 = x11207 * x12;
      // loc("zirgen/circuit/rv32im/sha.cpp":74:16)
      auto x12799 = x12797 + x12798;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12800 = x12198 + x12769;
      // loc("zirgen/circuit/rv32im/sha.cpp":83:14)
      auto x12801 = x12199 + x12799;
      // loc("zirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][153 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12738);
        reg = x12738;
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][155 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12800);
        reg = x12800;
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":489:5)
      {
        auto& reg = args[2][154 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12739);
        reg = x12739;
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":490:5)
      {
        auto& reg = args[2][156 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x12801);
        reg = x12801;
      }
      if (x8832 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12802 = args[2][153 * steps + ((cycle - 0) & mask)];
        assert(x12802 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12803 = args[2][154 * steps + ((cycle - 0) & mask)];
        assert(x12803 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12804 = Fp(x12802.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][159 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12804);
            reg = x12804;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12805 = Fp(x12802.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12806 = x12805 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][160 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12806);
            reg = x12806;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12807 = Fp(x12802.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12808 = x12807 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][161 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12808);
            reg = x12808;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12809 = Fp(x12802.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12810 = x12809 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][162 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12810);
            reg = x12810;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12811 = Fp(x12802.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12812 = x12811 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][163 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12812);
            reg = x12812;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12813 = Fp(x12802.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12814 = x12813 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][164 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12814);
            reg = x12814;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12815 = Fp(x12802.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12816 = x12815 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][165 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12816);
            reg = x12816;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12817 = Fp(x12802.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12818 = x12817 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][166 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12818);
            reg = x12818;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12819 = Fp(x12802.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12820 = x12819 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][167 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12820);
            reg = x12820;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12821 = Fp(x12802.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12822 = x12821 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][168 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12822);
            reg = x12822;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12823 = Fp(x12802.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12824 = x12823 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][169 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12824);
            reg = x12824;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12825 = Fp(x12802.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12826 = x12825 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][170 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12826);
            reg = x12826;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12827 = Fp(x12802.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12828 = x12827 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12828);
            reg = x12828;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12829 = Fp(x12802.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12830 = x12829 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12830);
            reg = x12830;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12831 = Fp(x12802.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12832 = x12831 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12832);
            reg = x12832;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12833 = Fp(x12802.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12834 = x12833 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12834);
            reg = x12834;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12835 = args[2][159 * steps + ((cycle - 0) & mask)];
        assert(x12835 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12836 = args[2][160 * steps + ((cycle - 0) & mask)];
        assert(x12836 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12837 = x12836 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12838 = x12835 + x12837;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12839 = args[2][161 * steps + ((cycle - 0) & mask)];
        assert(x12839 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12840 = x12839 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12841 = x12838 + x12840;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12842 = args[2][162 * steps + ((cycle - 0) & mask)];
        assert(x12842 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12843 = x12842 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12844 = x12841 + x12843;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12845 = args[2][163 * steps + ((cycle - 0) & mask)];
        assert(x12845 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12846 = x12845 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12847 = x12844 + x12846;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12848 = args[2][164 * steps + ((cycle - 0) & mask)];
        assert(x12848 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12849 = x12848 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12850 = x12847 + x12849;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12851 = args[2][165 * steps + ((cycle - 0) & mask)];
        assert(x12851 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12852 = x12851 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12853 = x12850 + x12852;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12854 = args[2][166 * steps + ((cycle - 0) & mask)];
        assert(x12854 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12855 = x12854 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12856 = x12853 + x12855;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12857 = args[2][167 * steps + ((cycle - 0) & mask)];
        assert(x12857 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12858 = x12857 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12859 = x12856 + x12858;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12860 = args[2][168 * steps + ((cycle - 0) & mask)];
        assert(x12860 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12861 = x12860 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12862 = x12859 + x12861;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12863 = args[2][169 * steps + ((cycle - 0) & mask)];
        assert(x12863 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12864 = x12863 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12865 = x12862 + x12864;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12866 = args[2][170 * steps + ((cycle - 0) & mask)];
        assert(x12866 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12867 = x12866 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12868 = x12865 + x12867;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12869 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x12869 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12870 = x12869 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12871 = x12868 + x12870;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12872 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x12872 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12873 = x12872 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12874 = x12871 + x12873;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12875 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x12875 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12876 = x12875 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12877 = x12874 + x12876;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12878 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x12878 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12879 = x12878 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12880 = x12877 + x12879;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12881 = x12802 - x12880;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12882 = x12881 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
          auto x12883 = Fp(x12882.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][73 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12883);
            reg = x12883;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12884 = args[2][73 * steps + ((cycle - 0) & mask)];
        assert(x12884 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
        auto x12885 = x12882 - x12884;
        // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
        auto x12886 = x12885 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
        auto x12887 = x96 - x12886;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        auto x12888 = x12886 * x12887;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        if (x12888 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
        auto x12889 = x12803 + x12882;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12890 = Fp(x12889.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12890);
            reg = x12890;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12891 = Fp(x12889.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12892 = x12891 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12892);
            reg = x12892;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12893 = Fp(x12889.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12894 = x12893 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12894);
            reg = x12894;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12895 = Fp(x12889.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12896 = x12895 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][178 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12896);
            reg = x12896;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12897 = Fp(x12889.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12898 = x12897 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][179 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12898);
            reg = x12898;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12899 = Fp(x12889.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12900 = x12899 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][180 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12900);
            reg = x12900;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12901 = Fp(x12889.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12902 = x12901 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][181 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12902);
            reg = x12902;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12903 = Fp(x12889.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12904 = x12903 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][182 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12904);
            reg = x12904;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12905 = Fp(x12889.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12906 = x12905 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][183 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12906);
            reg = x12906;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12907 = Fp(x12889.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12908 = x12907 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][184 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12908);
            reg = x12908;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12909 = Fp(x12889.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12910 = x12909 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][185 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12910);
            reg = x12910;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12911 = Fp(x12889.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12912 = x12911 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][186 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12912);
            reg = x12912;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12913 = Fp(x12889.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12914 = x12913 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][187 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12914);
            reg = x12914;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12915 = Fp(x12889.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12916 = x12915 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][188 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12916);
            reg = x12916;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12917 = Fp(x12889.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12918 = x12917 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][189 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12918);
            reg = x12918;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12919 = Fp(x12889.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12920 = x12919 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][190 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12920);
            reg = x12920;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12921 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x12921 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12922 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x12922 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12923 = x12922 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12924 = x12921 + x12923;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12925 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x12925 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12926 = x12925 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12927 = x12924 + x12926;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12928 = args[2][178 * steps + ((cycle - 0) & mask)];
        assert(x12928 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12929 = x12928 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12930 = x12927 + x12929;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12931 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x12931 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12932 = x12931 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12933 = x12930 + x12932;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12934 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x12934 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12935 = x12934 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12936 = x12933 + x12935;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12937 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x12937 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12938 = x12937 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12939 = x12936 + x12938;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12940 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x12940 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12941 = x12940 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12942 = x12939 + x12941;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12943 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x12943 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12944 = x12943 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12945 = x12942 + x12944;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12946 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x12946 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12947 = x12946 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12948 = x12945 + x12947;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12949 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x12949 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12950 = x12949 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12951 = x12948 + x12950;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12952 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x12952 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12953 = x12952 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12954 = x12951 + x12953;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12955 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x12955 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12956 = x12955 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12957 = x12954 + x12956;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12958 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x12958 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12959 = x12958 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12960 = x12957 + x12959;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12961 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x12961 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12962 = x12961 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12963 = x12960 + x12962;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12964 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x12964 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x12965 = x12964 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x12966 = x12963 + x12965;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x12967 = x12889 - x12966;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x12968 = x12967 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
          auto x12969 = Fp(x12968.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][74 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12969);
            reg = x12969;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x12970 = args[2][74 * steps + ((cycle - 0) & mask)];
        assert(x12970 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
        auto x12971 = x12968 - x12970;
        // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
        auto x12972 = x12971 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
        auto x12973 = x96 - x12972;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        auto x12974 = x12972 * x12973;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        if (x12974 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:11))
        auto x12975 = args[2][155 * steps + ((cycle - 0) & mask)];
        assert(x12975 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":140:26))
        auto x12976 = args[2][156 * steps + ((cycle - 0) & mask)];
        assert(x12976 != Fp::invalid());
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12977 = Fp(x12975.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][191 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12977);
            reg = x12977;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12978 = Fp(x12975.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12979 = x12978 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][192 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12979);
            reg = x12979;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12980 = Fp(x12975.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12981 = x12980 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][193 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12981);
            reg = x12981;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12982 = Fp(x12975.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12983 = x12982 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][194 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12983);
            reg = x12983;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12984 = Fp(x12975.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12985 = x12984 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][195 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12985);
            reg = x12985;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12986 = Fp(x12975.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12987 = x12986 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][196 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12987);
            reg = x12987;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12988 = Fp(x12975.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12989 = x12988 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][197 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12989);
            reg = x12989;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12990 = Fp(x12975.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12991 = x12990 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][198 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12991);
            reg = x12991;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12992 = Fp(x12975.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12993 = x12992 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][199 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12993);
            reg = x12993;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12994 = Fp(x12975.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12995 = x12994 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][200 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12995);
            reg = x12995;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12996 = Fp(x12975.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12997 = x12996 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][201 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12997);
            reg = x12997;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x12998 = Fp(x12975.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x12999 = x12998 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][202 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x12999);
            reg = x12999;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13000 = Fp(x12975.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13001 = x13000 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][203 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13001);
            reg = x13001;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13002 = Fp(x12975.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13003 = x13002 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][204 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13003);
            reg = x13003;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13004 = Fp(x12975.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13005 = x13004 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][205 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13005);
            reg = x13005;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13006 = Fp(x12975.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13007 = x13006 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][206 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13007);
            reg = x13007;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13008 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x13008 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13009 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x13009 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13010 = x13009 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13011 = x13008 + x13010;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13012 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x13012 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13013 = x13012 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13014 = x13011 + x13013;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13015 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x13015 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13016 = x13015 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13017 = x13014 + x13016;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13018 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x13018 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13019 = x13018 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13020 = x13017 + x13019;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13021 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x13021 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13022 = x13021 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13023 = x13020 + x13022;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13024 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x13024 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13025 = x13024 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13026 = x13023 + x13025;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13027 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x13027 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13028 = x13027 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13029 = x13026 + x13028;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13030 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x13030 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13031 = x13030 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13032 = x13029 + x13031;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13033 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x13033 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13034 = x13033 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13035 = x13032 + x13034;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13036 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x13036 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13037 = x13036 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13038 = x13035 + x13037;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13039 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x13039 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13040 = x13039 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13041 = x13038 + x13040;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13042 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x13042 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13043 = x13042 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13044 = x13041 + x13043;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13045 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x13045 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13046 = x13045 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13047 = x13044 + x13046;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13048 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x13048 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13049 = x13048 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13050 = x13047 + x13049;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13051 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x13051 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13052 = x13051 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13053 = x13050 + x13052;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x13054 = x12975 - x13053;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x13055 = x13054 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":122:26)
          auto x13056 = Fp(x13055.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][75 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13056);
            reg = x13056;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13057 = args[2][75 * steps + ((cycle - 0) & mask)];
        assert(x13057 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":123:20)
        auto x13058 = x13055 - x13057;
        // loc("zirgen/circuit/rv32im/sha.cpp":123:19)
        auto x13059 = x13058 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:20)
        auto x13060 = x96 - x13059;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        auto x13061 = x13059 * x13060;
        // loc("zirgen/circuit/rv32im/sha.cpp":124:7)
        if (x13061 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:124");
        // loc("zirgen/circuit/rv32im/sha.cpp":125:32)
        auto x13062 = x12976 + x13055;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13063 = Fp(x13062.asUInt32() & x96.asUInt32());
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][207 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13063);
            reg = x13063;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13064 = Fp(x13062.asUInt32() & x93.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13065 = x13064 * x56;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][208 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13065);
            reg = x13065;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13066 = Fp(x13062.asUInt32() & x79.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13067 = x13066 * x77;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][209 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13067);
            reg = x13067;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13068 = Fp(x13062.asUInt32() & x72.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13069 = x13068 * x57;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][210 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13069);
            reg = x13069;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13070 = Fp(x13062.asUInt32() & x64.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13071 = x13070 * x58;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][211 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13071);
            reg = x13071;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13072 = Fp(x13062.asUInt32() & x60.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13073 = x13072 * x59;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][212 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13073);
            reg = x13073;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13074 = Fp(x13062.asUInt32() & x55.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13075 = x13074 * x54;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][213 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13075);
            reg = x13075;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13076 = Fp(x13062.asUInt32() & x63.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13077 = x13076 * x62;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][214 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13077);
            reg = x13077;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13078 = Fp(x13062.asUInt32() & x91.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13079 = x13078 * x90;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][215 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13079);
            reg = x13079;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13080 = Fp(x13062.asUInt32() & x22.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13081 = x13080 * x21;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][216 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13081);
            reg = x13081;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13082 = Fp(x13062.asUInt32() & x23.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13083 = x13082 * x20;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][217 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13083);
            reg = x13083;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13084 = Fp(x13062.asUInt32() & x19.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13085 = x13084 * x18;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][218 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13085);
            reg = x13085;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13086 = Fp(x13062.asUInt32() & x17.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13087 = x13086 * x16;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][219 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13087);
            reg = x13087;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13088 = Fp(x13062.asUInt32() & x15.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13089 = x13088 * x14;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][220 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13089);
            reg = x13089;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13090 = Fp(x13062.asUInt32() & x36.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13091 = x13090 * x13;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][221 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13091);
            reg = x13091;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":104:29)
          auto x13092 = Fp(x13062.asUInt32() & x12.asUInt32());
          // loc("zirgen/circuit/rv32im/sha.cpp":104:28)
          auto x13093 = x13092 * x11;
          // loc("./zirgen/components/bits.h":27:23)
          {
            auto& reg = args[2][222 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13093);
            reg = x13093;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13094 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x13094 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13095 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x13095 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13096 = x13095 * x93;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13097 = x13094 + x13096;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13098 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x13098 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13099 = x13098 * x79;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13100 = x13097 + x13099;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13101 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x13101 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13102 = x13101 * x72;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13103 = x13100 + x13102;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13104 = args[2][211 * steps + ((cycle - 0) & mask)];
        assert(x13104 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13105 = x13104 * x64;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13106 = x13103 + x13105;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13107 = args[2][212 * steps + ((cycle - 0) & mask)];
        assert(x13107 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13108 = x13107 * x60;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13109 = x13106 + x13108;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13110 = args[2][213 * steps + ((cycle - 0) & mask)];
        assert(x13110 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13111 = x13110 * x55;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13112 = x13109 + x13111;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13113 = args[2][214 * steps + ((cycle - 0) & mask)];
        assert(x13113 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13114 = x13113 * x63;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13115 = x13112 + x13114;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13116 = args[2][215 * steps + ((cycle - 0) & mask)];
        assert(x13116 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13117 = x13116 * x91;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13118 = x13115 + x13117;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13119 = args[2][216 * steps + ((cycle - 0) & mask)];
        assert(x13119 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13120 = x13119 * x22;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13121 = x13118 + x13120;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13122 = args[2][217 * steps + ((cycle - 0) & mask)];
        assert(x13122 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13123 = x13122 * x23;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13124 = x13121 + x13123;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13125 = args[2][218 * steps + ((cycle - 0) & mask)];
        assert(x13125 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13126 = x13125 * x19;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13127 = x13124 + x13126;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13128 = args[2][219 * steps + ((cycle - 0) & mask)];
        assert(x13128 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13129 = x13128 * x17;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13130 = x13127 + x13129;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13131 = args[2][220 * steps + ((cycle - 0) & mask)];
        assert(x13131 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13132 = x13131 * x15;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13133 = x13130 + x13132;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13134 = args[2][221 * steps + ((cycle - 0) & mask)];
        assert(x13134 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13135 = x13134 * x36;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13136 = x13133 + x13135;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13137 = args[2][222 * steps + ((cycle - 0) & mask)];
        assert(x13137 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":109:21)
        auto x13138 = x13137 * x12;
        // loc("zirgen/circuit/rv32im/sha.cpp":109:13)
        auto x13139 = x13136 + x13138;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:16)
        auto x13140 = x13062 - x13139;
        // loc("zirgen/circuit/rv32im/sha.cpp":111:15)
        auto x13141 = x13140 * x10;
        {
          // loc("zirgen/circuit/rv32im/sha.cpp":126:27)
          auto x13142 = Fp(x13141.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13142);
            reg = x13142;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13143 = args[2][76 * steps + ((cycle - 0) & mask)];
        assert(x13143 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":127:21)
        auto x13144 = x13141 - x13143;
        // loc("zirgen/circuit/rv32im/sha.cpp":127:20)
        auto x13145 = x13144 * x77;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:21)
        auto x13146 = x96 - x13145;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        auto x13147 = x13145 * x13146;
        // loc("zirgen/circuit/rv32im/sha.cpp":128:7)
        if (x13147 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/sha.cpp:128");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13148 = args[2][150 * steps + ((cycle - 0) & mask)];
      assert(x13148 != Fp::invalid());
      if (x13148 != 0) {
        if (x8840 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":433:38))
          auto x13149 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x13149 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":433:7)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13149);
            reg = x13149;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":434:38))
          auto x13150 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x13150 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":434:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13150);
            reg = x13150;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":435:7)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x64);
            reg = x64;
          }
        }
        if (x8841 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":439:51))
          auto x13151 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x13151 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":439:51)
          auto x13152 = x13151 + x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":439:7)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13152);
            reg = x13152;
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":440:51))
          auto x13153 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x13153 != Fp::invalid());
          // loc("zirgen/circuit/rv32im/sha.cpp":440:51)
          auto x13154 = x13153 + x64;
          // loc("zirgen/circuit/rv32im/sha.cpp":440:7)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13154);
            reg = x13154;
          }
          // loc("zirgen/circuit/rv32im/sha.cpp":441:7)
          {
            auto& reg = args[2][99 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x70);
            reg = x70;
          }
        }
      }
      // loc("zirgen/circuit/rv32im/sha.cpp":444:27)
      auto x13155 = x96 - x13148;
      if (x13155 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":445:36))
        auto x13156 = args[2][141 * steps + ((cycle - 1) & mask)];
        assert(x13156 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":445:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13156);
          reg = x13156;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/Reg"("zirgen/circuit/rv32im/sha.cpp":446:36))
        auto x13157 = args[2][142 * steps + ((cycle - 1) & mask)];
        assert(x13157 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/sha.cpp":446:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13157);
          reg = x13157;
        }
        // loc("zirgen/circuit/rv32im/sha.cpp":447:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("./zirgen/components/mux.h":49:25))
    auto x13158 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x13158 != Fp::invalid());
    if (x13158 != 0) {
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x13159 = x867 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x13160 = Fp(x13159.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13160);
          reg = x13160;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x13161 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x13161 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x13162 = x13159 - x13161;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x13163 = x13162 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x13164 = Fp(x13163.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13164);
          reg = x13164;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x13165 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x13165 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x13166 = x13163 - x13165;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x13167 = x13166 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x13168 = Fp(x13167.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13168);
          reg = x13168;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x13169 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x13169 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x13170 = x13167 - x13169;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x13171 = x13170 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x13172 = Fp(x13171.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13172);
          reg = x13172;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13173 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x13173 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x13174 = x13171 - x13173;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x13175 = x13174 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13175);
        reg = x13175;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13176 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x13176 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x13177 = x96 - x13176;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x13178 = x13176 * x13177;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13178);
        reg = x13178;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x13179 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x13179 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x13180 = x93 - x13176;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x13181 = x13179 * x13180;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x13181 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      host_args.at(0) = x867;
      host(ctx, "log", "  PageFault: PC = %10x", host_args.data(), 1, host_outs.data(), 0);
      {
        host_args.at(0) = x867;
        host(ctx, "pageInfo", "", host_args.data(), 1, host_outs.data(), 3);
        auto x13182 = host_outs.at(0);
        auto x13183 = host_outs.at(1);
        auto x13184 = host_outs.at(2);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13182);
          reg = x13182;
        }
        // loc("zirgen/circuit/rv32im/page_fault.cpp":77:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13183);
          reg = x13183;
        }
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13184);
          reg = x13184;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x13185 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x13185 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/page_fault.cpp":83:20)
      auto x13186 = x13185 - x5;
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x13187 = (x13186 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13187);
          reg = x13187;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x13188 = inv(x13186);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13188);
          reg = x13188;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13189 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x13189 != Fp::invalid());
      if (x13189 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x13186 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x13190 = x96 - x13189;
      if (x13190 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13191 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13191 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13192 = x13186 * x13191;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13193 = x13192 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x13193 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x13189 != 0) {
        // loc("zirgen/circuit/rv32im/page_fault.cpp":85:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x69);
          reg = x69;
        }
        // loc("zirgen/circuit/rv32im/page_fault.cpp":86:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      if (x13190 != 0) {
        // loc("zirgen/circuit/rv32im/page_fault.cpp":89:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
        // loc("zirgen/circuit/rv32im/page_fault.cpp":90:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x13194 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x13194 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/page_fault.cpp":93:24)
      auto x13195 = x13185 + x13194;
      // loc("zirgen/circuit/rv32im/page_fault.cpp":94:36)
      auto x13196 = x13195 * x72;
      // loc("zirgen/circuit/rv32im/page_fault.cpp":94:19)
      auto x13197 = x13196 + x4;
      // loc("zirgen/circuit/rv32im/page_fault.cpp":95:3)
      {
        auto& reg = args[2][116 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13197);
        reg = x13197;
      }
      // loc("zirgen/circuit/rv32im/page_fault.cpp":96:3)
      {
        auto& reg = args[2][117 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x3);
        reg = x3;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/12(PageFaultCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13198 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x13198 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/page_fault.cpp":98:16)
      auto x13199 = x96 - x13198;
      if (x13199 != 0) {
        // loc("zirgen/circuit/rv32im/page_fault.cpp":108:17)
        auto x13200 = x13185 - x96;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13201 = Fp(x13200.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13201);
            reg = x13201;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13202 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x13202 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13203 = x13200 - x13202;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13204 = x13203 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13205 = Fp(x13204.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13205);
            reg = x13205;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13206 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13206 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13207 = x13204 - x13206;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13208 = x13207 * x90;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13208);
          reg = x13208;
        }
        // loc("zirgen/circuit/rv32im/page_fault.cpp":109:17)
        auto x13209 = x5 - x13185;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13210 = Fp(x13209.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13210);
            reg = x13210;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13211 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13211 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13212 = x13209 - x13211;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13213 = x13212 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13214 = Fp(x13213.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13214);
            reg = x13214;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13215 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13215 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13216 = x13213 - x13215;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13217 = x13216 * x90;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13217);
          reg = x13217;
        }
        // loc("zirgen/circuit/rv32im/page_fault.cpp":111:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x71);
          reg = x71;
        }
      }
      if (x13198 != 0) {
        {
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][9 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13218 = args[2][9 * steps + ((cycle - 0) & mask)];
        assert(x13218 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13219 = x95 - x13218;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13220 = x13219 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13221 = Fp(x13220.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][10 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13221);
            reg = x13221;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13222 = args[2][10 * steps + ((cycle - 0) & mask)];
        assert(x13222 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13223 = x13220 - x13222;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13224 = x13223 * x90;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13224);
          reg = x13224;
        }
        {
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][11 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13225 = args[2][11 * steps + ((cycle - 0) & mask)];
        assert(x13225 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13226 = x95 - x13225;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13227 = x13226 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13228 = Fp(x13227.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][12 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13228);
            reg = x13228;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13229 = args[2][12 * steps + ((cycle - 0) & mask)];
        assert(x13229 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13230 = x13227 - x13229;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13231 = x13230 * x90;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13231);
          reg = x13231;
        }
        // loc("zirgen/circuit/rv32im/page_fault.cpp":117:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x65);
          reg = x65;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[13](Reg)"("./zirgen/components/mux.h":49:25))
    auto x13232 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x13232 != Fp::invalid());
    if (x13232 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/ecall.cpp":165:70))
      auto x13233 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x13233 != Fp::invalid());
      if (x13233 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13234 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x13234 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13235 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x13235 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13236 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x13236 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13237 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x13237 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x13238 = x13235 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13239 = x13234 + x13238;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13240 = x13236 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13241 = x13239 + x13240;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13242 = x13237 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13243 = x13241 + x13242;
        // loc("zirgen/circuit/rv32im/ecall.cpp":175:98)
        auto x13244 = x13243 * x77;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13245 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x13245 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":175:98)
        auto x13246 = x13245 + x96;
        // loc("zirgen/circuit/rv32im/ecall.cpp":175:98)
        auto x13247 = x13244 + x13246;
        // loc("zirgen/circuit/rv32im/ecall.cpp":175:98)
        auto x13248 = x13247 - x79;
        // loc("zirgen/circuit/rv32im/ecall.cpp":173:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13248);
          reg = x13248;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Reg"("zirgen/circuit/rv32im/ecall.cpp":176:63))
        auto x13249 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x13249 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":176:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13249);
          reg = x13249;
        }
      }
      // loc("zirgen/circuit/rv32im/ecall.cpp":179:22)
      auto x13250 = x96 - x13233;
      if (x13250 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("zirgen/circuit/rv32im/ecall.cpp":180:56))
        auto x13251 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13251 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":180:56)
        auto x13252 = x13251 - x96;
        // loc("zirgen/circuit/rv32im/ecall.cpp":180:5)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13252);
          reg = x13252;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("zirgen/circuit/rv32im/ecall.cpp":181:46))
        auto x13253 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x13253 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":181:46)
        auto x13254 = x13253 + x79;
        // loc("zirgen/circuit/rv32im/ecall.cpp":181:5)
        {
          auto& reg = args[2][172 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13254);
          reg = x13254;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13255 = args[2][171 * steps + ((cycle - 0) & mask)];
      assert(x13255 != Fp::invalid());
      {
        // loc("zirgen/components/iszero.cpp":11:24)
        auto x13256 = (x13255 == 0) ? Fp(1) : Fp(0);
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][178 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13256);
          reg = x13256;
        }
        // loc("zirgen/components/iszero.cpp":12:21)
        auto x13257 = inv(x13255);
        // loc("zirgen/components/iszero.cpp":12:5)
        {
          auto& reg = args[2][179 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13257);
          reg = x13257;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/IsZero/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13258 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13258 != Fp::invalid());
      if (x13258 != 0) {
        // loc("zirgen/components/iszero.cpp":16:23)
        if (x13255 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:16");
      }
      // loc("zirgen/components/iszero.cpp":18:19)
      auto x13259 = x96 - x13258;
      if (x13259 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/IsZero/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13260 = args[2][179 * steps + ((cycle - 0) & mask)];
        assert(x13260 != Fp::invalid());
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13261 = x13255 * x13260;
        // loc("zirgen/components/iszero.cpp":18:26)
        auto x13262 = x13261 - x96;
        // loc("zirgen/components/iszero.cpp":18:26)
        if (x13262 != 0) throw std::runtime_error("eqz failed at: zirgen/components/iszero.cpp:18");
      }
      if (x13233 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/2(ECallSoftware)/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13263 = args[2][76 * steps + ((cycle - 1) & mask)];
        assert(x13263 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":189:80)
        auto x13264 = x13263 + x96;
        // loc("zirgen/circuit/rv32im/ecall.cpp":189:80)
        auto x13265 = x13264 * x13259;
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13266 = (x13265 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13266);
            reg = x13266;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13267 = x13265 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13268 = (x13267 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13268);
            reg = x13268;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13269 = x13265 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13270 = (x13269 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13270);
            reg = x13270;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13271 = x13265 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13272 = (x13271 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13272);
            reg = x13272;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13273 = x13265 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13274 = (x13273 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13274);
            reg = x13274;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13275 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13275 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13276 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13276 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13277 = x13276 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13278 = x13275 + x13277;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13279 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13279 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13280 = x13279 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13281 = x13278 + x13280;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13282 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13282 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13283 = x13282 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13284 = x13281 + x13283;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x13285 = x13284 - x13265;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x13285 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13286 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13286 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":192:10)
        auto x13287 = x13286 * x79;
        host_args.at(0) = x13287;
        host_args.at(1) = x13255;
        host_args.at(2) = x13284;
        host(ctx, "log", "  COPYIN INIT: dest=%x, remaining=%u first chunk words=%u", host_args.data(), 3, host_outs.data(), 0);
      }
      if (x13250 != 0) {
        // loc("zirgen/circuit/rv32im/ecall.cpp":197:43)
        auto x13288 = x13259 * x79;
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13289 = (x13288 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13289);
            reg = x13289;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13290 = x13288 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13291 = (x13290 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13291);
            reg = x13291;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13292 = x13288 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13293 = (x13292 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13293);
            reg = x13293;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13294 = x13288 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13295 = (x13294 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13295);
            reg = x13295;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13296 = x13288 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13297 = (x13296 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][177 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13297);
            reg = x13297;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13298 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13298 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13299 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13299 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13300 = x13299 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13301 = x13298 + x13300;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13302 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13302 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13303 = x13302 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13304 = x13301 + x13303;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13305 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13305 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13306 = x13305 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13307 = x13304 + x13306;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x13308 = x13307 - x13288;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x13308 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/ecall.cpp":199:24))
      auto x13309 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x13309 != Fp::invalid());
      if (x13309 != 0) {
        {
          host(ctx, "syscallFini", "", host_args.data(), 0, host_outs.data(), 8);
          auto x13310 = host_outs.at(0);
          auto x13311 = host_outs.at(1);
          auto x13312 = host_outs.at(2);
          auto x13313 = host_outs.at(3);
          auto x13314 = host_outs.at(4);
          auto x13315 = host_outs.at(5);
          auto x13316 = host_outs.at(6);
          auto x13317 = host_outs.at(7);
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13310);
            reg = x13310;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13311);
            reg = x13311;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13312);
            reg = x13312;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13313);
            reg = x13313;
          }
          {
            host_args.at(0) = x27;
            host_args.at(1) = x13310;
            host_args.at(2) = x13311;
            host_args.at(3) = x13312;
            host_args.at(4) = x13313;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13318 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13318 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13319 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13319 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13320 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13320 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13321 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13321 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x27);
            reg = x27;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13318);
            reg = x13318;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13319);
            reg = x13319;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13320);
            reg = x13320;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13321);
            reg = x13321;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13314);
            reg = x13314;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13315);
            reg = x13315;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13316);
            reg = x13316;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13317);
            reg = x13317;
          }
          {
            host_args.at(0) = x28;
            host_args.at(1) = x13314;
            host_args.at(2) = x13315;
            host_args.at(3) = x13316;
            host_args.at(4) = x13317;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13322 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13322 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13323 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13323 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13324 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13324 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13325 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13325 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x28);
            reg = x28;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13322);
            reg = x13322;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13323);
            reg = x13323;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13324);
            reg = x13324;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13325);
            reg = x13325;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:10))
        auto x13326 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13326 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":208:8)
        auto x13327 = x13326 - x853;
        // loc("zirgen/circuit/rv32im/ecall.cpp":208:8)
        if (x13327 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:208");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:10))
        auto x13328 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13328 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":209:8)
        auto x13329 = x13328 - x853;
        // loc("zirgen/circuit/rv32im/ecall.cpp":209:8)
        if (x13329 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:209");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
        auto x13330 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13330 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":211:8)
        auto x13331 = x13330 - x27;
        // loc("zirgen/circuit/rv32im/ecall.cpp":211:8)
        if (x13331 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:211");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
        auto x13332 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13332 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":212:8)
        auto x13333 = x13332 - x28;
        // loc("zirgen/circuit/rv32im/ecall.cpp":212:8)
        if (x13333 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:212");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13334 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13334 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13335 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13335 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13336 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13336 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13337 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13337 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13338 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13338 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13339 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13339 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13340 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13340 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13341 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13341 != Fp::invalid());
        host_args.at(0) = x13334;
        host_args.at(1) = x13335;
        host_args.at(2) = x13336;
        host_args.at(3) = x13337;
        host_args.at(4) = x13338;
        host_args.at(5) = x13339;
        host_args.at(6) = x13340;
        host_args.at(7) = x13341;
        host(ctx, "log", "  COPYIN FINI: a0=%w a1=%w", host_args.data(), 8, host_outs.data(), 0);
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/ecall.cpp":219:19)
        auto x13342 = x867 + x79;
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x13343 = x13342 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13344 = Fp(x13343.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13344);
            reg = x13344;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13345 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13345 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13346 = x13343 - x13345;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13347 = x13346 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13348 = Fp(x13347.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13348);
            reg = x13348;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13349 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13349 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13350 = x13347 - x13349;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13351 = x13350 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13352 = Fp(x13351.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13352);
            reg = x13352;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13353 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13353 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13354 = x13351 - x13353;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13355 = x13354 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x13356 = Fp(x13355.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13356);
            reg = x13356;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13357 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13357 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x13358 = x13355 - x13357;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x13359 = x13358 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13359);
          reg = x13359;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13360 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13360 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x13361 = x96 - x13360;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x13362 = x13360 * x13361;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13362);
          reg = x13362;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13363 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13363 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x13364 = x93 - x13360;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x13365 = x13363 * x13364;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x13365 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/ecall.cpp":220:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
      }
      // loc("zirgen/circuit/rv32im/ecall.cpp":222:28)
      auto x13366 = x96 - x13309;
      if (x13366 != 0) {
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x13367 = x867 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13368 = Fp(x13367.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13368);
            reg = x13368;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13369 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x13369 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13370 = x13367 - x13369;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13371 = x13370 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13372 = Fp(x13371.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13372);
            reg = x13372;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13373 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x13373 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13374 = x13371 - x13373;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13375 = x13374 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x13376 = Fp(x13375.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13376);
            reg = x13376;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x13377 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x13377 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x13378 = x13375 - x13377;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x13379 = x13378 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x13380 = Fp(x13379.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13380);
            reg = x13380;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13381 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x13381 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x13382 = x13379 - x13381;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x13383 = x13382 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13383);
          reg = x13383;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13384 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x13384 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x13385 = x96 - x13384;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x13386 = x13384 * x13385;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13386);
          reg = x13386;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13387 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x13387 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x13388 = x93 - x13384;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x13389 = x13387 * x13388;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x13389 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/ecall.cpp":224:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x67);
          reg = x67;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[1](Reg)"("zirgen/circuit/rv32im/ecall.cpp":234:35))
      auto x13390 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x13390 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/ecall.cpp":234:35))
      auto x13391 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13391 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/ecall.cpp":234:22)
      auto x13392 = x13390 + x13391;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[3](Reg)"("zirgen/circuit/rv32im/ecall.cpp":234:35))
      auto x13393 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13393 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/ecall.cpp":234:22)
      auto x13394 = x13392 + x13393;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/OneHot/hot[4](Reg)"("zirgen/circuit/rv32im/ecall.cpp":232:35))
      auto x13395 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13395 != Fp::invalid());
      if (x13395 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13396 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13396 != Fp::invalid());
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13397 = host_outs.at(0);
          auto x13398 = host_outs.at(1);
          auto x13399 = host_outs.at(2);
          auto x13400 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13397);
            reg = x13397;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13398);
            reg = x13398;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13399);
            reg = x13399;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13400);
            reg = x13400;
          }
          {
            host_args.at(0) = x13396;
            host_args.at(1) = x13397;
            host_args.at(2) = x13398;
            host_args.at(3) = x13399;
            host_args.at(4) = x13400;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13401 = args[2][119 * steps + ((cycle - 0) & mask)];
          assert(x13401 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13402 = args[2][120 * steps + ((cycle - 0) & mask)];
          assert(x13402 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13403 = args[2][121 * steps + ((cycle - 0) & mask)];
          assert(x13403 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13404 = args[2][122 * steps + ((cycle - 0) & mask)];
          assert(x13404 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][116 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13396);
            reg = x13396;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][117 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][118 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13401);
            reg = x13401;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13402);
            reg = x13402;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13403);
            reg = x13403;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13404);
            reg = x13404;
          }
          // loc("zirgen/circuit/rv32im/ecall.cpp":243:41)
          auto x13405 = x13396 * x79;
          host_args.at(0) = x13405;
          host_args.at(1) = x13401;
          host_args.at(2) = x13402;
          host_args.at(3) = x13403;
          host_args.at(4) = x13404;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:10))
        auto x13406 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x13406 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        auto x13407 = x13406 - x853;
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        if (x13407 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:246");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
        auto x13408 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x13408 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        auto x13409 = x13408 - x13396;
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        if (x13409 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:247");
      }
      if (x13394 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/ecall.cpp":232:22)
      auto x13410 = x13393 + x13395;
      if (x13410 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13411 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13411 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":239:23)
        auto x13412 = x13411 + x96;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13413 = host_outs.at(0);
          auto x13414 = host_outs.at(1);
          auto x13415 = host_outs.at(2);
          auto x13416 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13413);
            reg = x13413;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13414);
            reg = x13414;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13415);
            reg = x13415;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13416);
            reg = x13416;
          }
          {
            host_args.at(0) = x13412;
            host_args.at(1) = x13413;
            host_args.at(2) = x13414;
            host_args.at(3) = x13415;
            host_args.at(4) = x13416;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13417 = args[2][126 * steps + ((cycle - 0) & mask)];
          assert(x13417 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13418 = args[2][127 * steps + ((cycle - 0) & mask)];
          assert(x13418 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13419 = args[2][128 * steps + ((cycle - 0) & mask)];
          assert(x13419 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13420 = args[2][129 * steps + ((cycle - 0) & mask)];
          assert(x13420 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][123 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13412);
            reg = x13412;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][124 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][125 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13417);
            reg = x13417;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13418);
            reg = x13418;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13419);
            reg = x13419;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13420);
            reg = x13420;
          }
          // loc("zirgen/circuit/rv32im/ecall.cpp":243:41)
          auto x13421 = x13412 * x79;
          host_args.at(0) = x13421;
          host_args.at(1) = x13417;
          host_args.at(2) = x13418;
          host_args.at(3) = x13419;
          host_args.at(4) = x13420;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:10))
        auto x13422 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x13422 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        auto x13423 = x13422 - x853;
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        if (x13423 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:246");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
        auto x13424 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x13424 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        auto x13425 = x13424 - x13412;
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        if (x13425 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:247");
      }
      if (x13392 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/ecall.cpp":232:22)
      auto x13426 = x13391 + x13393;
      // loc("zirgen/circuit/rv32im/ecall.cpp":232:22)
      auto x13427 = x13426 + x13395;
      if (x13427 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13428 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13428 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":239:23)
        auto x13429 = x13428 + x93;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13430 = host_outs.at(0);
          auto x13431 = host_outs.at(1);
          auto x13432 = host_outs.at(2);
          auto x13433 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13430);
            reg = x13430;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13431);
            reg = x13431;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13432);
            reg = x13432;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13433);
            reg = x13433;
          }
          {
            host_args.at(0) = x13429;
            host_args.at(1) = x13430;
            host_args.at(2) = x13431;
            host_args.at(3) = x13432;
            host_args.at(4) = x13433;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13434 = args[2][133 * steps + ((cycle - 0) & mask)];
          assert(x13434 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13435 = args[2][134 * steps + ((cycle - 0) & mask)];
          assert(x13435 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13436 = args[2][135 * steps + ((cycle - 0) & mask)];
          assert(x13436 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13437 = args[2][136 * steps + ((cycle - 0) & mask)];
          assert(x13437 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][130 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13429);
            reg = x13429;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][131 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][132 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13434);
            reg = x13434;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13435);
            reg = x13435;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13436);
            reg = x13436;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13437);
            reg = x13437;
          }
          // loc("zirgen/circuit/rv32im/ecall.cpp":243:41)
          auto x13438 = x13429 * x79;
          host_args.at(0) = x13438;
          host_args.at(1) = x13434;
          host_args.at(2) = x13435;
          host_args.at(3) = x13436;
          host_args.at(4) = x13437;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:10))
        auto x13439 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x13439 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        auto x13440 = x13439 - x853;
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        if (x13440 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:246");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
        auto x13441 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x13441 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        auto x13442 = x13441 - x13429;
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        if (x13442 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:247");
      }
      if (x13390 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
      // loc("zirgen/circuit/rv32im/ecall.cpp":232:22)
      auto x13443 = x13394 + x13395;
      if (x13443 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13444 = args[2][172 * steps + ((cycle - 0) & mask)];
        assert(x13444 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":239:23)
        auto x13445 = x13444 + x78;
        {
          host(ctx, "syscallBody", "", host_args.data(), 0, host_outs.data(), 4);
          auto x13446 = host_outs.at(0);
          auto x13447 = host_outs.at(1);
          auto x13448 = host_outs.at(2);
          auto x13449 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13446);
            reg = x13446;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13447);
            reg = x13447;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13448);
            reg = x13448;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13449);
            reg = x13449;
          }
          {
            host_args.at(0) = x13445;
            host_args.at(1) = x13446;
            host_args.at(2) = x13447;
            host_args.at(3) = x13448;
            host_args.at(4) = x13449;
            host_args.at(5) = x93;
            host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
          }
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13450 = args[2][140 * steps + ((cycle - 0) & mask)];
          assert(x13450 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13451 = args[2][141 * steps + ((cycle - 0) & mask)];
          assert(x13451 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13452 = args[2][142 * steps + ((cycle - 0) & mask)];
          assert(x13452 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13453 = args[2][143 * steps + ((cycle - 0) & mask)];
          assert(x13453 != Fp::invalid());
          // loc("zirgen/components/ram.cpp":168:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13445);
            reg = x13445;
          }
          // loc("zirgen/components/ram.cpp":169:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x853);
            reg = x853;
          }
          // loc("zirgen/components/ram.cpp":170:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x93);
            reg = x93;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13450);
            reg = x13450;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13451);
            reg = x13451;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13452);
            reg = x13452;
          }
          // loc("zirgen/components/u32.cpp":34:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13453);
            reg = x13453;
          }
          // loc("zirgen/circuit/rv32im/ecall.cpp":243:41)
          auto x13454 = x13445 * x79;
          host_args.at(0) = x13454;
          host_args.at(1) = x13450;
          host_args.at(2) = x13451;
          host_args.at(3) = x13452;
          host_args.at(4) = x13453;
          host(ctx, "log", "  COPYIN BODY: %x <- %w", host_args.data(), 5, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":179:10))
        auto x13455 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x13455 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        auto x13456 = x13455 - x853;
        // loc("zirgen/circuit/rv32im/ecall.cpp":246:10)
        if (x13456 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:246");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("zirgen/components/ram.cpp":175:10))
        auto x13457 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x13457 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        auto x13458 = x13457 - x13445;
        // loc("zirgen/circuit/rv32im/ecall.cpp":247:10)
        if (x13458 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/ecall.cpp:247");
      }
      if (x95 != 0) {
        // loc("zirgen/components/ram.cpp":43:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":44:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/ram.cpp":45:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/components/u32.cpp":28:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[14](Reg)"("./zirgen/components/mux.h":49:25))
    auto x13459 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x13459 != Fp::invalid());
    if (x13459 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/bigint.cpp":179:70))
      auto x13460 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x13460 != Fp::invalid());
      if (x13460 != 0) {
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        {
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13461 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13461 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13462 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13462 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13463 = x13462 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13464 = x13461 + x13463;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13465 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13465 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13466 = x13465 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13467 = x13464 + x13466;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13468 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13468 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13469 = x13468 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13470 = x13467 + x13469;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x13470 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13471 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x13471 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13472 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x13472 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13473 = args[2][135 * steps + ((cycle - 1) & mask)];
        assert(x13473 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13474 = args[2][136 * steps + ((cycle - 1) & mask)];
        assert(x13474 != Fp::invalid());
        // loc("./zirgen/components/u32.h":25:12)
        auto x13475 = x13472 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13476 = x13471 + x13475;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13477 = x13473 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13478 = x13476 + x13477;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13479 = x13474 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13480 = x13478 + x13479;
        // loc("zirgen/circuit/rv32im/bigint.cpp":189:9)
        if (x13480 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:189");
      }
      // loc("zirgen/circuit/rv32im/bigint.cpp":191:22)
      auto x13481 = x96 - x13460;
      if (x13481 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/bigint.cpp":192:47))
        auto x13482 = args[2][172 * steps + ((cycle - 1) & mask)];
        assert(x13482 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":192:23)
        auto x13483 = x96 - x13482;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13484 = args[2][177 * steps + ((cycle - 1) & mask)];
        assert(x13484 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":192:22)
        auto x13485 = x13483 - x13484;
        // loc("./zirgen/components/bits.h":27:23)
        {
          auto& reg = args[2][177 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13485);
          reg = x13485;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13486 = args[2][173 * steps + ((cycle - 1) & mask)];
        assert(x13486 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13487 = args[2][174 * steps + ((cycle - 1) & mask)];
        assert(x13487 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13488 = x13487 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13489 = x13486 + x13488;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13490 = args[2][175 * steps + ((cycle - 1) & mask)];
        assert(x13490 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13491 = x13490 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13492 = x13489 + x13491;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13493 = args[2][176 * steps + ((cycle - 1) & mask)];
        assert(x13493 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13494 = x13493 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13495 = x13492 + x13494;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13496 = args[2][177 * steps + ((cycle - 0) & mask)];
        assert(x13496 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":193:41)
        auto x13497 = x96 - x13496;
        // loc("zirgen/circuit/rv32im/bigint.cpp":193:36)
        auto x13498 = x13495 + x13497;
        {
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13499 = (x13498 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][172 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13499);
            reg = x13499;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13500 = x13498 - x96;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13501 = (x13500 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][173 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13501);
            reg = x13501;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13502 = x13498 - x93;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13503 = (x13502 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][174 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13503);
            reg = x13503;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13504 = x13498 - x78;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13505 = (x13504 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][175 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13505);
            reg = x13505;
          }
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13506 = x13498 - x79;
          // loc("./zirgen/components/onehot.h":37:26)
          auto x13507 = (x13506 == 0) ? Fp(1) : Fp(0);
          // loc("./zirgen/components/onehot.h":37:9)
          {
            auto& reg = args[2][176 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13507);
            reg = x13507;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13508 = args[2][173 * steps + ((cycle - 0) & mask)];
        assert(x13508 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13509 = args[2][174 * steps + ((cycle - 0) & mask)];
        assert(x13509 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13510 = x13509 * x93;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13511 = x13508 + x13510;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13512 = args[2][175 * steps + ((cycle - 0) & mask)];
        assert(x13512 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13513 = x13512 * x78;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13514 = x13511 + x13513;
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13515 = args[2][176 * steps + ((cycle - 0) & mask)];
        assert(x13515 != Fp::invalid());
        // loc("./zirgen/components/onehot.h":46:19)
        auto x13516 = x13515 * x79;
        // loc("./zirgen/components/onehot.h":46:13)
        auto x13517 = x13514 + x13516;
        // loc("./zirgen/components/onehot.h":40:8)
        auto x13518 = x13517 - x13498;
        // loc("./zirgen/components/onehot.h":40:8)
        if (x13518 != 0) throw std::runtime_error("eqz failed at: ./zirgen/components/onehot.h:40");
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/bigint.cpp":195:19))
      auto x13519 = args[2][174 * steps + ((cycle - 0) & mask)];
      assert(x13519 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[4](Reg)"("zirgen/circuit/rv32im/bigint.cpp":195:34))
      auto x13520 = args[2][176 * steps + ((cycle - 0) & mask)];
      assert(x13520 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/bigint.cpp":195:19)
      auto x13521 = x13519 + x13520;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13522 = args[2][177 * steps + ((cycle - 0) & mask)];
      assert(x13522 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/bigint.cpp":195:18)
      auto x13523 = x13521 * x13522;
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][178 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13523);
        reg = x13523;
      }
      // loc("zirgen/circuit/rv32im/bigint.cpp":196:17)
      auto x13524 = x13520 * x13522;
      // loc("./zirgen/components/bits.h":27:23)
      {
        auto& reg = args[2][179 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x13524);
        reg = x13524;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[1](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x13525 = args[2][173 * steps + ((cycle - 0) & mask)];
      assert(x13525 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x13526 = x13519 * x93;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x13527 = x13525 + x13526;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[3](Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x13528 = args[2][175 * steps + ((cycle - 0) & mask)];
      assert(x13528 != Fp::invalid());
      // loc("./zirgen/components/onehot.h":46:19)
      auto x13529 = x13528 * x78;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x13530 = x13527 + x13529;
      // loc("./zirgen/components/onehot.h":46:19)
      auto x13531 = x13520 * x79;
      // loc("./zirgen/components/onehot.h":46:13)
      auto x13532 = x13530 + x13531;
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13533 = args[2][178 * steps + ((cycle - 0) & mask)];
      assert(x13533 != Fp::invalid());
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Bit/bit(Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x13534 = args[2][179 * steps + ((cycle - 0) & mask)];
      assert(x13534 != Fp::invalid());
      host_args.at(0) = x13532;
      host_args.at(1) = x13522;
      host_args.at(2) = x13533;
      host_args.at(3) = x13534;
      host(ctx, "log", "BIGINT: stage = %u, stageOffset = %u, mulActive = %u, finalize = %u", host_args.data(), 4, host_outs.data(), 0);
      // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/bigint.cpp":204:18))
      auto x13535 = args[2][172 * steps + ((cycle - 0) & mask)];
      assert(x13535 != Fp::invalid());
      if (x13535 != 0) {
        {
          host_args.at(0) = x27;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13536 = host_outs.at(0);
          auto x13537 = host_outs.at(1);
          auto x13538 = host_outs.at(2);
          auto x13539 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13536);
            reg = x13536;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13537);
            reg = x13537;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13538);
            reg = x13538;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13539);
            reg = x13539;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13540 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13540 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13541 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13541 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13542 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13542 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13543 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13543 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x27);
          reg = x27;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13540);
          reg = x13540;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13541);
          reg = x13541;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13542);
          reg = x13542;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13543);
          reg = x13543;
        }
        {
          host_args.at(0) = x25;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13544 = host_outs.at(0);
          auto x13545 = host_outs.at(1);
          auto x13546 = host_outs.at(2);
          auto x13547 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13544);
            reg = x13544;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13545);
            reg = x13545;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13546);
            reg = x13546;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13547);
            reg = x13547;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13548 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13548 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13549 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13549 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13550 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13550 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13551 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13551 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x25);
          reg = x25;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13548);
          reg = x13548;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13549);
          reg = x13549;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13550);
          reg = x13550;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13551);
          reg = x13551;
        }
        {
          host_args.at(0) = x24;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13552 = host_outs.at(0);
          auto x13553 = host_outs.at(1);
          auto x13554 = host_outs.at(2);
          auto x13555 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13552);
            reg = x13552;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13553);
            reg = x13553;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13554);
            reg = x13554;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13555);
            reg = x13555;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13556 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13556 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13557 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13557 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13558 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13558 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13559 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13559 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x24);
          reg = x24;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13556);
          reg = x13556;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13557);
          reg = x13557;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13558);
          reg = x13558;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13559);
          reg = x13559;
        }
        {
          host_args.at(0) = x26;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13560 = host_outs.at(0);
          auto x13561 = host_outs.at(1);
          auto x13562 = host_outs.at(2);
          auto x13563 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13560);
            reg = x13560;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13561);
            reg = x13561;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13562);
            reg = x13562;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13563);
            reg = x13563;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13564 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13564 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13565 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13565 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13566 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13566 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13567 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13567 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x26);
          reg = x26;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13564);
          reg = x13564;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13565);
          reg = x13565;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13566);
          reg = x13566;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13567);
          reg = x13567;
        }
      }
      // loc("zirgen/circuit/rv32im/bigint.cpp":212:21)
      auto x13568 = x96 - x13522;
      if (x13568 != 0) {
        if (x13525 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13569 = args[2][140 * steps + ((cycle - 1) & mask)];
          assert(x13569 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13570 = args[2][141 * steps + ((cycle - 1) & mask)];
          assert(x13570 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13571 = args[2][142 * steps + ((cycle - 1) & mask)];
          assert(x13571 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13572 = args[2][143 * steps + ((cycle - 1) & mask)];
          assert(x13572 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13573 = x13570 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13574 = x13569 + x13573;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13575 = x13571 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13576 = x13574 + x13575;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13577 = x13572 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13578 = x13576 + x13577;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13579 = x13578 * x77;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13579);
            reg = x13579;
          }
        }
        if (x13519 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13580 = args[2][126 * steps + ((cycle - 3) & mask)];
          assert(x13580 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13581 = args[2][127 * steps + ((cycle - 3) & mask)];
          assert(x13581 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13582 = args[2][128 * steps + ((cycle - 3) & mask)];
          assert(x13582 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13583 = args[2][129 * steps + ((cycle - 3) & mask)];
          assert(x13583 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13584 = x13581 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13585 = x13580 + x13584;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13586 = x13582 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13587 = x13585 + x13586;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13588 = x13583 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13589 = x13587 + x13588;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13590 = x13589 * x77;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13590);
            reg = x13590;
          }
        }
        if (x13528 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13591 = args[2][133 * steps + ((cycle - 5) & mask)];
          assert(x13591 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13592 = args[2][134 * steps + ((cycle - 5) & mask)];
          assert(x13592 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13593 = args[2][135 * steps + ((cycle - 5) & mask)];
          assert(x13593 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13594 = args[2][136 * steps + ((cycle - 5) & mask)];
          assert(x13594 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13595 = x13592 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13596 = x13591 + x13595;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13597 = x13593 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13598 = x13596 + x13597;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13599 = x13594 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13600 = x13598 + x13599;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13601 = x13600 * x77;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13601);
            reg = x13601;
          }
        }
        if (x13520 != 0) {
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13602 = args[2][119 * steps + ((cycle - 7) & mask)];
          assert(x13602 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13603 = args[2][120 * steps + ((cycle - 7) & mask)];
          assert(x13603 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13604 = args[2][121 * steps + ((cycle - 7) & mask)];
          assert(x13604 != Fp::invalid());
          // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
          auto x13605 = args[2][122 * steps + ((cycle - 7) & mask)];
          assert(x13605 != Fp::invalid());
          // loc("./zirgen/components/u32.h":25:12)
          auto x13606 = x13603 * x91;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13607 = x13602 + x13606;
          // loc("./zirgen/components/u32.h":26:12)
          auto x13608 = x13604 * x81;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13609 = x13607 + x13608;
          // loc("./zirgen/components/u32.h":27:12)
          auto x13610 = x13605 * x80;
          // loc("./zirgen/components/u32.h":24:12)
          auto x13611 = x13609 + x13610;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:83)
          auto x13612 = x13611 * x77;
          // loc("zirgen/circuit/rv32im/bigint.cpp":238:9)
          {
            auto& reg = args[2][171 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13612);
            reg = x13612;
          }
        }
      }
      if (x13522 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":242:54))
        auto x13613 = args[2][171 * steps + ((cycle - 1) & mask)];
        assert(x13613 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":242:21)
        {
          auto& reg = args[2][171 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13613);
          reg = x13613;
        }
      }
      // loc("zirgen/circuit/rv32im/bigint.cpp":246:48)
      auto x13614 = x13525 + x13519;
      // loc("zirgen/circuit/rv32im/bigint.cpp":246:48)
      auto x13615 = x13614 + x13528;
      if (x13615 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x13616 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x13616 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":248:40)
        auto x13617 = x13522 * x79;
        // loc("zirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13618 = x13616 + x13617;
        {
          host_args.at(0) = x13618;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13619 = host_outs.at(0);
          auto x13620 = host_outs.at(1);
          auto x13621 = host_outs.at(2);
          auto x13622 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][119 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13619);
            reg = x13619;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][120 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13620);
            reg = x13620;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][121 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13621);
            reg = x13621;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][122 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13622);
            reg = x13622;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13623 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x13623 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13624 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x13624 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13625 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x13625 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13626 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x13626 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13618);
          reg = x13618;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13623);
          reg = x13623;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13624);
          reg = x13624;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13625);
          reg = x13625;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13626);
          reg = x13626;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13627 = x13618 + x96;
        {
          host_args.at(0) = x13627;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13628 = host_outs.at(0);
          auto x13629 = host_outs.at(1);
          auto x13630 = host_outs.at(2);
          auto x13631 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][126 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13628);
            reg = x13628;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][127 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13629);
            reg = x13629;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][128 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13630);
            reg = x13630;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][129 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13631);
            reg = x13631;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13632 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x13632 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13633 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x13633 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13634 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x13634 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13635 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x13635 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13627);
          reg = x13627;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13632);
          reg = x13632;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13633);
          reg = x13633;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13634);
          reg = x13634;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13635);
          reg = x13635;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13636 = x13618 + x93;
        {
          host_args.at(0) = x13636;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13637 = host_outs.at(0);
          auto x13638 = host_outs.at(1);
          auto x13639 = host_outs.at(2);
          auto x13640 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][133 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13637);
            reg = x13637;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][134 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13638);
            reg = x13638;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][135 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13639);
            reg = x13639;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][136 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13640);
            reg = x13640;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13641 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x13641 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13642 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x13642 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13643 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x13643 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13644 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x13644 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13636);
          reg = x13636;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13641);
          reg = x13641;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13642);
          reg = x13642;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13643);
          reg = x13643;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13644);
          reg = x13644;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":248:31)
        auto x13645 = x13618 + x78;
        {
          host_args.at(0) = x13645;
          host_args.at(1) = x96;
          host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
          auto x13646 = host_outs.at(0);
          auto x13647 = host_outs.at(1);
          auto x13648 = host_outs.at(2);
          auto x13649 = host_outs.at(3);
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13646);
            reg = x13646;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13647);
            reg = x13647;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13648);
            reg = x13648;
          }
          // loc("zirgen/components/u32.cpp":82:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x13649);
            reg = x13649;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13650 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x13650 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13651 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x13651 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13652 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x13652 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x13653 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x13653 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13645);
          reg = x13645;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x96);
          reg = x96;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13650);
          reg = x13650;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13651);
          reg = x13651;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13652);
          reg = x13652;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x13653);
          reg = x13653;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":251:10)
        auto x13654 = x13616 * x79;
        // loc("./zirgen/components/u32.h":25:12)
        auto x13655 = x13624 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13656 = x13623 + x13655;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13657 = x13625 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13658 = x13656 + x13657;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13659 = x13626 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13660 = x13658 + x13659;
        // loc("./zirgen/components/u32.h":25:12)
        auto x13661 = x13633 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13662 = x13632 + x13661;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13663 = x13634 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13664 = x13662 + x13663;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13665 = x13635 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13666 = x13664 + x13665;
        // loc("./zirgen/components/u32.h":25:12)
        auto x13667 = x13642 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13668 = x13641 + x13667;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13669 = x13643 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13670 = x13668 + x13669;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13671 = x13644 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13672 = x13670 + x13671;
        // loc("./zirgen/components/u32.h":25:12)
        auto x13673 = x13651 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13674 = x13650 + x13673;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13675 = x13652 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13676 = x13674 + x13675;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13677 = x13653 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13678 = x13676 + x13677;
        host_args.at(0) = x13654;
        host_args.at(1) = x13660;
        host_args.at(2) = x13666;
        host_args.at(3) = x13672;
        host_args.at(4) = x13678;
        host(ctx, "log", "  Reading: ioAddr = 0x%x, data = { %u, %u, %u, %u }", host_args.data(), 5, host_outs.data(), 0);
      }
      {
        host_args.at(0) = x25;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13679 = host_outs.at(0);
        auto x13680 = host_outs.at(1);
        auto x13681 = host_outs.at(2);
        auto x13682 = host_outs.at(3);
        // loc("./zirgen/components/u32.h":25:12)
        auto x13683 = x13680 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13684 = x13679 + x13683;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13685 = x13681 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13686 = x13684 + x13685;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13687 = x13682 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13688 = x13686 + x13687;
        // loc("zirgen/circuit/rv32im/bigint.cpp":13:14)
        auto x13689 = x13688 * x77;
        host_args.at(0) = x13689;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13690 = host_outs.at(0);
        auto x13691 = host_outs.at(1);
        auto x13692 = host_outs.at(2);
        auto x13693 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13694 = x13689 + x96;
        host_args.at(0) = x13694;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13695 = host_outs.at(0);
        auto x13696 = host_outs.at(1);
        auto x13697 = host_outs.at(2);
        auto x13698 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13699 = x13689 + x93;
        host_args.at(0) = x13699;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13700 = host_outs.at(0);
        auto x13701 = host_outs.at(1);
        auto x13702 = host_outs.at(2);
        auto x13703 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13704 = x13689 + x78;
        host_args.at(0) = x13704;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13705 = host_outs.at(0);
        auto x13706 = host_outs.at(1);
        auto x13707 = host_outs.at(2);
        auto x13708 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13709 = x13689 + x79;
        host_args.at(0) = x13709;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13710 = host_outs.at(0);
        auto x13711 = host_outs.at(1);
        auto x13712 = host_outs.at(2);
        auto x13713 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13714 = x13689 + x75;
        host_args.at(0) = x13714;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13715 = host_outs.at(0);
        auto x13716 = host_outs.at(1);
        auto x13717 = host_outs.at(2);
        auto x13718 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13719 = x13689 + x74;
        host_args.at(0) = x13719;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13720 = host_outs.at(0);
        auto x13721 = host_outs.at(1);
        auto x13722 = host_outs.at(2);
        auto x13723 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13724 = x13689 + x73;
        host_args.at(0) = x13724;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13725 = host_outs.at(0);
        auto x13726 = host_outs.at(1);
        auto x13727 = host_outs.at(2);
        auto x13728 = host_outs.at(3);
        host_args.at(0) = x24;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13729 = host_outs.at(0);
        auto x13730 = host_outs.at(1);
        auto x13731 = host_outs.at(2);
        auto x13732 = host_outs.at(3);
        // loc("./zirgen/components/u32.h":25:12)
        auto x13733 = x13730 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13734 = x13729 + x13733;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13735 = x13731 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13736 = x13734 + x13735;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13737 = x13732 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13738 = x13736 + x13737;
        // loc("zirgen/circuit/rv32im/bigint.cpp":13:14)
        auto x13739 = x13738 * x77;
        host_args.at(0) = x13739;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13740 = host_outs.at(0);
        auto x13741 = host_outs.at(1);
        auto x13742 = host_outs.at(2);
        auto x13743 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13744 = x13739 + x96;
        host_args.at(0) = x13744;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13745 = host_outs.at(0);
        auto x13746 = host_outs.at(1);
        auto x13747 = host_outs.at(2);
        auto x13748 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13749 = x13739 + x93;
        host_args.at(0) = x13749;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13750 = host_outs.at(0);
        auto x13751 = host_outs.at(1);
        auto x13752 = host_outs.at(2);
        auto x13753 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13754 = x13739 + x78;
        host_args.at(0) = x13754;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13755 = host_outs.at(0);
        auto x13756 = host_outs.at(1);
        auto x13757 = host_outs.at(2);
        auto x13758 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13759 = x13739 + x79;
        host_args.at(0) = x13759;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13760 = host_outs.at(0);
        auto x13761 = host_outs.at(1);
        auto x13762 = host_outs.at(2);
        auto x13763 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13764 = x13739 + x75;
        host_args.at(0) = x13764;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13765 = host_outs.at(0);
        auto x13766 = host_outs.at(1);
        auto x13767 = host_outs.at(2);
        auto x13768 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13769 = x13739 + x74;
        host_args.at(0) = x13769;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13770 = host_outs.at(0);
        auto x13771 = host_outs.at(1);
        auto x13772 = host_outs.at(2);
        auto x13773 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13774 = x13739 + x73;
        host_args.at(0) = x13774;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13775 = host_outs.at(0);
        auto x13776 = host_outs.at(1);
        auto x13777 = host_outs.at(2);
        auto x13778 = host_outs.at(3);
        host_args.at(0) = x26;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13779 = host_outs.at(0);
        auto x13780 = host_outs.at(1);
        auto x13781 = host_outs.at(2);
        auto x13782 = host_outs.at(3);
        // loc("./zirgen/components/u32.h":25:12)
        auto x13783 = x13780 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13784 = x13779 + x13783;
        // loc("./zirgen/components/u32.h":26:12)
        auto x13785 = x13781 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13786 = x13784 + x13785;
        // loc("./zirgen/components/u32.h":27:12)
        auto x13787 = x13782 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x13788 = x13786 + x13787;
        // loc("zirgen/circuit/rv32im/bigint.cpp":13:14)
        auto x13789 = x13788 * x77;
        host_args.at(0) = x13789;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13790 = host_outs.at(0);
        auto x13791 = host_outs.at(1);
        auto x13792 = host_outs.at(2);
        auto x13793 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13794 = x13789 + x96;
        host_args.at(0) = x13794;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13795 = host_outs.at(0);
        auto x13796 = host_outs.at(1);
        auto x13797 = host_outs.at(2);
        auto x13798 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13799 = x13789 + x93;
        host_args.at(0) = x13799;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13800 = host_outs.at(0);
        auto x13801 = host_outs.at(1);
        auto x13802 = host_outs.at(2);
        auto x13803 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13804 = x13789 + x78;
        host_args.at(0) = x13804;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13805 = host_outs.at(0);
        auto x13806 = host_outs.at(1);
        auto x13807 = host_outs.at(2);
        auto x13808 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13809 = x13789 + x79;
        host_args.at(0) = x13809;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13810 = host_outs.at(0);
        auto x13811 = host_outs.at(1);
        auto x13812 = host_outs.at(2);
        auto x13813 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13814 = x13789 + x75;
        host_args.at(0) = x13814;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13815 = host_outs.at(0);
        auto x13816 = host_outs.at(1);
        auto x13817 = host_outs.at(2);
        auto x13818 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13819 = x13789 + x74;
        host_args.at(0) = x13819;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13820 = host_outs.at(0);
        auto x13821 = host_outs.at(1);
        auto x13822 = host_outs.at(2);
        auto x13823 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":18:27)
        auto x13824 = x13789 + x73;
        host_args.at(0) = x13824;
        host_args.at(1) = x96;
        host(ctx, "ramRead", "", host_args.data(), 2, host_outs.data(), 4);
        auto x13825 = host_outs.at(0);
        auto x13826 = host_outs.at(1);
        auto x13827 = host_outs.at(2);
        auto x13828 = host_outs.at(3);
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13829 = x13690 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13830 = x13690 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13831 = x13691 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13832 = x13830 + x13831;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13833 = x13690 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13834 = x13691 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13835 = x13833 + x13834;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13836 = x13692 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13837 = x13835 + x13836;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13838 = x13690 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13839 = x13691 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13840 = x13838 + x13839;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13841 = x13692 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13842 = x13840 + x13841;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13843 = x13693 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13844 = x13842 + x13843;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13845 = x13690 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13846 = x13691 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13847 = x13845 + x13846;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13848 = x13692 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13849 = x13847 + x13848;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13850 = x13693 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13851 = x13849 + x13850;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13852 = x13695 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13853 = x13851 + x13852;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13854 = x13690 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13855 = x13691 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13856 = x13854 + x13855;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13857 = x13692 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13858 = x13856 + x13857;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13859 = x13693 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13860 = x13858 + x13859;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13861 = x13695 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13862 = x13860 + x13861;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13863 = x13696 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13864 = x13862 + x13863;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13865 = x13690 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13866 = x13691 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13867 = x13865 + x13866;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13868 = x13692 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13869 = x13867 + x13868;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13870 = x13693 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13871 = x13869 + x13870;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13872 = x13695 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13873 = x13871 + x13872;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13874 = x13696 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13875 = x13873 + x13874;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13876 = x13697 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13877 = x13875 + x13876;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13878 = x13690 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13879 = x13691 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13880 = x13878 + x13879;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13881 = x13692 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13882 = x13880 + x13881;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13883 = x13693 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13884 = x13882 + x13883;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13885 = x13695 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13886 = x13884 + x13885;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13887 = x13696 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13888 = x13886 + x13887;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13889 = x13697 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13890 = x13888 + x13889;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13891 = x13698 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13892 = x13890 + x13891;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13893 = x13690 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13894 = x13691 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13895 = x13893 + x13894;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13896 = x13692 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13897 = x13895 + x13896;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13898 = x13693 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13899 = x13897 + x13898;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13900 = x13695 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13901 = x13899 + x13900;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13902 = x13696 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13903 = x13901 + x13902;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13904 = x13697 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13905 = x13903 + x13904;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13906 = x13698 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13907 = x13905 + x13906;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13908 = x13700 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13909 = x13907 + x13908;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13910 = x13690 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13911 = x13691 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13912 = x13910 + x13911;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13913 = x13692 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13914 = x13912 + x13913;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13915 = x13693 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13916 = x13914 + x13915;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13917 = x13695 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13918 = x13916 + x13917;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13919 = x13696 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13920 = x13918 + x13919;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13921 = x13697 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13922 = x13920 + x13921;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13923 = x13698 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13924 = x13922 + x13923;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13925 = x13700 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13926 = x13924 + x13925;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13927 = x13701 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13928 = x13926 + x13927;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13929 = x13690 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13930 = x13691 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13931 = x13929 + x13930;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13932 = x13692 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13933 = x13931 + x13932;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13934 = x13693 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13935 = x13933 + x13934;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13936 = x13695 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13937 = x13935 + x13936;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13938 = x13696 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13939 = x13937 + x13938;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13940 = x13697 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13941 = x13939 + x13940;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13942 = x13698 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13943 = x13941 + x13942;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13944 = x13700 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13945 = x13943 + x13944;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13946 = x13701 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13947 = x13945 + x13946;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13948 = x13702 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13949 = x13947 + x13948;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13950 = x13690 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13951 = x13691 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13952 = x13950 + x13951;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13953 = x13692 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13954 = x13952 + x13953;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13955 = x13693 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13956 = x13954 + x13955;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13957 = x13695 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13958 = x13956 + x13957;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13959 = x13696 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13960 = x13958 + x13959;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13961 = x13697 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13962 = x13960 + x13961;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13963 = x13698 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13964 = x13962 + x13963;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13965 = x13700 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13966 = x13964 + x13965;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13967 = x13701 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13968 = x13966 + x13967;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13969 = x13702 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13970 = x13968 + x13969;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13971 = x13703 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13972 = x13970 + x13971;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13973 = x13690 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13974 = x13691 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13975 = x13973 + x13974;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13976 = x13692 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13977 = x13975 + x13976;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13978 = x13693 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13979 = x13977 + x13978;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13980 = x13695 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13981 = x13979 + x13980;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13982 = x13696 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13983 = x13981 + x13982;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13984 = x13697 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13985 = x13983 + x13984;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13986 = x13698 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13987 = x13985 + x13986;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13988 = x13700 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13989 = x13987 + x13988;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13990 = x13701 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13991 = x13989 + x13990;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13992 = x13702 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13993 = x13991 + x13992;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13994 = x13703 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13995 = x13993 + x13994;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13996 = x13705 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x13997 = x13995 + x13996;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13998 = x13690 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x13999 = x13691 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14000 = x13998 + x13999;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14001 = x13692 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14002 = x14000 + x14001;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14003 = x13693 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14004 = x14002 + x14003;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14005 = x13695 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14006 = x14004 + x14005;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14007 = x13696 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14008 = x14006 + x14007;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14009 = x13697 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14010 = x14008 + x14009;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14011 = x13698 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14012 = x14010 + x14011;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14013 = x13700 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14014 = x14012 + x14013;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14015 = x13701 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14016 = x14014 + x14015;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14017 = x13702 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14018 = x14016 + x14017;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14019 = x13703 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14020 = x14018 + x14019;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14021 = x13705 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14022 = x14020 + x14021;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14023 = x13706 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14024 = x14022 + x14023;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14025 = x13690 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14026 = x13691 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14027 = x14025 + x14026;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14028 = x13692 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14029 = x14027 + x14028;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14030 = x13693 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14031 = x14029 + x14030;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14032 = x13695 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14033 = x14031 + x14032;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14034 = x13696 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14035 = x14033 + x14034;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14036 = x13697 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14037 = x14035 + x14036;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14038 = x13698 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14039 = x14037 + x14038;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14040 = x13700 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14041 = x14039 + x14040;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14042 = x13701 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14043 = x14041 + x14042;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14044 = x13702 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14045 = x14043 + x14044;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14046 = x13703 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14047 = x14045 + x14046;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14048 = x13705 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14049 = x14047 + x14048;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14050 = x13706 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14051 = x14049 + x14050;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14052 = x13707 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14053 = x14051 + x14052;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14054 = x13690 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14055 = x13691 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14056 = x14054 + x14055;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14057 = x13692 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14058 = x14056 + x14057;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14059 = x13693 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14060 = x14058 + x14059;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14061 = x13695 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14062 = x14060 + x14061;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14063 = x13696 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14064 = x14062 + x14063;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14065 = x13697 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14066 = x14064 + x14065;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14067 = x13698 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14068 = x14066 + x14067;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14069 = x13700 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14070 = x14068 + x14069;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14071 = x13701 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14072 = x14070 + x14071;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14073 = x13702 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14074 = x14072 + x14073;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14075 = x13703 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14076 = x14074 + x14075;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14077 = x13705 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14078 = x14076 + x14077;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14079 = x13706 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14080 = x14078 + x14079;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14081 = x13707 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14082 = x14080 + x14081;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14083 = x13708 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14084 = x14082 + x14083;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14085 = x13690 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14086 = x13691 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14087 = x14085 + x14086;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14088 = x13692 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14089 = x14087 + x14088;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14090 = x13693 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14091 = x14089 + x14090;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14092 = x13695 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14093 = x14091 + x14092;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14094 = x13696 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14095 = x14093 + x14094;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14096 = x13697 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14097 = x14095 + x14096;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14098 = x13698 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14099 = x14097 + x14098;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14100 = x13700 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14101 = x14099 + x14100;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14102 = x13701 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14103 = x14101 + x14102;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14104 = x13702 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14105 = x14103 + x14104;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14106 = x13703 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14107 = x14105 + x14106;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14108 = x13705 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14109 = x14107 + x14108;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14110 = x13706 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14111 = x14109 + x14110;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14112 = x13707 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14113 = x14111 + x14112;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14114 = x13708 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14115 = x14113 + x14114;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14116 = x13710 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14117 = x14115 + x14116;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14118 = x13690 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14119 = x13691 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14120 = x14118 + x14119;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14121 = x13692 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14122 = x14120 + x14121;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14123 = x13693 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14124 = x14122 + x14123;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14125 = x13695 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14126 = x14124 + x14125;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14127 = x13696 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14128 = x14126 + x14127;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14129 = x13697 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14130 = x14128 + x14129;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14131 = x13698 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14132 = x14130 + x14131;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14133 = x13700 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14134 = x14132 + x14133;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14135 = x13701 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14136 = x14134 + x14135;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14137 = x13702 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14138 = x14136 + x14137;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14139 = x13703 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14140 = x14138 + x14139;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14141 = x13705 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14142 = x14140 + x14141;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14143 = x13706 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14144 = x14142 + x14143;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14145 = x13707 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14146 = x14144 + x14145;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14147 = x13708 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14148 = x14146 + x14147;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14149 = x13710 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14150 = x14148 + x14149;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14151 = x13711 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14152 = x14150 + x14151;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14153 = x13690 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14154 = x13691 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14155 = x14153 + x14154;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14156 = x13692 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14157 = x14155 + x14156;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14158 = x13693 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14159 = x14157 + x14158;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14160 = x13695 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14161 = x14159 + x14160;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14162 = x13696 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14163 = x14161 + x14162;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14164 = x13697 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14165 = x14163 + x14164;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14166 = x13698 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14167 = x14165 + x14166;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14168 = x13700 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14169 = x14167 + x14168;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14170 = x13701 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14171 = x14169 + x14170;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14172 = x13702 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14173 = x14171 + x14172;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14174 = x13703 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14175 = x14173 + x14174;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14176 = x13705 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14177 = x14175 + x14176;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14178 = x13706 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14179 = x14177 + x14178;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14180 = x13707 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14181 = x14179 + x14180;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14182 = x13708 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14183 = x14181 + x14182;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14184 = x13710 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14185 = x14183 + x14184;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14186 = x13711 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14187 = x14185 + x14186;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14188 = x13712 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14189 = x14187 + x14188;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14190 = x13690 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14191 = x13691 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14192 = x14190 + x14191;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14193 = x13692 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14194 = x14192 + x14193;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14195 = x13693 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14196 = x14194 + x14195;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14197 = x13695 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14198 = x14196 + x14197;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14199 = x13696 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14200 = x14198 + x14199;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14201 = x13697 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14202 = x14200 + x14201;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14203 = x13698 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14204 = x14202 + x14203;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14205 = x13700 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14206 = x14204 + x14205;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14207 = x13701 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14208 = x14206 + x14207;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14209 = x13702 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14210 = x14208 + x14209;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14211 = x13703 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14212 = x14210 + x14211;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14213 = x13705 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14214 = x14212 + x14213;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14215 = x13706 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14216 = x14214 + x14215;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14217 = x13707 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14218 = x14216 + x14217;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14219 = x13708 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14220 = x14218 + x14219;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14221 = x13710 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14222 = x14220 + x14221;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14223 = x13711 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14224 = x14222 + x14223;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14225 = x13712 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14226 = x14224 + x14225;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14227 = x13713 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14228 = x14226 + x14227;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14229 = x13690 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14230 = x13691 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14231 = x14229 + x14230;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14232 = x13692 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14233 = x14231 + x14232;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14234 = x13693 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14235 = x14233 + x14234;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14236 = x13695 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14237 = x14235 + x14236;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14238 = x13696 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14239 = x14237 + x14238;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14240 = x13697 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14241 = x14239 + x14240;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14242 = x13698 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14243 = x14241 + x14242;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14244 = x13700 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14245 = x14243 + x14244;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14246 = x13701 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14247 = x14245 + x14246;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14248 = x13702 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14249 = x14247 + x14248;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14250 = x13703 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14251 = x14249 + x14250;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14252 = x13705 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14253 = x14251 + x14252;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14254 = x13706 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14255 = x14253 + x14254;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14256 = x13707 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14257 = x14255 + x14256;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14258 = x13708 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14259 = x14257 + x14258;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14260 = x13710 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14261 = x14259 + x14260;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14262 = x13711 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14263 = x14261 + x14262;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14264 = x13712 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14265 = x14263 + x14264;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14266 = x13713 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14267 = x14265 + x14266;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14268 = x13715 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14269 = x14267 + x14268;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14270 = x13690 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14271 = x13691 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14272 = x14270 + x14271;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14273 = x13692 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14274 = x14272 + x14273;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14275 = x13693 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14276 = x14274 + x14275;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14277 = x13695 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14278 = x14276 + x14277;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14279 = x13696 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14280 = x14278 + x14279;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14281 = x13697 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14282 = x14280 + x14281;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14283 = x13698 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14284 = x14282 + x14283;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14285 = x13700 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14286 = x14284 + x14285;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14287 = x13701 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14288 = x14286 + x14287;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14289 = x13702 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14290 = x14288 + x14289;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14291 = x13703 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14292 = x14290 + x14291;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14293 = x13705 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14294 = x14292 + x14293;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14295 = x13706 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14296 = x14294 + x14295;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14297 = x13707 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14298 = x14296 + x14297;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14299 = x13708 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14300 = x14298 + x14299;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14301 = x13710 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14302 = x14300 + x14301;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14303 = x13711 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14304 = x14302 + x14303;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14305 = x13712 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14306 = x14304 + x14305;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14307 = x13713 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14308 = x14306 + x14307;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14309 = x13715 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14310 = x14308 + x14309;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14311 = x13716 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14312 = x14310 + x14311;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14313 = x13690 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14314 = x13691 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14315 = x14313 + x14314;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14316 = x13692 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14317 = x14315 + x14316;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14318 = x13693 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14319 = x14317 + x14318;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14320 = x13695 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14321 = x14319 + x14320;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14322 = x13696 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14323 = x14321 + x14322;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14324 = x13697 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14325 = x14323 + x14324;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14326 = x13698 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14327 = x14325 + x14326;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14328 = x13700 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14329 = x14327 + x14328;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14330 = x13701 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14331 = x14329 + x14330;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14332 = x13702 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14333 = x14331 + x14332;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14334 = x13703 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14335 = x14333 + x14334;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14336 = x13705 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14337 = x14335 + x14336;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14338 = x13706 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14339 = x14337 + x14338;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14340 = x13707 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14341 = x14339 + x14340;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14342 = x13708 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14343 = x14341 + x14342;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14344 = x13710 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14345 = x14343 + x14344;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14346 = x13711 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14347 = x14345 + x14346;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14348 = x13712 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14349 = x14347 + x14348;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14350 = x13713 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14351 = x14349 + x14350;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14352 = x13715 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14353 = x14351 + x14352;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14354 = x13716 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14355 = x14353 + x14354;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14356 = x13717 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14357 = x14355 + x14356;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14358 = x13690 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14359 = x13691 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14360 = x14358 + x14359;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14361 = x13692 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14362 = x14360 + x14361;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14363 = x13693 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14364 = x14362 + x14363;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14365 = x13695 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14366 = x14364 + x14365;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14367 = x13696 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14368 = x14366 + x14367;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14369 = x13697 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14370 = x14368 + x14369;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14371 = x13698 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14372 = x14370 + x14371;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14373 = x13700 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14374 = x14372 + x14373;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14375 = x13701 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14376 = x14374 + x14375;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14377 = x13702 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14378 = x14376 + x14377;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14379 = x13703 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14380 = x14378 + x14379;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14381 = x13705 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14382 = x14380 + x14381;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14383 = x13706 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14384 = x14382 + x14383;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14385 = x13707 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14386 = x14384 + x14385;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14387 = x13708 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14388 = x14386 + x14387;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14389 = x13710 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14390 = x14388 + x14389;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14391 = x13711 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14392 = x14390 + x14391;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14393 = x13712 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14394 = x14392 + x14393;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14395 = x13713 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14396 = x14394 + x14395;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14397 = x13715 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14398 = x14396 + x14397;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14399 = x13716 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14400 = x14398 + x14399;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14401 = x13717 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14402 = x14400 + x14401;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14403 = x13718 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14404 = x14402 + x14403;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14405 = x13690 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14406 = x13691 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14407 = x14405 + x14406;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14408 = x13692 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14409 = x14407 + x14408;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14410 = x13693 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14411 = x14409 + x14410;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14412 = x13695 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14413 = x14411 + x14412;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14414 = x13696 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14415 = x14413 + x14414;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14416 = x13697 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14417 = x14415 + x14416;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14418 = x13698 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14419 = x14417 + x14418;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14420 = x13700 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14421 = x14419 + x14420;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14422 = x13701 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14423 = x14421 + x14422;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14424 = x13702 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14425 = x14423 + x14424;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14426 = x13703 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14427 = x14425 + x14426;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14428 = x13705 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14429 = x14427 + x14428;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14430 = x13706 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14431 = x14429 + x14430;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14432 = x13707 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14433 = x14431 + x14432;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14434 = x13708 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14435 = x14433 + x14434;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14436 = x13710 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14437 = x14435 + x14436;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14438 = x13711 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14439 = x14437 + x14438;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14440 = x13712 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14441 = x14439 + x14440;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14442 = x13713 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14443 = x14441 + x14442;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14444 = x13715 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14445 = x14443 + x14444;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14446 = x13716 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14447 = x14445 + x14446;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14448 = x13717 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14449 = x14447 + x14448;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14450 = x13718 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14451 = x14449 + x14450;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14452 = x13720 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14453 = x14451 + x14452;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14454 = x13690 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14455 = x13691 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14456 = x14454 + x14455;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14457 = x13692 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14458 = x14456 + x14457;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14459 = x13693 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14460 = x14458 + x14459;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14461 = x13695 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14462 = x14460 + x14461;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14463 = x13696 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14464 = x14462 + x14463;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14465 = x13697 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14466 = x14464 + x14465;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14467 = x13698 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14468 = x14466 + x14467;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14469 = x13700 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14470 = x14468 + x14469;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14471 = x13701 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14472 = x14470 + x14471;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14473 = x13702 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14474 = x14472 + x14473;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14475 = x13703 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14476 = x14474 + x14475;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14477 = x13705 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14478 = x14476 + x14477;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14479 = x13706 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14480 = x14478 + x14479;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14481 = x13707 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14482 = x14480 + x14481;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14483 = x13708 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14484 = x14482 + x14483;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14485 = x13710 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14486 = x14484 + x14485;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14487 = x13711 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14488 = x14486 + x14487;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14489 = x13712 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14490 = x14488 + x14489;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14491 = x13713 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14492 = x14490 + x14491;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14493 = x13715 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14494 = x14492 + x14493;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14495 = x13716 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14496 = x14494 + x14495;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14497 = x13717 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14498 = x14496 + x14497;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14499 = x13718 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14500 = x14498 + x14499;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14501 = x13720 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14502 = x14500 + x14501;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14503 = x13721 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14504 = x14502 + x14503;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14505 = x13690 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14506 = x13691 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14507 = x14505 + x14506;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14508 = x13692 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14509 = x14507 + x14508;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14510 = x13693 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14511 = x14509 + x14510;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14512 = x13695 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14513 = x14511 + x14512;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14514 = x13696 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14515 = x14513 + x14514;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14516 = x13697 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14517 = x14515 + x14516;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14518 = x13698 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14519 = x14517 + x14518;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14520 = x13700 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14521 = x14519 + x14520;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14522 = x13701 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14523 = x14521 + x14522;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14524 = x13702 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14525 = x14523 + x14524;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14526 = x13703 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14527 = x14525 + x14526;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14528 = x13705 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14529 = x14527 + x14528;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14530 = x13706 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14531 = x14529 + x14530;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14532 = x13707 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14533 = x14531 + x14532;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14534 = x13708 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14535 = x14533 + x14534;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14536 = x13710 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14537 = x14535 + x14536;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14538 = x13711 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14539 = x14537 + x14538;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14540 = x13712 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14541 = x14539 + x14540;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14542 = x13713 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14543 = x14541 + x14542;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14544 = x13715 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14545 = x14543 + x14544;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14546 = x13716 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14547 = x14545 + x14546;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14548 = x13717 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14549 = x14547 + x14548;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14550 = x13718 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14551 = x14549 + x14550;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14552 = x13720 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14553 = x14551 + x14552;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14554 = x13721 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14555 = x14553 + x14554;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14556 = x13722 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14557 = x14555 + x14556;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14558 = x13690 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14559 = x13691 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14560 = x14558 + x14559;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14561 = x13692 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14562 = x14560 + x14561;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14563 = x13693 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14564 = x14562 + x14563;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14565 = x13695 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14566 = x14564 + x14565;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14567 = x13696 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14568 = x14566 + x14567;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14569 = x13697 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14570 = x14568 + x14569;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14571 = x13698 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14572 = x14570 + x14571;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14573 = x13700 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14574 = x14572 + x14573;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14575 = x13701 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14576 = x14574 + x14575;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14577 = x13702 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14578 = x14576 + x14577;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14579 = x13703 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14580 = x14578 + x14579;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14581 = x13705 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14582 = x14580 + x14581;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14583 = x13706 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14584 = x14582 + x14583;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14585 = x13707 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14586 = x14584 + x14585;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14587 = x13708 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14588 = x14586 + x14587;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14589 = x13710 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14590 = x14588 + x14589;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14591 = x13711 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14592 = x14590 + x14591;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14593 = x13712 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14594 = x14592 + x14593;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14595 = x13713 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14596 = x14594 + x14595;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14597 = x13715 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14598 = x14596 + x14597;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14599 = x13716 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14600 = x14598 + x14599;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14601 = x13717 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14602 = x14600 + x14601;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14603 = x13718 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14604 = x14602 + x14603;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14605 = x13720 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14606 = x14604 + x14605;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14607 = x13721 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14608 = x14606 + x14607;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14609 = x13722 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14610 = x14608 + x14609;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14611 = x13723 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14612 = x14610 + x14611;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14613 = x13690 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14614 = x13691 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14615 = x14613 + x14614;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14616 = x13692 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14617 = x14615 + x14616;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14618 = x13693 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14619 = x14617 + x14618;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14620 = x13695 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14621 = x14619 + x14620;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14622 = x13696 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14623 = x14621 + x14622;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14624 = x13697 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14625 = x14623 + x14624;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14626 = x13698 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14627 = x14625 + x14626;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14628 = x13700 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14629 = x14627 + x14628;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14630 = x13701 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14631 = x14629 + x14630;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14632 = x13702 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14633 = x14631 + x14632;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14634 = x13703 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14635 = x14633 + x14634;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14636 = x13705 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14637 = x14635 + x14636;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14638 = x13706 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14639 = x14637 + x14638;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14640 = x13707 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14641 = x14639 + x14640;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14642 = x13708 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14643 = x14641 + x14642;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14644 = x13710 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14645 = x14643 + x14644;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14646 = x13711 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14647 = x14645 + x14646;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14648 = x13712 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14649 = x14647 + x14648;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14650 = x13713 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14651 = x14649 + x14650;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14652 = x13715 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14653 = x14651 + x14652;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14654 = x13716 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14655 = x14653 + x14654;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14656 = x13717 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14657 = x14655 + x14656;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14658 = x13718 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14659 = x14657 + x14658;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14660 = x13720 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14661 = x14659 + x14660;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14662 = x13721 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14663 = x14661 + x14662;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14664 = x13722 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14665 = x14663 + x14664;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14666 = x13723 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14667 = x14665 + x14666;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14668 = x13725 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14669 = x14667 + x14668;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14670 = x13690 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14671 = x13691 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14672 = x14670 + x14671;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14673 = x13692 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14674 = x14672 + x14673;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14675 = x13693 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14676 = x14674 + x14675;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14677 = x13695 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14678 = x14676 + x14677;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14679 = x13696 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14680 = x14678 + x14679;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14681 = x13697 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14682 = x14680 + x14681;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14683 = x13698 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14684 = x14682 + x14683;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14685 = x13700 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14686 = x14684 + x14685;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14687 = x13701 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14688 = x14686 + x14687;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14689 = x13702 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14690 = x14688 + x14689;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14691 = x13703 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14692 = x14690 + x14691;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14693 = x13705 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14694 = x14692 + x14693;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14695 = x13706 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14696 = x14694 + x14695;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14697 = x13707 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14698 = x14696 + x14697;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14699 = x13708 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14700 = x14698 + x14699;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14701 = x13710 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14702 = x14700 + x14701;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14703 = x13711 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14704 = x14702 + x14703;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14705 = x13712 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14706 = x14704 + x14705;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14707 = x13713 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14708 = x14706 + x14707;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14709 = x13715 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14710 = x14708 + x14709;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14711 = x13716 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14712 = x14710 + x14711;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14713 = x13717 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14714 = x14712 + x14713;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14715 = x13718 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14716 = x14714 + x14715;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14717 = x13720 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14718 = x14716 + x14717;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14719 = x13721 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14720 = x14718 + x14719;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14721 = x13722 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14722 = x14720 + x14721;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14723 = x13723 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14724 = x14722 + x14723;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14725 = x13725 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14726 = x14724 + x14725;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14727 = x13726 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14728 = x14726 + x14727;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14729 = x13690 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14730 = x13691 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14731 = x14729 + x14730;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14732 = x13692 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14733 = x14731 + x14732;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14734 = x13693 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14735 = x14733 + x14734;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14736 = x13695 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14737 = x14735 + x14736;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14738 = x13696 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14739 = x14737 + x14738;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14740 = x13697 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14741 = x14739 + x14740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14742 = x13698 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14743 = x14741 + x14742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14744 = x13700 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14745 = x14743 + x14744;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14746 = x13701 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14747 = x14745 + x14746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14748 = x13702 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14749 = x14747 + x14748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14750 = x13703 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14751 = x14749 + x14750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14752 = x13705 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14753 = x14751 + x14752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14754 = x13706 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14755 = x14753 + x14754;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14756 = x13707 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14757 = x14755 + x14756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14758 = x13708 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14759 = x14757 + x14758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14760 = x13710 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14761 = x14759 + x14760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14762 = x13711 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14763 = x14761 + x14762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14764 = x13712 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14765 = x14763 + x14764;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14766 = x13713 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14767 = x14765 + x14766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14768 = x13715 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14769 = x14767 + x14768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14770 = x13716 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14771 = x14769 + x14770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14772 = x13717 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14773 = x14771 + x14772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14774 = x13718 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14775 = x14773 + x14774;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14776 = x13720 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14777 = x14775 + x14776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14778 = x13721 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14779 = x14777 + x14778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14780 = x13722 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14781 = x14779 + x14780;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14782 = x13723 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14783 = x14781 + x14782;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14784 = x13725 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14785 = x14783 + x14784;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14786 = x13726 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14787 = x14785 + x14786;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14788 = x13727 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14789 = x14787 + x14788;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14790 = x13690 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14791 = x13691 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14792 = x14790 + x14791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14793 = x13692 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14794 = x14792 + x14793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14795 = x13693 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14796 = x14794 + x14795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14797 = x13695 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14798 = x14796 + x14797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14799 = x13696 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14800 = x14798 + x14799;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14801 = x13697 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14802 = x14800 + x14801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14803 = x13698 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14804 = x14802 + x14803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14805 = x13700 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14806 = x14804 + x14805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14807 = x13701 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14808 = x14806 + x14807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14809 = x13702 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14810 = x14808 + x14809;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14811 = x13703 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14812 = x14810 + x14811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14813 = x13705 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14814 = x14812 + x14813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14815 = x13706 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14816 = x14814 + x14815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14817 = x13707 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14818 = x14816 + x14817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14819 = x13708 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14820 = x14818 + x14819;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14821 = x13710 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14822 = x14820 + x14821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14823 = x13711 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14824 = x14822 + x14823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14825 = x13712 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14826 = x14824 + x14825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14827 = x13713 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14828 = x14826 + x14827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14829 = x13715 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14830 = x14828 + x14829;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14831 = x13716 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14832 = x14830 + x14831;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14833 = x13717 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14834 = x14832 + x14833;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14835 = x13718 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14836 = x14834 + x14835;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14837 = x13720 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14838 = x14836 + x14837;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14839 = x13721 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14840 = x14838 + x14839;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14841 = x13722 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14842 = x14840 + x14841;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14843 = x13723 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14844 = x14842 + x14843;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14845 = x13725 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14846 = x14844 + x14845;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14847 = x13726 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14848 = x14846 + x14847;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14849 = x13727 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14850 = x14848 + x14849;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14851 = x13728 * x13740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14852 = x14850 + x14851;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14853 = x13691 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14854 = x13692 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14855 = x14853 + x14854;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14856 = x13693 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14857 = x14855 + x14856;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14858 = x13695 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14859 = x14857 + x14858;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14860 = x13696 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14861 = x14859 + x14860;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14862 = x13697 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14863 = x14861 + x14862;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14864 = x13698 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14865 = x14863 + x14864;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14866 = x13700 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14867 = x14865 + x14866;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14868 = x13701 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14869 = x14867 + x14868;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14870 = x13702 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14871 = x14869 + x14870;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14872 = x13703 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14873 = x14871 + x14872;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14874 = x13705 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14875 = x14873 + x14874;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14876 = x13706 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14877 = x14875 + x14876;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14878 = x13707 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14879 = x14877 + x14878;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14880 = x13708 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14881 = x14879 + x14880;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14882 = x13710 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14883 = x14881 + x14882;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14884 = x13711 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14885 = x14883 + x14884;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14886 = x13712 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14887 = x14885 + x14886;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14888 = x13713 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14889 = x14887 + x14888;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14890 = x13715 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14891 = x14889 + x14890;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14892 = x13716 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14893 = x14891 + x14892;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14894 = x13717 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14895 = x14893 + x14894;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14896 = x13718 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14897 = x14895 + x14896;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14898 = x13720 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14899 = x14897 + x14898;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14900 = x13721 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14901 = x14899 + x14900;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14902 = x13722 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14903 = x14901 + x14902;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14904 = x13723 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14905 = x14903 + x14904;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14906 = x13725 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14907 = x14905 + x14906;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14908 = x13726 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14909 = x14907 + x14908;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14910 = x13727 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14911 = x14909 + x14910;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14912 = x13728 * x13741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14913 = x14911 + x14912;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14914 = x13692 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14915 = x13693 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14916 = x14914 + x14915;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14917 = x13695 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14918 = x14916 + x14917;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14919 = x13696 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14920 = x14918 + x14919;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14921 = x13697 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14922 = x14920 + x14921;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14923 = x13698 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14924 = x14922 + x14923;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14925 = x13700 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14926 = x14924 + x14925;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14927 = x13701 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14928 = x14926 + x14927;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14929 = x13702 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14930 = x14928 + x14929;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14931 = x13703 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14932 = x14930 + x14931;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14933 = x13705 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14934 = x14932 + x14933;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14935 = x13706 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14936 = x14934 + x14935;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14937 = x13707 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14938 = x14936 + x14937;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14939 = x13708 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14940 = x14938 + x14939;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14941 = x13710 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14942 = x14940 + x14941;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14943 = x13711 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14944 = x14942 + x14943;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14945 = x13712 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14946 = x14944 + x14945;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14947 = x13713 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14948 = x14946 + x14947;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14949 = x13715 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14950 = x14948 + x14949;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14951 = x13716 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14952 = x14950 + x14951;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14953 = x13717 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14954 = x14952 + x14953;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14955 = x13718 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14956 = x14954 + x14955;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14957 = x13720 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14958 = x14956 + x14957;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14959 = x13721 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14960 = x14958 + x14959;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14961 = x13722 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14962 = x14960 + x14961;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14963 = x13723 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14964 = x14962 + x14963;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14965 = x13725 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14966 = x14964 + x14965;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14967 = x13726 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14968 = x14966 + x14967;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14969 = x13727 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14970 = x14968 + x14969;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14971 = x13728 * x13742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14972 = x14970 + x14971;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14973 = x13693 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14974 = x13695 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14975 = x14973 + x14974;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14976 = x13696 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14977 = x14975 + x14976;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14978 = x13697 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14979 = x14977 + x14978;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14980 = x13698 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14981 = x14979 + x14980;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14982 = x13700 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14983 = x14981 + x14982;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14984 = x13701 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14985 = x14983 + x14984;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14986 = x13702 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14987 = x14985 + x14986;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14988 = x13703 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14989 = x14987 + x14988;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14990 = x13705 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14991 = x14989 + x14990;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14992 = x13706 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14993 = x14991 + x14992;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14994 = x13707 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14995 = x14993 + x14994;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14996 = x13708 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14997 = x14995 + x14996;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x14998 = x13710 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x14999 = x14997 + x14998;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15000 = x13711 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15001 = x14999 + x15000;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15002 = x13712 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15003 = x15001 + x15002;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15004 = x13713 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15005 = x15003 + x15004;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15006 = x13715 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15007 = x15005 + x15006;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15008 = x13716 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15009 = x15007 + x15008;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15010 = x13717 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15011 = x15009 + x15010;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15012 = x13718 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15013 = x15011 + x15012;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15014 = x13720 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15015 = x15013 + x15014;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15016 = x13721 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15017 = x15015 + x15016;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15018 = x13722 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15019 = x15017 + x15018;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15020 = x13723 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15021 = x15019 + x15020;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15022 = x13725 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15023 = x15021 + x15022;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15024 = x13726 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15025 = x15023 + x15024;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15026 = x13727 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15027 = x15025 + x15026;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15028 = x13728 * x13743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15029 = x15027 + x15028;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15030 = x13695 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15031 = x13696 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15032 = x15030 + x15031;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15033 = x13697 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15034 = x15032 + x15033;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15035 = x13698 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15036 = x15034 + x15035;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15037 = x13700 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15038 = x15036 + x15037;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15039 = x13701 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15040 = x15038 + x15039;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15041 = x13702 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15042 = x15040 + x15041;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15043 = x13703 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15044 = x15042 + x15043;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15045 = x13705 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15046 = x15044 + x15045;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15047 = x13706 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15048 = x15046 + x15047;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15049 = x13707 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15050 = x15048 + x15049;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15051 = x13708 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15052 = x15050 + x15051;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15053 = x13710 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15054 = x15052 + x15053;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15055 = x13711 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15056 = x15054 + x15055;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15057 = x13712 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15058 = x15056 + x15057;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15059 = x13713 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15060 = x15058 + x15059;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15061 = x13715 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15062 = x15060 + x15061;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15063 = x13716 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15064 = x15062 + x15063;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15065 = x13717 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15066 = x15064 + x15065;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15067 = x13718 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15068 = x15066 + x15067;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15069 = x13720 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15070 = x15068 + x15069;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15071 = x13721 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15072 = x15070 + x15071;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15073 = x13722 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15074 = x15072 + x15073;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15075 = x13723 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15076 = x15074 + x15075;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15077 = x13725 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15078 = x15076 + x15077;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15079 = x13726 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15080 = x15078 + x15079;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15081 = x13727 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15082 = x15080 + x15081;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15083 = x13728 * x13745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15084 = x15082 + x15083;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15085 = x13696 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15086 = x13697 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15087 = x15085 + x15086;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15088 = x13698 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15089 = x15087 + x15088;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15090 = x13700 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15091 = x15089 + x15090;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15092 = x13701 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15093 = x15091 + x15092;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15094 = x13702 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15095 = x15093 + x15094;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15096 = x13703 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15097 = x15095 + x15096;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15098 = x13705 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15099 = x15097 + x15098;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15100 = x13706 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15101 = x15099 + x15100;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15102 = x13707 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15103 = x15101 + x15102;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15104 = x13708 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15105 = x15103 + x15104;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15106 = x13710 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15107 = x15105 + x15106;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15108 = x13711 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15109 = x15107 + x15108;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15110 = x13712 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15111 = x15109 + x15110;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15112 = x13713 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15113 = x15111 + x15112;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15114 = x13715 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15115 = x15113 + x15114;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15116 = x13716 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15117 = x15115 + x15116;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15118 = x13717 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15119 = x15117 + x15118;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15120 = x13718 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15121 = x15119 + x15120;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15122 = x13720 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15123 = x15121 + x15122;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15124 = x13721 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15125 = x15123 + x15124;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15126 = x13722 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15127 = x15125 + x15126;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15128 = x13723 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15129 = x15127 + x15128;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15130 = x13725 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15131 = x15129 + x15130;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15132 = x13726 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15133 = x15131 + x15132;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15134 = x13727 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15135 = x15133 + x15134;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15136 = x13728 * x13746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15137 = x15135 + x15136;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15138 = x13697 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15139 = x13698 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15140 = x15138 + x15139;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15141 = x13700 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15142 = x15140 + x15141;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15143 = x13701 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15144 = x15142 + x15143;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15145 = x13702 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15146 = x15144 + x15145;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15147 = x13703 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15148 = x15146 + x15147;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15149 = x13705 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15150 = x15148 + x15149;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15151 = x13706 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15152 = x15150 + x15151;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15153 = x13707 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15154 = x15152 + x15153;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15155 = x13708 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15156 = x15154 + x15155;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15157 = x13710 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15158 = x15156 + x15157;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15159 = x13711 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15160 = x15158 + x15159;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15161 = x13712 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15162 = x15160 + x15161;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15163 = x13713 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15164 = x15162 + x15163;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15165 = x13715 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15166 = x15164 + x15165;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15167 = x13716 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15168 = x15166 + x15167;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15169 = x13717 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15170 = x15168 + x15169;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15171 = x13718 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15172 = x15170 + x15171;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15173 = x13720 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15174 = x15172 + x15173;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15175 = x13721 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15176 = x15174 + x15175;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15177 = x13722 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15178 = x15176 + x15177;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15179 = x13723 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15180 = x15178 + x15179;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15181 = x13725 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15182 = x15180 + x15181;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15183 = x13726 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15184 = x15182 + x15183;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15185 = x13727 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15186 = x15184 + x15185;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15187 = x13728 * x13747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15188 = x15186 + x15187;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15189 = x13698 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15190 = x13700 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15191 = x15189 + x15190;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15192 = x13701 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15193 = x15191 + x15192;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15194 = x13702 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15195 = x15193 + x15194;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15196 = x13703 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15197 = x15195 + x15196;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15198 = x13705 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15199 = x15197 + x15198;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15200 = x13706 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15201 = x15199 + x15200;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15202 = x13707 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15203 = x15201 + x15202;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15204 = x13708 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15205 = x15203 + x15204;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15206 = x13710 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15207 = x15205 + x15206;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15208 = x13711 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15209 = x15207 + x15208;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15210 = x13712 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15211 = x15209 + x15210;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15212 = x13713 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15213 = x15211 + x15212;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15214 = x13715 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15215 = x15213 + x15214;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15216 = x13716 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15217 = x15215 + x15216;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15218 = x13717 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15219 = x15217 + x15218;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15220 = x13718 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15221 = x15219 + x15220;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15222 = x13720 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15223 = x15221 + x15222;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15224 = x13721 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15225 = x15223 + x15224;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15226 = x13722 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15227 = x15225 + x15226;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15228 = x13723 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15229 = x15227 + x15228;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15230 = x13725 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15231 = x15229 + x15230;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15232 = x13726 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15233 = x15231 + x15232;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15234 = x13727 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15235 = x15233 + x15234;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15236 = x13728 * x13748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15237 = x15235 + x15236;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15238 = x13700 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15239 = x13701 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15240 = x15238 + x15239;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15241 = x13702 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15242 = x15240 + x15241;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15243 = x13703 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15244 = x15242 + x15243;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15245 = x13705 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15246 = x15244 + x15245;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15247 = x13706 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15248 = x15246 + x15247;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15249 = x13707 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15250 = x15248 + x15249;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15251 = x13708 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15252 = x15250 + x15251;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15253 = x13710 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15254 = x15252 + x15253;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15255 = x13711 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15256 = x15254 + x15255;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15257 = x13712 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15258 = x15256 + x15257;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15259 = x13713 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15260 = x15258 + x15259;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15261 = x13715 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15262 = x15260 + x15261;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15263 = x13716 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15264 = x15262 + x15263;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15265 = x13717 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15266 = x15264 + x15265;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15267 = x13718 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15268 = x15266 + x15267;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15269 = x13720 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15270 = x15268 + x15269;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15271 = x13721 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15272 = x15270 + x15271;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15273 = x13722 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15274 = x15272 + x15273;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15275 = x13723 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15276 = x15274 + x15275;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15277 = x13725 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15278 = x15276 + x15277;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15279 = x13726 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15280 = x15278 + x15279;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15281 = x13727 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15282 = x15280 + x15281;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15283 = x13728 * x13750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15284 = x15282 + x15283;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15285 = x13701 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15286 = x13702 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15287 = x15285 + x15286;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15288 = x13703 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15289 = x15287 + x15288;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15290 = x13705 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15291 = x15289 + x15290;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15292 = x13706 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15293 = x15291 + x15292;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15294 = x13707 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15295 = x15293 + x15294;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15296 = x13708 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15297 = x15295 + x15296;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15298 = x13710 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15299 = x15297 + x15298;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15300 = x13711 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15301 = x15299 + x15300;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15302 = x13712 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15303 = x15301 + x15302;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15304 = x13713 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15305 = x15303 + x15304;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15306 = x13715 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15307 = x15305 + x15306;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15308 = x13716 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15309 = x15307 + x15308;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15310 = x13717 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15311 = x15309 + x15310;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15312 = x13718 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15313 = x15311 + x15312;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15314 = x13720 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15315 = x15313 + x15314;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15316 = x13721 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15317 = x15315 + x15316;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15318 = x13722 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15319 = x15317 + x15318;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15320 = x13723 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15321 = x15319 + x15320;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15322 = x13725 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15323 = x15321 + x15322;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15324 = x13726 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15325 = x15323 + x15324;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15326 = x13727 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15327 = x15325 + x15326;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15328 = x13728 * x13751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15329 = x15327 + x15328;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15330 = x13702 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15331 = x13703 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15332 = x15330 + x15331;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15333 = x13705 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15334 = x15332 + x15333;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15335 = x13706 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15336 = x15334 + x15335;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15337 = x13707 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15338 = x15336 + x15337;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15339 = x13708 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15340 = x15338 + x15339;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15341 = x13710 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15342 = x15340 + x15341;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15343 = x13711 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15344 = x15342 + x15343;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15345 = x13712 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15346 = x15344 + x15345;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15347 = x13713 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15348 = x15346 + x15347;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15349 = x13715 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15350 = x15348 + x15349;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15351 = x13716 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15352 = x15350 + x15351;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15353 = x13717 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15354 = x15352 + x15353;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15355 = x13718 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15356 = x15354 + x15355;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15357 = x13720 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15358 = x15356 + x15357;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15359 = x13721 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15360 = x15358 + x15359;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15361 = x13722 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15362 = x15360 + x15361;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15363 = x13723 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15364 = x15362 + x15363;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15365 = x13725 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15366 = x15364 + x15365;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15367 = x13726 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15368 = x15366 + x15367;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15369 = x13727 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15370 = x15368 + x15369;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15371 = x13728 * x13752;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15372 = x15370 + x15371;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15373 = x13703 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15374 = x13705 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15375 = x15373 + x15374;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15376 = x13706 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15377 = x15375 + x15376;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15378 = x13707 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15379 = x15377 + x15378;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15380 = x13708 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15381 = x15379 + x15380;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15382 = x13710 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15383 = x15381 + x15382;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15384 = x13711 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15385 = x15383 + x15384;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15386 = x13712 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15387 = x15385 + x15386;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15388 = x13713 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15389 = x15387 + x15388;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15390 = x13715 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15391 = x15389 + x15390;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15392 = x13716 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15393 = x15391 + x15392;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15394 = x13717 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15395 = x15393 + x15394;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15396 = x13718 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15397 = x15395 + x15396;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15398 = x13720 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15399 = x15397 + x15398;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15400 = x13721 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15401 = x15399 + x15400;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15402 = x13722 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15403 = x15401 + x15402;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15404 = x13723 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15405 = x15403 + x15404;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15406 = x13725 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15407 = x15405 + x15406;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15408 = x13726 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15409 = x15407 + x15408;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15410 = x13727 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15411 = x15409 + x15410;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15412 = x13728 * x13753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15413 = x15411 + x15412;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15414 = x13705 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15415 = x13706 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15416 = x15414 + x15415;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15417 = x13707 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15418 = x15416 + x15417;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15419 = x13708 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15420 = x15418 + x15419;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15421 = x13710 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15422 = x15420 + x15421;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15423 = x13711 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15424 = x15422 + x15423;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15425 = x13712 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15426 = x15424 + x15425;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15427 = x13713 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15428 = x15426 + x15427;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15429 = x13715 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15430 = x15428 + x15429;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15431 = x13716 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15432 = x15430 + x15431;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15433 = x13717 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15434 = x15432 + x15433;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15435 = x13718 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15436 = x15434 + x15435;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15437 = x13720 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15438 = x15436 + x15437;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15439 = x13721 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15440 = x15438 + x15439;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15441 = x13722 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15442 = x15440 + x15441;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15443 = x13723 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15444 = x15442 + x15443;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15445 = x13725 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15446 = x15444 + x15445;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15447 = x13726 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15448 = x15446 + x15447;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15449 = x13727 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15450 = x15448 + x15449;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15451 = x13728 * x13755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15452 = x15450 + x15451;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15453 = x13706 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15454 = x13707 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15455 = x15453 + x15454;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15456 = x13708 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15457 = x15455 + x15456;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15458 = x13710 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15459 = x15457 + x15458;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15460 = x13711 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15461 = x15459 + x15460;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15462 = x13712 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15463 = x15461 + x15462;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15464 = x13713 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15465 = x15463 + x15464;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15466 = x13715 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15467 = x15465 + x15466;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15468 = x13716 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15469 = x15467 + x15468;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15470 = x13717 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15471 = x15469 + x15470;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15472 = x13718 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15473 = x15471 + x15472;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15474 = x13720 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15475 = x15473 + x15474;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15476 = x13721 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15477 = x15475 + x15476;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15478 = x13722 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15479 = x15477 + x15478;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15480 = x13723 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15481 = x15479 + x15480;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15482 = x13725 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15483 = x15481 + x15482;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15484 = x13726 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15485 = x15483 + x15484;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15486 = x13727 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15487 = x15485 + x15486;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15488 = x13728 * x13756;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15489 = x15487 + x15488;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15490 = x13707 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15491 = x13708 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15492 = x15490 + x15491;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15493 = x13710 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15494 = x15492 + x15493;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15495 = x13711 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15496 = x15494 + x15495;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15497 = x13712 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15498 = x15496 + x15497;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15499 = x13713 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15500 = x15498 + x15499;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15501 = x13715 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15502 = x15500 + x15501;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15503 = x13716 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15504 = x15502 + x15503;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15505 = x13717 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15506 = x15504 + x15505;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15507 = x13718 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15508 = x15506 + x15507;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15509 = x13720 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15510 = x15508 + x15509;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15511 = x13721 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15512 = x15510 + x15511;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15513 = x13722 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15514 = x15512 + x15513;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15515 = x13723 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15516 = x15514 + x15515;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15517 = x13725 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15518 = x15516 + x15517;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15519 = x13726 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15520 = x15518 + x15519;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15521 = x13727 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15522 = x15520 + x15521;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15523 = x13728 * x13757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15524 = x15522 + x15523;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15525 = x13708 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15526 = x13710 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15527 = x15525 + x15526;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15528 = x13711 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15529 = x15527 + x15528;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15530 = x13712 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15531 = x15529 + x15530;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15532 = x13713 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15533 = x15531 + x15532;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15534 = x13715 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15535 = x15533 + x15534;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15536 = x13716 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15537 = x15535 + x15536;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15538 = x13717 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15539 = x15537 + x15538;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15540 = x13718 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15541 = x15539 + x15540;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15542 = x13720 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15543 = x15541 + x15542;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15544 = x13721 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15545 = x15543 + x15544;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15546 = x13722 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15547 = x15545 + x15546;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15548 = x13723 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15549 = x15547 + x15548;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15550 = x13725 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15551 = x15549 + x15550;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15552 = x13726 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15553 = x15551 + x15552;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15554 = x13727 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15555 = x15553 + x15554;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15556 = x13728 * x13758;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15557 = x15555 + x15556;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15558 = x13710 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15559 = x13711 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15560 = x15558 + x15559;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15561 = x13712 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15562 = x15560 + x15561;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15563 = x13713 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15564 = x15562 + x15563;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15565 = x13715 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15566 = x15564 + x15565;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15567 = x13716 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15568 = x15566 + x15567;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15569 = x13717 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15570 = x15568 + x15569;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15571 = x13718 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15572 = x15570 + x15571;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15573 = x13720 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15574 = x15572 + x15573;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15575 = x13721 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15576 = x15574 + x15575;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15577 = x13722 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15578 = x15576 + x15577;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15579 = x13723 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15580 = x15578 + x15579;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15581 = x13725 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15582 = x15580 + x15581;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15583 = x13726 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15584 = x15582 + x15583;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15585 = x13727 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15586 = x15584 + x15585;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15587 = x13728 * x13760;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15588 = x15586 + x15587;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15589 = x13711 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15590 = x13712 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15591 = x15589 + x15590;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15592 = x13713 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15593 = x15591 + x15592;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15594 = x13715 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15595 = x15593 + x15594;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15596 = x13716 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15597 = x15595 + x15596;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15598 = x13717 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15599 = x15597 + x15598;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15600 = x13718 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15601 = x15599 + x15600;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15602 = x13720 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15603 = x15601 + x15602;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15604 = x13721 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15605 = x15603 + x15604;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15606 = x13722 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15607 = x15605 + x15606;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15608 = x13723 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15609 = x15607 + x15608;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15610 = x13725 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15611 = x15609 + x15610;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15612 = x13726 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15613 = x15611 + x15612;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15614 = x13727 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15615 = x15613 + x15614;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15616 = x13728 * x13761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15617 = x15615 + x15616;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15618 = x13712 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15619 = x13713 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15620 = x15618 + x15619;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15621 = x13715 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15622 = x15620 + x15621;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15623 = x13716 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15624 = x15622 + x15623;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15625 = x13717 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15626 = x15624 + x15625;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15627 = x13718 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15628 = x15626 + x15627;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15629 = x13720 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15630 = x15628 + x15629;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15631 = x13721 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15632 = x15630 + x15631;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15633 = x13722 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15634 = x15632 + x15633;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15635 = x13723 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15636 = x15634 + x15635;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15637 = x13725 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15638 = x15636 + x15637;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15639 = x13726 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15640 = x15638 + x15639;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15641 = x13727 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15642 = x15640 + x15641;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15643 = x13728 * x13762;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15644 = x15642 + x15643;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15645 = x13713 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15646 = x13715 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15647 = x15645 + x15646;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15648 = x13716 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15649 = x15647 + x15648;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15650 = x13717 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15651 = x15649 + x15650;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15652 = x13718 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15653 = x15651 + x15652;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15654 = x13720 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15655 = x15653 + x15654;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15656 = x13721 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15657 = x15655 + x15656;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15658 = x13722 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15659 = x15657 + x15658;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15660 = x13723 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15661 = x15659 + x15660;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15662 = x13725 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15663 = x15661 + x15662;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15664 = x13726 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15665 = x15663 + x15664;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15666 = x13727 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15667 = x15665 + x15666;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15668 = x13728 * x13763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15669 = x15667 + x15668;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15670 = x13715 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15671 = x13716 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15672 = x15670 + x15671;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15673 = x13717 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15674 = x15672 + x15673;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15675 = x13718 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15676 = x15674 + x15675;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15677 = x13720 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15678 = x15676 + x15677;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15679 = x13721 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15680 = x15678 + x15679;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15681 = x13722 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15682 = x15680 + x15681;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15683 = x13723 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15684 = x15682 + x15683;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15685 = x13725 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15686 = x15684 + x15685;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15687 = x13726 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15688 = x15686 + x15687;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15689 = x13727 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15690 = x15688 + x15689;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15691 = x13728 * x13765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15692 = x15690 + x15691;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15693 = x13716 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15694 = x13717 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15695 = x15693 + x15694;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15696 = x13718 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15697 = x15695 + x15696;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15698 = x13720 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15699 = x15697 + x15698;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15700 = x13721 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15701 = x15699 + x15700;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15702 = x13722 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15703 = x15701 + x15702;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15704 = x13723 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15705 = x15703 + x15704;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15706 = x13725 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15707 = x15705 + x15706;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15708 = x13726 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15709 = x15707 + x15708;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15710 = x13727 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15711 = x15709 + x15710;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15712 = x13728 * x13766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15713 = x15711 + x15712;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15714 = x13717 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15715 = x13718 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15716 = x15714 + x15715;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15717 = x13720 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15718 = x15716 + x15717;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15719 = x13721 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15720 = x15718 + x15719;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15721 = x13722 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15722 = x15720 + x15721;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15723 = x13723 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15724 = x15722 + x15723;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15725 = x13725 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15726 = x15724 + x15725;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15727 = x13726 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15728 = x15726 + x15727;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15729 = x13727 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15730 = x15728 + x15729;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15731 = x13728 * x13767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15732 = x15730 + x15731;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15733 = x13718 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15734 = x13720 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15735 = x15733 + x15734;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15736 = x13721 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15737 = x15735 + x15736;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15738 = x13722 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15739 = x15737 + x15738;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15740 = x13723 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15741 = x15739 + x15740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15742 = x13725 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15743 = x15741 + x15742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15744 = x13726 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15745 = x15743 + x15744;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15746 = x13727 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15747 = x15745 + x15746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15748 = x13728 * x13768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15749 = x15747 + x15748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15750 = x13720 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15751 = x13721 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15752 = x15750 + x15751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15753 = x13722 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15754 = x15752 + x15753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15755 = x13723 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15756 = x15754 + x15755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15757 = x13725 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15758 = x15756 + x15757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15759 = x13726 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15760 = x15758 + x15759;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15761 = x13727 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15762 = x15760 + x15761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15763 = x13728 * x13770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15764 = x15762 + x15763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15765 = x13721 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15766 = x13722 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15767 = x15765 + x15766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15768 = x13723 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15769 = x15767 + x15768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15770 = x13725 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15771 = x15769 + x15770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15772 = x13726 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15773 = x15771 + x15772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15774 = x13727 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15775 = x15773 + x15774;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15776 = x13728 * x13771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15777 = x15775 + x15776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15778 = x13722 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15779 = x13723 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15780 = x15778 + x15779;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15781 = x13725 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15782 = x15780 + x15781;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15783 = x13726 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15784 = x15782 + x15783;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15785 = x13727 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15786 = x15784 + x15785;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15787 = x13728 * x13772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15788 = x15786 + x15787;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15789 = x13723 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15790 = x13725 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15791 = x15789 + x15790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15792 = x13726 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15793 = x15791 + x15792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15794 = x13727 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15795 = x15793 + x15794;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15796 = x13728 * x13773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15797 = x15795 + x15796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15798 = x13725 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15799 = x13726 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15800 = x15798 + x15799;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15801 = x13727 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15802 = x15800 + x15801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15803 = x13728 * x13775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15804 = x15802 + x15803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15805 = x13726 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15806 = x13727 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15807 = x15805 + x15806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15808 = x13728 * x13776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15809 = x15807 + x15808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15810 = x13727 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15811 = x13728 * x13777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x15812 = x15810 + x15811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x15813 = x13728 * x13778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15814 = x13829 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15815 = Fp(x15814.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15816 = x15814 - x15815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15817 = x15816 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15818 = x15817 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15819 = x13832 + x15818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15820 = x15819 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15821 = Fp(x15820.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15822 = x15820 - x15821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15823 = x15822 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15824 = x15823 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15825 = x13837 + x15824;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15826 = x15825 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15827 = Fp(x15826.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15828 = x15826 - x15827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15829 = x15828 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15830 = x15829 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15831 = x13844 + x15830;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15832 = x15831 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15833 = Fp(x15832.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15834 = x15832 - x15833;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15835 = x15834 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15836 = x15835 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15837 = x13853 + x15836;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15838 = x15837 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15839 = Fp(x15838.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15840 = x15838 - x15839;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15841 = x15840 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15842 = x15841 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15843 = x13864 + x15842;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15844 = x15843 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15845 = Fp(x15844.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15846 = x15844 - x15845;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15847 = x15846 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15848 = x15847 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15849 = x13877 + x15848;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15850 = x15849 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15851 = Fp(x15850.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15852 = x15850 - x15851;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15853 = x15852 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15854 = x15853 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15855 = x13892 + x15854;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15856 = x15855 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15857 = Fp(x15856.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15858 = x15856 - x15857;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15859 = x15858 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15860 = x15859 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15861 = x13909 + x15860;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15862 = x15861 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15863 = Fp(x15862.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15864 = x15862 - x15863;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15865 = x15864 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15866 = x15865 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15867 = x13928 + x15866;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15868 = x15867 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15869 = Fp(x15868.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15870 = x15868 - x15869;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15871 = x15870 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15872 = x15871 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15873 = x13949 + x15872;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15874 = x15873 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15875 = Fp(x15874.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15876 = x15874 - x15875;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15877 = x15876 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15878 = x15877 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15879 = x13972 + x15878;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15880 = x15879 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15881 = Fp(x15880.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15882 = x15880 - x15881;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15883 = x15882 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15884 = x15883 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15885 = x13997 + x15884;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15886 = x15885 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15887 = Fp(x15886.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15888 = x15886 - x15887;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15889 = x15888 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15890 = x15889 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15891 = x14024 + x15890;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15892 = x15891 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15893 = Fp(x15892.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15894 = x15892 - x15893;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15895 = x15894 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15896 = x15895 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15897 = x14053 + x15896;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15898 = x15897 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15899 = Fp(x15898.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15900 = x15898 - x15899;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15901 = x15900 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15902 = x15901 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15903 = x14084 + x15902;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15904 = x15903 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15905 = Fp(x15904.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15906 = x15904 - x15905;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15907 = x15906 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15908 = x15907 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15909 = x14117 + x15908;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15910 = x15909 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15911 = Fp(x15910.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15912 = x15910 - x15911;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15913 = x15912 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15914 = x15913 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15915 = x14152 + x15914;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15916 = x15915 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15917 = Fp(x15916.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15918 = x15916 - x15917;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15919 = x15918 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15920 = x15919 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15921 = x14189 + x15920;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15922 = x15921 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15923 = Fp(x15922.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15924 = x15922 - x15923;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15925 = x15924 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15926 = x15925 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15927 = x14228 + x15926;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15928 = x15927 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15929 = Fp(x15928.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15930 = x15928 - x15929;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15931 = x15930 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15932 = x15931 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15933 = x14269 + x15932;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15934 = x15933 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15935 = Fp(x15934.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15936 = x15934 - x15935;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15937 = x15936 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15938 = x15937 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15939 = x14312 + x15938;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15940 = x15939 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15941 = Fp(x15940.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15942 = x15940 - x15941;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15943 = x15942 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15944 = x15943 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15945 = x14357 + x15944;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15946 = x15945 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15947 = Fp(x15946.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15948 = x15946 - x15947;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15949 = x15948 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15950 = x15949 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15951 = x14404 + x15950;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15952 = x15951 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15953 = Fp(x15952.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15954 = x15952 - x15953;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15955 = x15954 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15956 = x15955 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15957 = x14453 + x15956;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15958 = x15957 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15959 = Fp(x15958.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15960 = x15958 - x15959;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15961 = x15960 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15962 = x15961 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15963 = x14504 + x15962;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15964 = x15963 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15965 = Fp(x15964.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15966 = x15964 - x15965;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15967 = x15966 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15968 = x15967 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15969 = x14557 + x15968;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15970 = x15969 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15971 = Fp(x15970.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15972 = x15970 - x15971;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15973 = x15972 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15974 = x15973 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15975 = x14612 + x15974;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15976 = x15975 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15977 = Fp(x15976.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15978 = x15976 - x15977;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15979 = x15978 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15980 = x15979 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15981 = x14669 + x15980;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15982 = x15981 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15983 = Fp(x15982.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15984 = x15982 - x15983;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15985 = x15984 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15986 = x15985 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15987 = x14728 + x15986;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15988 = x15987 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15989 = Fp(x15988.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15990 = x15988 - x15989;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15991 = x15990 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15992 = x15991 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15993 = x14789 + x15992;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15994 = x15993 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x15995 = Fp(x15994.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x15996 = x15994 - x15995;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x15997 = x15996 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x15998 = x15997 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x15999 = x14852 + x15998;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16000 = x15999 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16001 = Fp(x16000.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16002 = x16000 - x16001;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16003 = x16002 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16004 = x16003 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16005 = x14913 + x16004;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16006 = x16005 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16007 = Fp(x16006.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16008 = x16006 - x16007;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16009 = x16008 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16010 = x16009 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16011 = x14972 + x16010;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16012 = x16011 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16013 = Fp(x16012.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16014 = x16012 - x16013;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16015 = x16014 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16016 = x16015 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16017 = x15029 + x16016;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16018 = x16017 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16019 = Fp(x16018.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16020 = x16018 - x16019;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16021 = x16020 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16022 = x16021 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16023 = x15084 + x16022;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16024 = x16023 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16025 = Fp(x16024.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16026 = x16024 - x16025;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16027 = x16026 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16028 = x16027 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16029 = x15137 + x16028;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16030 = x16029 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16031 = Fp(x16030.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16032 = x16030 - x16031;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16033 = x16032 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16034 = x16033 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16035 = x15188 + x16034;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16036 = x16035 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16037 = Fp(x16036.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16038 = x16036 - x16037;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16039 = x16038 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16040 = x16039 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16041 = x15237 + x16040;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16042 = x16041 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16043 = Fp(x16042.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16044 = x16042 - x16043;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16045 = x16044 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16046 = x16045 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16047 = x15284 + x16046;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16048 = x16047 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16049 = Fp(x16048.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16050 = x16048 - x16049;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16051 = x16050 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16052 = x16051 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16053 = x15329 + x16052;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16054 = x16053 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16055 = Fp(x16054.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16056 = x16054 - x16055;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16057 = x16056 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16058 = x16057 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16059 = x15372 + x16058;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16060 = x16059 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16061 = Fp(x16060.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16062 = x16060 - x16061;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16063 = x16062 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16064 = x16063 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16065 = x15413 + x16064;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16066 = x16065 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16067 = Fp(x16066.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16068 = x16066 - x16067;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16069 = x16068 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16070 = x16069 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16071 = x15452 + x16070;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16072 = x16071 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16073 = Fp(x16072.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16074 = x16072 - x16073;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16075 = x16074 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16076 = x16075 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16077 = x15489 + x16076;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16078 = x16077 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16079 = Fp(x16078.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16080 = x16078 - x16079;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16081 = x16080 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16082 = x16081 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16083 = x15524 + x16082;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16084 = x16083 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16085 = Fp(x16084.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16086 = x16084 - x16085;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16087 = x16086 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16088 = x16087 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16089 = x15557 + x16088;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16090 = x16089 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16091 = Fp(x16090.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16092 = x16090 - x16091;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16093 = x16092 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16094 = x16093 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16095 = x15588 + x16094;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16096 = x16095 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16097 = Fp(x16096.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16098 = x16096 - x16097;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16099 = x16098 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16100 = x16099 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16101 = x15617 + x16100;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16102 = x16101 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16103 = Fp(x16102.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16104 = x16102 - x16103;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16105 = x16104 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16106 = x16105 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16107 = x15644 + x16106;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16108 = x16107 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16109 = Fp(x16108.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16110 = x16108 - x16109;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16111 = x16110 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16112 = x16111 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16113 = x15669 + x16112;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16114 = x16113 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16115 = Fp(x16114.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16116 = x16114 - x16115;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16117 = x16116 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16118 = x16117 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16119 = x15692 + x16118;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16120 = x16119 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16121 = Fp(x16120.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16122 = x16120 - x16121;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16123 = x16122 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16124 = x16123 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16125 = x15713 + x16124;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16126 = x16125 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16127 = Fp(x16126.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16128 = x16126 - x16127;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16129 = x16128 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16130 = x16129 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16131 = x15732 + x16130;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16132 = x16131 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16133 = Fp(x16132.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16134 = x16132 - x16133;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16135 = x16134 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16136 = x16135 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16137 = x15749 + x16136;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16138 = x16137 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16139 = Fp(x16138.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16140 = x16138 - x16139;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16141 = x16140 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16142 = x16141 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16143 = x15764 + x16142;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16144 = x16143 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16145 = Fp(x16144.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16146 = x16144 - x16145;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16147 = x16146 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16148 = x16147 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16149 = x15777 + x16148;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16150 = x16149 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16151 = Fp(x16150.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16152 = x16150 - x16151;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16153 = x16152 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16154 = x16153 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16155 = x15788 + x16154;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16156 = x16155 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16157 = Fp(x16156.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16158 = x16156 - x16157;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16159 = x16158 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16160 = x16159 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16161 = x15797 + x16160;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16162 = x16161 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16163 = Fp(x16162.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16164 = x16162 - x16163;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16165 = x16164 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16166 = x16165 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16167 = x15804 + x16166;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16168 = x16167 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16169 = Fp(x16168.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16170 = x16168 - x16169;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16171 = x16170 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16172 = x16171 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16173 = x15809 + x16172;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16174 = x16173 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16175 = Fp(x16174.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16176 = x16174 - x16175;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16177 = x16176 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16178 = x16177 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16179 = x15812 + x16178;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16180 = x16179 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16181 = Fp(x16180.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16182 = x16180 - x16181;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16183 = x16182 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16184 = x16183 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16185 = x15813 + x16184;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x16186 = x16185 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x16187 = Fp(x16186.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x16188 = x16186 - x16187;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x16189 = x16188 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x16190 = x16189 - x12;
        host_args.at(0) = x15815;
        host_args.at(1) = x15821;
        host_args.at(2) = x15827;
        host_args.at(3) = x15833;
        host_args.at(4) = x15839;
        host_args.at(5) = x15845;
        host_args.at(6) = x15851;
        host_args.at(7) = x15857;
        host_args.at(8) = x15863;
        host_args.at(9) = x15869;
        host_args.at(10) = x15875;
        host_args.at(11) = x15881;
        host_args.at(12) = x15887;
        host_args.at(13) = x15893;
        host_args.at(14) = x15899;
        host_args.at(15) = x15905;
        host_args.at(16) = x15911;
        host_args.at(17) = x15917;
        host_args.at(18) = x15923;
        host_args.at(19) = x15929;
        host_args.at(20) = x15935;
        host_args.at(21) = x15941;
        host_args.at(22) = x15947;
        host_args.at(23) = x15953;
        host_args.at(24) = x15959;
        host_args.at(25) = x15965;
        host_args.at(26) = x15971;
        host_args.at(27) = x15977;
        host_args.at(28) = x15983;
        host_args.at(29) = x15989;
        host_args.at(30) = x15995;
        host_args.at(31) = x16001;
        host_args.at(32) = x16007;
        host_args.at(33) = x16013;
        host_args.at(34) = x16019;
        host_args.at(35) = x16025;
        host_args.at(36) = x16031;
        host_args.at(37) = x16037;
        host_args.at(38) = x16043;
        host_args.at(39) = x16049;
        host_args.at(40) = x16055;
        host_args.at(41) = x16061;
        host_args.at(42) = x16067;
        host_args.at(43) = x16073;
        host_args.at(44) = x16079;
        host_args.at(45) = x16085;
        host_args.at(46) = x16091;
        host_args.at(47) = x16097;
        host_args.at(48) = x16103;
        host_args.at(49) = x16109;
        host_args.at(50) = x16115;
        host_args.at(51) = x16121;
        host_args.at(52) = x16127;
        host_args.at(53) = x16133;
        host_args.at(54) = x16139;
        host_args.at(55) = x16145;
        host_args.at(56) = x16151;
        host_args.at(57) = x16157;
        host_args.at(58) = x16163;
        host_args.at(59) = x16169;
        host_args.at(60) = x16175;
        host_args.at(61) = x16181;
        host_args.at(62) = x16187;
        host_args.at(63) = x16190;
        host_args.at(64) = x13790;
        host_args.at(65) = x13791;
        host_args.at(66) = x13792;
        host_args.at(67) = x13793;
        host_args.at(68) = x13795;
        host_args.at(69) = x13796;
        host_args.at(70) = x13797;
        host_args.at(71) = x13798;
        host_args.at(72) = x13800;
        host_args.at(73) = x13801;
        host_args.at(74) = x13802;
        host_args.at(75) = x13803;
        host_args.at(76) = x13805;
        host_args.at(77) = x13806;
        host_args.at(78) = x13807;
        host_args.at(79) = x13808;
        host_args.at(80) = x13810;
        host_args.at(81) = x13811;
        host_args.at(82) = x13812;
        host_args.at(83) = x13813;
        host_args.at(84) = x13815;
        host_args.at(85) = x13816;
        host_args.at(86) = x13817;
        host_args.at(87) = x13818;
        host_args.at(88) = x13820;
        host_args.at(89) = x13821;
        host_args.at(90) = x13822;
        host_args.at(91) = x13823;
        host_args.at(92) = x13825;
        host_args.at(93) = x13826;
        host_args.at(94) = x13827;
        host_args.at(95) = x13828;
        host(ctx, "bigintQuotient", "", host_args.data(), 96, host_outs.data(), 32);
        auto x16191 = host_outs.at(0);
        auto x16192 = host_outs.at(1);
        auto x16193 = host_outs.at(2);
        auto x16194 = host_outs.at(3);
        auto x16195 = host_outs.at(4);
        auto x16196 = host_outs.at(5);
        auto x16197 = host_outs.at(6);
        auto x16198 = host_outs.at(7);
        auto x16199 = host_outs.at(8);
        auto x16200 = host_outs.at(9);
        auto x16201 = host_outs.at(10);
        auto x16202 = host_outs.at(11);
        auto x16203 = host_outs.at(12);
        auto x16204 = host_outs.at(13);
        auto x16205 = host_outs.at(14);
        auto x16206 = host_outs.at(15);
        auto x16207 = host_outs.at(16);
        auto x16208 = host_outs.at(17);
        auto x16209 = host_outs.at(18);
        auto x16210 = host_outs.at(19);
        auto x16211 = host_outs.at(20);
        auto x16212 = host_outs.at(21);
        auto x16213 = host_outs.at(22);
        auto x16214 = host_outs.at(23);
        auto x16215 = host_outs.at(24);
        auto x16216 = host_outs.at(25);
        auto x16217 = host_outs.at(26);
        auto x16218 = host_outs.at(27);
        auto x16219 = host_outs.at(28);
        auto x16220 = host_outs.at(29);
        auto x16221 = host_outs.at(30);
        auto x16222 = host_outs.at(31);
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16223 = x16191 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16224 = x16191 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16225 = x16192 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16226 = x16224 + x16225;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16227 = x16191 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16228 = x16192 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16229 = x16227 + x16228;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16230 = x16193 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16231 = x16229 + x16230;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16232 = x16191 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16233 = x16192 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16234 = x16232 + x16233;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16235 = x16193 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16236 = x16234 + x16235;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16237 = x16194 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16238 = x16236 + x16237;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16239 = x16191 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16240 = x16192 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16241 = x16239 + x16240;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16242 = x16193 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16243 = x16241 + x16242;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16244 = x16194 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16245 = x16243 + x16244;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16246 = x16195 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16247 = x16245 + x16246;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16248 = x16191 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16249 = x16192 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16250 = x16248 + x16249;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16251 = x16193 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16252 = x16250 + x16251;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16253 = x16194 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16254 = x16252 + x16253;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16255 = x16195 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16256 = x16254 + x16255;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16257 = x16196 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16258 = x16256 + x16257;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16259 = x16191 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16260 = x16192 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16261 = x16259 + x16260;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16262 = x16193 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16263 = x16261 + x16262;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16264 = x16194 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16265 = x16263 + x16264;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16266 = x16195 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16267 = x16265 + x16266;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16268 = x16196 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16269 = x16267 + x16268;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16270 = x16197 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16271 = x16269 + x16270;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16272 = x16191 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16273 = x16192 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16274 = x16272 + x16273;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16275 = x16193 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16276 = x16274 + x16275;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16277 = x16194 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16278 = x16276 + x16277;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16279 = x16195 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16280 = x16278 + x16279;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16281 = x16196 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16282 = x16280 + x16281;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16283 = x16197 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16284 = x16282 + x16283;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16285 = x16198 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16286 = x16284 + x16285;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16287 = x16191 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16288 = x16192 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16289 = x16287 + x16288;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16290 = x16193 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16291 = x16289 + x16290;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16292 = x16194 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16293 = x16291 + x16292;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16294 = x16195 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16295 = x16293 + x16294;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16296 = x16196 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16297 = x16295 + x16296;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16298 = x16197 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16299 = x16297 + x16298;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16300 = x16198 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16301 = x16299 + x16300;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16302 = x16199 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16303 = x16301 + x16302;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16304 = x16191 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16305 = x16192 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16306 = x16304 + x16305;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16307 = x16193 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16308 = x16306 + x16307;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16309 = x16194 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16310 = x16308 + x16309;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16311 = x16195 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16312 = x16310 + x16311;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16313 = x16196 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16314 = x16312 + x16313;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16315 = x16197 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16316 = x16314 + x16315;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16317 = x16198 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16318 = x16316 + x16317;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16319 = x16199 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16320 = x16318 + x16319;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16321 = x16200 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16322 = x16320 + x16321;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16323 = x16191 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16324 = x16192 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16325 = x16323 + x16324;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16326 = x16193 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16327 = x16325 + x16326;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16328 = x16194 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16329 = x16327 + x16328;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16330 = x16195 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16331 = x16329 + x16330;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16332 = x16196 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16333 = x16331 + x16332;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16334 = x16197 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16335 = x16333 + x16334;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16336 = x16198 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16337 = x16335 + x16336;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16338 = x16199 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16339 = x16337 + x16338;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16340 = x16200 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16341 = x16339 + x16340;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16342 = x16201 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16343 = x16341 + x16342;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16344 = x16191 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16345 = x16192 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16346 = x16344 + x16345;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16347 = x16193 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16348 = x16346 + x16347;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16349 = x16194 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16350 = x16348 + x16349;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16351 = x16195 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16352 = x16350 + x16351;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16353 = x16196 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16354 = x16352 + x16353;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16355 = x16197 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16356 = x16354 + x16355;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16357 = x16198 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16358 = x16356 + x16357;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16359 = x16199 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16360 = x16358 + x16359;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16361 = x16200 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16362 = x16360 + x16361;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16363 = x16201 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16364 = x16362 + x16363;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16365 = x16202 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16366 = x16364 + x16365;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16367 = x16191 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16368 = x16192 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16369 = x16367 + x16368;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16370 = x16193 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16371 = x16369 + x16370;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16372 = x16194 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16373 = x16371 + x16372;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16374 = x16195 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16375 = x16373 + x16374;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16376 = x16196 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16377 = x16375 + x16376;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16378 = x16197 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16379 = x16377 + x16378;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16380 = x16198 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16381 = x16379 + x16380;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16382 = x16199 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16383 = x16381 + x16382;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16384 = x16200 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16385 = x16383 + x16384;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16386 = x16201 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16387 = x16385 + x16386;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16388 = x16202 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16389 = x16387 + x16388;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16390 = x16203 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16391 = x16389 + x16390;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16392 = x16191 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16393 = x16192 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16394 = x16392 + x16393;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16395 = x16193 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16396 = x16394 + x16395;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16397 = x16194 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16398 = x16396 + x16397;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16399 = x16195 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16400 = x16398 + x16399;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16401 = x16196 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16402 = x16400 + x16401;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16403 = x16197 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16404 = x16402 + x16403;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16405 = x16198 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16406 = x16404 + x16405;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16407 = x16199 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16408 = x16406 + x16407;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16409 = x16200 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16410 = x16408 + x16409;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16411 = x16201 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16412 = x16410 + x16411;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16413 = x16202 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16414 = x16412 + x16413;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16415 = x16203 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16416 = x16414 + x16415;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16417 = x16204 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16418 = x16416 + x16417;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16419 = x16191 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16420 = x16192 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16421 = x16419 + x16420;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16422 = x16193 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16423 = x16421 + x16422;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16424 = x16194 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16425 = x16423 + x16424;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16426 = x16195 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16427 = x16425 + x16426;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16428 = x16196 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16429 = x16427 + x16428;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16430 = x16197 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16431 = x16429 + x16430;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16432 = x16198 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16433 = x16431 + x16432;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16434 = x16199 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16435 = x16433 + x16434;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16436 = x16200 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16437 = x16435 + x16436;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16438 = x16201 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16439 = x16437 + x16438;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16440 = x16202 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16441 = x16439 + x16440;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16442 = x16203 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16443 = x16441 + x16442;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16444 = x16204 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16445 = x16443 + x16444;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16446 = x16205 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16447 = x16445 + x16446;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16448 = x16191 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16449 = x16192 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16450 = x16448 + x16449;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16451 = x16193 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16452 = x16450 + x16451;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16453 = x16194 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16454 = x16452 + x16453;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16455 = x16195 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16456 = x16454 + x16455;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16457 = x16196 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16458 = x16456 + x16457;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16459 = x16197 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16460 = x16458 + x16459;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16461 = x16198 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16462 = x16460 + x16461;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16463 = x16199 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16464 = x16462 + x16463;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16465 = x16200 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16466 = x16464 + x16465;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16467 = x16201 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16468 = x16466 + x16467;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16469 = x16202 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16470 = x16468 + x16469;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16471 = x16203 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16472 = x16470 + x16471;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16473 = x16204 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16474 = x16472 + x16473;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16475 = x16205 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16476 = x16474 + x16475;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16477 = x16206 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16478 = x16476 + x16477;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16479 = x16191 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16480 = x16192 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16481 = x16479 + x16480;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16482 = x16193 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16483 = x16481 + x16482;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16484 = x16194 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16485 = x16483 + x16484;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16486 = x16195 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16487 = x16485 + x16486;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16488 = x16196 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16489 = x16487 + x16488;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16490 = x16197 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16491 = x16489 + x16490;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16492 = x16198 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16493 = x16491 + x16492;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16494 = x16199 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16495 = x16493 + x16494;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16496 = x16200 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16497 = x16495 + x16496;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16498 = x16201 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16499 = x16497 + x16498;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16500 = x16202 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16501 = x16499 + x16500;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16502 = x16203 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16503 = x16501 + x16502;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16504 = x16204 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16505 = x16503 + x16504;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16506 = x16205 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16507 = x16505 + x16506;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16508 = x16206 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16509 = x16507 + x16508;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16510 = x16207 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16511 = x16509 + x16510;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16512 = x16191 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16513 = x16192 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16514 = x16512 + x16513;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16515 = x16193 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16516 = x16514 + x16515;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16517 = x16194 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16518 = x16516 + x16517;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16519 = x16195 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16520 = x16518 + x16519;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16521 = x16196 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16522 = x16520 + x16521;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16523 = x16197 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16524 = x16522 + x16523;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16525 = x16198 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16526 = x16524 + x16525;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16527 = x16199 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16528 = x16526 + x16527;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16529 = x16200 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16530 = x16528 + x16529;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16531 = x16201 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16532 = x16530 + x16531;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16533 = x16202 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16534 = x16532 + x16533;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16535 = x16203 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16536 = x16534 + x16535;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16537 = x16204 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16538 = x16536 + x16537;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16539 = x16205 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16540 = x16538 + x16539;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16541 = x16206 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16542 = x16540 + x16541;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16543 = x16207 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16544 = x16542 + x16543;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16545 = x16208 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16546 = x16544 + x16545;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16547 = x16191 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16548 = x16192 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16549 = x16547 + x16548;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16550 = x16193 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16551 = x16549 + x16550;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16552 = x16194 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16553 = x16551 + x16552;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16554 = x16195 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16555 = x16553 + x16554;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16556 = x16196 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16557 = x16555 + x16556;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16558 = x16197 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16559 = x16557 + x16558;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16560 = x16198 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16561 = x16559 + x16560;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16562 = x16199 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16563 = x16561 + x16562;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16564 = x16200 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16565 = x16563 + x16564;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16566 = x16201 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16567 = x16565 + x16566;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16568 = x16202 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16569 = x16567 + x16568;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16570 = x16203 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16571 = x16569 + x16570;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16572 = x16204 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16573 = x16571 + x16572;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16574 = x16205 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16575 = x16573 + x16574;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16576 = x16206 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16577 = x16575 + x16576;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16578 = x16207 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16579 = x16577 + x16578;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16580 = x16208 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16581 = x16579 + x16580;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16582 = x16209 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16583 = x16581 + x16582;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16584 = x16191 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16585 = x16192 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16586 = x16584 + x16585;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16587 = x16193 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16588 = x16586 + x16587;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16589 = x16194 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16590 = x16588 + x16589;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16591 = x16195 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16592 = x16590 + x16591;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16593 = x16196 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16594 = x16592 + x16593;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16595 = x16197 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16596 = x16594 + x16595;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16597 = x16198 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16598 = x16596 + x16597;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16599 = x16199 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16600 = x16598 + x16599;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16601 = x16200 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16602 = x16600 + x16601;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16603 = x16201 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16604 = x16602 + x16603;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16605 = x16202 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16606 = x16604 + x16605;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16607 = x16203 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16608 = x16606 + x16607;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16609 = x16204 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16610 = x16608 + x16609;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16611 = x16205 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16612 = x16610 + x16611;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16613 = x16206 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16614 = x16612 + x16613;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16615 = x16207 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16616 = x16614 + x16615;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16617 = x16208 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16618 = x16616 + x16617;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16619 = x16209 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16620 = x16618 + x16619;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16621 = x16210 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16622 = x16620 + x16621;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16623 = x16191 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16624 = x16192 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16625 = x16623 + x16624;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16626 = x16193 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16627 = x16625 + x16626;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16628 = x16194 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16629 = x16627 + x16628;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16630 = x16195 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16631 = x16629 + x16630;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16632 = x16196 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16633 = x16631 + x16632;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16634 = x16197 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16635 = x16633 + x16634;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16636 = x16198 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16637 = x16635 + x16636;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16638 = x16199 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16639 = x16637 + x16638;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16640 = x16200 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16641 = x16639 + x16640;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16642 = x16201 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16643 = x16641 + x16642;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16644 = x16202 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16645 = x16643 + x16644;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16646 = x16203 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16647 = x16645 + x16646;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16648 = x16204 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16649 = x16647 + x16648;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16650 = x16205 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16651 = x16649 + x16650;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16652 = x16206 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16653 = x16651 + x16652;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16654 = x16207 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16655 = x16653 + x16654;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16656 = x16208 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16657 = x16655 + x16656;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16658 = x16209 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16659 = x16657 + x16658;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16660 = x16210 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16661 = x16659 + x16660;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16662 = x16211 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16663 = x16661 + x16662;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16664 = x16191 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16665 = x16192 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16666 = x16664 + x16665;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16667 = x16193 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16668 = x16666 + x16667;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16669 = x16194 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16670 = x16668 + x16669;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16671 = x16195 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16672 = x16670 + x16671;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16673 = x16196 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16674 = x16672 + x16673;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16675 = x16197 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16676 = x16674 + x16675;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16677 = x16198 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16678 = x16676 + x16677;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16679 = x16199 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16680 = x16678 + x16679;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16681 = x16200 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16682 = x16680 + x16681;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16683 = x16201 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16684 = x16682 + x16683;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16685 = x16202 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16686 = x16684 + x16685;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16687 = x16203 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16688 = x16686 + x16687;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16689 = x16204 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16690 = x16688 + x16689;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16691 = x16205 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16692 = x16690 + x16691;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16693 = x16206 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16694 = x16692 + x16693;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16695 = x16207 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16696 = x16694 + x16695;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16697 = x16208 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16698 = x16696 + x16697;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16699 = x16209 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16700 = x16698 + x16699;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16701 = x16210 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16702 = x16700 + x16701;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16703 = x16211 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16704 = x16702 + x16703;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16705 = x16212 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16706 = x16704 + x16705;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16707 = x16191 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16708 = x16192 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16709 = x16707 + x16708;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16710 = x16193 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16711 = x16709 + x16710;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16712 = x16194 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16713 = x16711 + x16712;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16714 = x16195 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16715 = x16713 + x16714;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16716 = x16196 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16717 = x16715 + x16716;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16718 = x16197 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16719 = x16717 + x16718;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16720 = x16198 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16721 = x16719 + x16720;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16722 = x16199 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16723 = x16721 + x16722;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16724 = x16200 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16725 = x16723 + x16724;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16726 = x16201 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16727 = x16725 + x16726;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16728 = x16202 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16729 = x16727 + x16728;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16730 = x16203 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16731 = x16729 + x16730;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16732 = x16204 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16733 = x16731 + x16732;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16734 = x16205 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16735 = x16733 + x16734;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16736 = x16206 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16737 = x16735 + x16736;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16738 = x16207 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16739 = x16737 + x16738;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16740 = x16208 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16741 = x16739 + x16740;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16742 = x16209 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16743 = x16741 + x16742;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16744 = x16210 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16745 = x16743 + x16744;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16746 = x16211 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16747 = x16745 + x16746;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16748 = x16212 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16749 = x16747 + x16748;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16750 = x16213 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16751 = x16749 + x16750;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16752 = x16191 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16753 = x16192 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16754 = x16752 + x16753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16755 = x16193 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16756 = x16754 + x16755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16757 = x16194 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16758 = x16756 + x16757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16759 = x16195 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16760 = x16758 + x16759;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16761 = x16196 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16762 = x16760 + x16761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16763 = x16197 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16764 = x16762 + x16763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16765 = x16198 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16766 = x16764 + x16765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16767 = x16199 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16768 = x16766 + x16767;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16769 = x16200 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16770 = x16768 + x16769;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16771 = x16201 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16772 = x16770 + x16771;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16773 = x16202 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16774 = x16772 + x16773;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16775 = x16203 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16776 = x16774 + x16775;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16777 = x16204 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16778 = x16776 + x16777;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16779 = x16205 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16780 = x16778 + x16779;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16781 = x16206 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16782 = x16780 + x16781;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16783 = x16207 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16784 = x16782 + x16783;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16785 = x16208 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16786 = x16784 + x16785;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16787 = x16209 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16788 = x16786 + x16787;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16789 = x16210 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16790 = x16788 + x16789;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16791 = x16211 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16792 = x16790 + x16791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16793 = x16212 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16794 = x16792 + x16793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16795 = x16213 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16796 = x16794 + x16795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16797 = x16214 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16798 = x16796 + x16797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16799 = x16191 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16800 = x16192 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16801 = x16799 + x16800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16802 = x16193 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16803 = x16801 + x16802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16804 = x16194 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16805 = x16803 + x16804;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16806 = x16195 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16807 = x16805 + x16806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16808 = x16196 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16809 = x16807 + x16808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16810 = x16197 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16811 = x16809 + x16810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16812 = x16198 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16813 = x16811 + x16812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16814 = x16199 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16815 = x16813 + x16814;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16816 = x16200 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16817 = x16815 + x16816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16818 = x16201 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16819 = x16817 + x16818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16820 = x16202 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16821 = x16819 + x16820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16822 = x16203 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16823 = x16821 + x16822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16824 = x16204 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16825 = x16823 + x16824;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16826 = x16205 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16827 = x16825 + x16826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16828 = x16206 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16829 = x16827 + x16828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16830 = x16207 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16831 = x16829 + x16830;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16832 = x16208 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16833 = x16831 + x16832;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16834 = x16209 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16835 = x16833 + x16834;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16836 = x16210 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16837 = x16835 + x16836;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16838 = x16211 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16839 = x16837 + x16838;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16840 = x16212 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16841 = x16839 + x16840;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16842 = x16213 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16843 = x16841 + x16842;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16844 = x16214 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16845 = x16843 + x16844;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16846 = x16215 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16847 = x16845 + x16846;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16848 = x16191 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16849 = x16192 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16850 = x16848 + x16849;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16851 = x16193 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16852 = x16850 + x16851;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16853 = x16194 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16854 = x16852 + x16853;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16855 = x16195 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16856 = x16854 + x16855;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16857 = x16196 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16858 = x16856 + x16857;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16859 = x16197 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16860 = x16858 + x16859;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16861 = x16198 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16862 = x16860 + x16861;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16863 = x16199 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16864 = x16862 + x16863;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16865 = x16200 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16866 = x16864 + x16865;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16867 = x16201 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16868 = x16866 + x16867;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16869 = x16202 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16870 = x16868 + x16869;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16871 = x16203 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16872 = x16870 + x16871;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16873 = x16204 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16874 = x16872 + x16873;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16875 = x16205 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16876 = x16874 + x16875;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16877 = x16206 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16878 = x16876 + x16877;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16879 = x16207 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16880 = x16878 + x16879;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16881 = x16208 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16882 = x16880 + x16881;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16883 = x16209 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16884 = x16882 + x16883;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16885 = x16210 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16886 = x16884 + x16885;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16887 = x16211 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16888 = x16886 + x16887;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16889 = x16212 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16890 = x16888 + x16889;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16891 = x16213 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16892 = x16890 + x16891;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16893 = x16214 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16894 = x16892 + x16893;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16895 = x16215 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16896 = x16894 + x16895;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16897 = x16216 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16898 = x16896 + x16897;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16899 = x16191 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16900 = x16192 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16901 = x16899 + x16900;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16902 = x16193 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16903 = x16901 + x16902;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16904 = x16194 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16905 = x16903 + x16904;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16906 = x16195 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16907 = x16905 + x16906;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16908 = x16196 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16909 = x16907 + x16908;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16910 = x16197 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16911 = x16909 + x16910;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16912 = x16198 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16913 = x16911 + x16912;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16914 = x16199 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16915 = x16913 + x16914;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16916 = x16200 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16917 = x16915 + x16916;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16918 = x16201 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16919 = x16917 + x16918;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16920 = x16202 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16921 = x16919 + x16920;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16922 = x16203 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16923 = x16921 + x16922;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16924 = x16204 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16925 = x16923 + x16924;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16926 = x16205 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16927 = x16925 + x16926;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16928 = x16206 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16929 = x16927 + x16928;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16930 = x16207 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16931 = x16929 + x16930;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16932 = x16208 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16933 = x16931 + x16932;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16934 = x16209 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16935 = x16933 + x16934;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16936 = x16210 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16937 = x16935 + x16936;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16938 = x16211 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16939 = x16937 + x16938;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16940 = x16212 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16941 = x16939 + x16940;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16942 = x16213 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16943 = x16941 + x16942;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16944 = x16214 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16945 = x16943 + x16944;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16946 = x16215 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16947 = x16945 + x16946;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16948 = x16216 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16949 = x16947 + x16948;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16950 = x16217 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16951 = x16949 + x16950;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16952 = x16191 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16953 = x16192 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16954 = x16952 + x16953;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16955 = x16193 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16956 = x16954 + x16955;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16957 = x16194 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16958 = x16956 + x16957;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16959 = x16195 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16960 = x16958 + x16959;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16961 = x16196 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16962 = x16960 + x16961;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16963 = x16197 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16964 = x16962 + x16963;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16965 = x16198 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16966 = x16964 + x16965;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16967 = x16199 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16968 = x16966 + x16967;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16969 = x16200 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16970 = x16968 + x16969;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16971 = x16201 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16972 = x16970 + x16971;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16973 = x16202 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16974 = x16972 + x16973;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16975 = x16203 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16976 = x16974 + x16975;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16977 = x16204 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16978 = x16976 + x16977;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16979 = x16205 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16980 = x16978 + x16979;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16981 = x16206 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16982 = x16980 + x16981;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16983 = x16207 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16984 = x16982 + x16983;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16985 = x16208 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16986 = x16984 + x16985;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16987 = x16209 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16988 = x16986 + x16987;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16989 = x16210 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16990 = x16988 + x16989;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16991 = x16211 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16992 = x16990 + x16991;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16993 = x16212 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16994 = x16992 + x16993;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16995 = x16213 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16996 = x16994 + x16995;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16997 = x16214 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x16998 = x16996 + x16997;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x16999 = x16215 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17000 = x16998 + x16999;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17001 = x16216 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17002 = x17000 + x17001;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17003 = x16217 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17004 = x17002 + x17003;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17005 = x16218 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17006 = x17004 + x17005;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17007 = x16191 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17008 = x16192 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17009 = x17007 + x17008;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17010 = x16193 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17011 = x17009 + x17010;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17012 = x16194 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17013 = x17011 + x17012;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17014 = x16195 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17015 = x17013 + x17014;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17016 = x16196 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17017 = x17015 + x17016;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17018 = x16197 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17019 = x17017 + x17018;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17020 = x16198 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17021 = x17019 + x17020;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17022 = x16199 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17023 = x17021 + x17022;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17024 = x16200 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17025 = x17023 + x17024;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17026 = x16201 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17027 = x17025 + x17026;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17028 = x16202 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17029 = x17027 + x17028;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17030 = x16203 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17031 = x17029 + x17030;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17032 = x16204 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17033 = x17031 + x17032;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17034 = x16205 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17035 = x17033 + x17034;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17036 = x16206 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17037 = x17035 + x17036;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17038 = x16207 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17039 = x17037 + x17038;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17040 = x16208 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17041 = x17039 + x17040;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17042 = x16209 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17043 = x17041 + x17042;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17044 = x16210 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17045 = x17043 + x17044;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17046 = x16211 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17047 = x17045 + x17046;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17048 = x16212 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17049 = x17047 + x17048;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17050 = x16213 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17051 = x17049 + x17050;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17052 = x16214 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17053 = x17051 + x17052;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17054 = x16215 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17055 = x17053 + x17054;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17056 = x16216 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17057 = x17055 + x17056;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17058 = x16217 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17059 = x17057 + x17058;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17060 = x16218 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17061 = x17059 + x17060;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17062 = x16219 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17063 = x17061 + x17062;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17064 = x16191 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17065 = x16192 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17066 = x17064 + x17065;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17067 = x16193 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17068 = x17066 + x17067;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17069 = x16194 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17070 = x17068 + x17069;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17071 = x16195 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17072 = x17070 + x17071;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17073 = x16196 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17074 = x17072 + x17073;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17075 = x16197 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17076 = x17074 + x17075;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17077 = x16198 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17078 = x17076 + x17077;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17079 = x16199 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17080 = x17078 + x17079;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17081 = x16200 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17082 = x17080 + x17081;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17083 = x16201 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17084 = x17082 + x17083;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17085 = x16202 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17086 = x17084 + x17085;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17087 = x16203 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17088 = x17086 + x17087;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17089 = x16204 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17090 = x17088 + x17089;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17091 = x16205 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17092 = x17090 + x17091;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17093 = x16206 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17094 = x17092 + x17093;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17095 = x16207 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17096 = x17094 + x17095;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17097 = x16208 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17098 = x17096 + x17097;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17099 = x16209 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17100 = x17098 + x17099;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17101 = x16210 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17102 = x17100 + x17101;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17103 = x16211 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17104 = x17102 + x17103;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17105 = x16212 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17106 = x17104 + x17105;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17107 = x16213 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17108 = x17106 + x17107;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17109 = x16214 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17110 = x17108 + x17109;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17111 = x16215 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17112 = x17110 + x17111;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17113 = x16216 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17114 = x17112 + x17113;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17115 = x16217 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17116 = x17114 + x17115;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17117 = x16218 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17118 = x17116 + x17117;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17119 = x16219 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17120 = x17118 + x17119;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17121 = x16220 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17122 = x17120 + x17121;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17123 = x16191 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17124 = x16192 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17125 = x17123 + x17124;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17126 = x16193 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17127 = x17125 + x17126;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17128 = x16194 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17129 = x17127 + x17128;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17130 = x16195 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17131 = x17129 + x17130;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17132 = x16196 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17133 = x17131 + x17132;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17134 = x16197 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17135 = x17133 + x17134;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17136 = x16198 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17137 = x17135 + x17136;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17138 = x16199 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17139 = x17137 + x17138;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17140 = x16200 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17141 = x17139 + x17140;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17142 = x16201 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17143 = x17141 + x17142;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17144 = x16202 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17145 = x17143 + x17144;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17146 = x16203 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17147 = x17145 + x17146;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17148 = x16204 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17149 = x17147 + x17148;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17150 = x16205 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17151 = x17149 + x17150;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17152 = x16206 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17153 = x17151 + x17152;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17154 = x16207 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17155 = x17153 + x17154;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17156 = x16208 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17157 = x17155 + x17156;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17158 = x16209 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17159 = x17157 + x17158;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17160 = x16210 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17161 = x17159 + x17160;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17162 = x16211 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17163 = x17161 + x17162;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17164 = x16212 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17165 = x17163 + x17164;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17166 = x16213 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17167 = x17165 + x17166;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17168 = x16214 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17169 = x17167 + x17168;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17170 = x16215 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17171 = x17169 + x17170;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17172 = x16216 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17173 = x17171 + x17172;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17174 = x16217 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17175 = x17173 + x17174;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17176 = x16218 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17177 = x17175 + x17176;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17178 = x16219 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17179 = x17177 + x17178;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17180 = x16220 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17181 = x17179 + x17180;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17182 = x16221 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17183 = x17181 + x17182;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17184 = x16191 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17185 = x16192 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17186 = x17184 + x17185;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17187 = x16193 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17188 = x17186 + x17187;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17189 = x16194 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17190 = x17188 + x17189;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17191 = x16195 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17192 = x17190 + x17191;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17193 = x16196 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17194 = x17192 + x17193;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17195 = x16197 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17196 = x17194 + x17195;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17197 = x16198 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17198 = x17196 + x17197;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17199 = x16199 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17200 = x17198 + x17199;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17201 = x16200 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17202 = x17200 + x17201;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17203 = x16201 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17204 = x17202 + x17203;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17205 = x16202 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17206 = x17204 + x17205;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17207 = x16203 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17208 = x17206 + x17207;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17209 = x16204 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17210 = x17208 + x17209;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17211 = x16205 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17212 = x17210 + x17211;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17213 = x16206 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17214 = x17212 + x17213;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17215 = x16207 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17216 = x17214 + x17215;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17217 = x16208 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17218 = x17216 + x17217;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17219 = x16209 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17220 = x17218 + x17219;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17221 = x16210 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17222 = x17220 + x17221;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17223 = x16211 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17224 = x17222 + x17223;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17225 = x16212 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17226 = x17224 + x17225;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17227 = x16213 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17228 = x17226 + x17227;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17229 = x16214 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17230 = x17228 + x17229;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17231 = x16215 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17232 = x17230 + x17231;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17233 = x16216 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17234 = x17232 + x17233;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17235 = x16217 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17236 = x17234 + x17235;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17237 = x16218 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17238 = x17236 + x17237;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17239 = x16219 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17240 = x17238 + x17239;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17241 = x16220 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17242 = x17240 + x17241;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17243 = x16221 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17244 = x17242 + x17243;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17245 = x16222 * x13790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17246 = x17244 + x17245;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17247 = x16192 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17248 = x16193 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17249 = x17247 + x17248;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17250 = x16194 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17251 = x17249 + x17250;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17252 = x16195 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17253 = x17251 + x17252;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17254 = x16196 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17255 = x17253 + x17254;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17256 = x16197 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17257 = x17255 + x17256;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17258 = x16198 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17259 = x17257 + x17258;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17260 = x16199 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17261 = x17259 + x17260;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17262 = x16200 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17263 = x17261 + x17262;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17264 = x16201 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17265 = x17263 + x17264;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17266 = x16202 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17267 = x17265 + x17266;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17268 = x16203 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17269 = x17267 + x17268;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17270 = x16204 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17271 = x17269 + x17270;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17272 = x16205 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17273 = x17271 + x17272;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17274 = x16206 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17275 = x17273 + x17274;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17276 = x16207 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17277 = x17275 + x17276;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17278 = x16208 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17279 = x17277 + x17278;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17280 = x16209 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17281 = x17279 + x17280;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17282 = x16210 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17283 = x17281 + x17282;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17284 = x16211 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17285 = x17283 + x17284;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17286 = x16212 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17287 = x17285 + x17286;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17288 = x16213 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17289 = x17287 + x17288;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17290 = x16214 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17291 = x17289 + x17290;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17292 = x16215 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17293 = x17291 + x17292;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17294 = x16216 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17295 = x17293 + x17294;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17296 = x16217 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17297 = x17295 + x17296;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17298 = x16218 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17299 = x17297 + x17298;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17300 = x16219 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17301 = x17299 + x17300;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17302 = x16220 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17303 = x17301 + x17302;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17304 = x16221 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17305 = x17303 + x17304;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17306 = x16222 * x13791;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17307 = x17305 + x17306;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17308 = x16193 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17309 = x16194 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17310 = x17308 + x17309;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17311 = x16195 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17312 = x17310 + x17311;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17313 = x16196 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17314 = x17312 + x17313;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17315 = x16197 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17316 = x17314 + x17315;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17317 = x16198 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17318 = x17316 + x17317;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17319 = x16199 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17320 = x17318 + x17319;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17321 = x16200 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17322 = x17320 + x17321;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17323 = x16201 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17324 = x17322 + x17323;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17325 = x16202 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17326 = x17324 + x17325;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17327 = x16203 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17328 = x17326 + x17327;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17329 = x16204 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17330 = x17328 + x17329;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17331 = x16205 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17332 = x17330 + x17331;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17333 = x16206 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17334 = x17332 + x17333;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17335 = x16207 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17336 = x17334 + x17335;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17337 = x16208 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17338 = x17336 + x17337;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17339 = x16209 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17340 = x17338 + x17339;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17341 = x16210 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17342 = x17340 + x17341;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17343 = x16211 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17344 = x17342 + x17343;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17345 = x16212 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17346 = x17344 + x17345;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17347 = x16213 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17348 = x17346 + x17347;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17349 = x16214 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17350 = x17348 + x17349;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17351 = x16215 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17352 = x17350 + x17351;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17353 = x16216 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17354 = x17352 + x17353;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17355 = x16217 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17356 = x17354 + x17355;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17357 = x16218 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17358 = x17356 + x17357;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17359 = x16219 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17360 = x17358 + x17359;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17361 = x16220 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17362 = x17360 + x17361;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17363 = x16221 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17364 = x17362 + x17363;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17365 = x16222 * x13792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17366 = x17364 + x17365;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17367 = x16194 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17368 = x16195 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17369 = x17367 + x17368;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17370 = x16196 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17371 = x17369 + x17370;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17372 = x16197 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17373 = x17371 + x17372;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17374 = x16198 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17375 = x17373 + x17374;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17376 = x16199 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17377 = x17375 + x17376;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17378 = x16200 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17379 = x17377 + x17378;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17380 = x16201 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17381 = x17379 + x17380;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17382 = x16202 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17383 = x17381 + x17382;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17384 = x16203 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17385 = x17383 + x17384;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17386 = x16204 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17387 = x17385 + x17386;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17388 = x16205 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17389 = x17387 + x17388;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17390 = x16206 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17391 = x17389 + x17390;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17392 = x16207 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17393 = x17391 + x17392;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17394 = x16208 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17395 = x17393 + x17394;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17396 = x16209 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17397 = x17395 + x17396;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17398 = x16210 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17399 = x17397 + x17398;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17400 = x16211 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17401 = x17399 + x17400;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17402 = x16212 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17403 = x17401 + x17402;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17404 = x16213 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17405 = x17403 + x17404;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17406 = x16214 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17407 = x17405 + x17406;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17408 = x16215 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17409 = x17407 + x17408;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17410 = x16216 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17411 = x17409 + x17410;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17412 = x16217 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17413 = x17411 + x17412;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17414 = x16218 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17415 = x17413 + x17414;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17416 = x16219 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17417 = x17415 + x17416;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17418 = x16220 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17419 = x17417 + x17418;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17420 = x16221 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17421 = x17419 + x17420;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17422 = x16222 * x13793;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17423 = x17421 + x17422;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17424 = x16195 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17425 = x16196 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17426 = x17424 + x17425;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17427 = x16197 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17428 = x17426 + x17427;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17429 = x16198 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17430 = x17428 + x17429;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17431 = x16199 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17432 = x17430 + x17431;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17433 = x16200 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17434 = x17432 + x17433;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17435 = x16201 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17436 = x17434 + x17435;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17437 = x16202 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17438 = x17436 + x17437;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17439 = x16203 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17440 = x17438 + x17439;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17441 = x16204 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17442 = x17440 + x17441;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17443 = x16205 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17444 = x17442 + x17443;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17445 = x16206 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17446 = x17444 + x17445;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17447 = x16207 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17448 = x17446 + x17447;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17449 = x16208 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17450 = x17448 + x17449;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17451 = x16209 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17452 = x17450 + x17451;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17453 = x16210 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17454 = x17452 + x17453;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17455 = x16211 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17456 = x17454 + x17455;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17457 = x16212 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17458 = x17456 + x17457;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17459 = x16213 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17460 = x17458 + x17459;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17461 = x16214 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17462 = x17460 + x17461;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17463 = x16215 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17464 = x17462 + x17463;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17465 = x16216 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17466 = x17464 + x17465;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17467 = x16217 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17468 = x17466 + x17467;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17469 = x16218 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17470 = x17468 + x17469;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17471 = x16219 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17472 = x17470 + x17471;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17473 = x16220 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17474 = x17472 + x17473;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17475 = x16221 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17476 = x17474 + x17475;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17477 = x16222 * x13795;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17478 = x17476 + x17477;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17479 = x16196 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17480 = x16197 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17481 = x17479 + x17480;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17482 = x16198 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17483 = x17481 + x17482;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17484 = x16199 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17485 = x17483 + x17484;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17486 = x16200 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17487 = x17485 + x17486;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17488 = x16201 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17489 = x17487 + x17488;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17490 = x16202 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17491 = x17489 + x17490;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17492 = x16203 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17493 = x17491 + x17492;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17494 = x16204 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17495 = x17493 + x17494;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17496 = x16205 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17497 = x17495 + x17496;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17498 = x16206 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17499 = x17497 + x17498;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17500 = x16207 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17501 = x17499 + x17500;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17502 = x16208 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17503 = x17501 + x17502;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17504 = x16209 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17505 = x17503 + x17504;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17506 = x16210 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17507 = x17505 + x17506;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17508 = x16211 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17509 = x17507 + x17508;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17510 = x16212 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17511 = x17509 + x17510;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17512 = x16213 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17513 = x17511 + x17512;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17514 = x16214 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17515 = x17513 + x17514;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17516 = x16215 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17517 = x17515 + x17516;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17518 = x16216 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17519 = x17517 + x17518;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17520 = x16217 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17521 = x17519 + x17520;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17522 = x16218 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17523 = x17521 + x17522;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17524 = x16219 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17525 = x17523 + x17524;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17526 = x16220 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17527 = x17525 + x17526;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17528 = x16221 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17529 = x17527 + x17528;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17530 = x16222 * x13796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17531 = x17529 + x17530;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17532 = x16197 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17533 = x16198 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17534 = x17532 + x17533;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17535 = x16199 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17536 = x17534 + x17535;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17537 = x16200 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17538 = x17536 + x17537;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17539 = x16201 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17540 = x17538 + x17539;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17541 = x16202 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17542 = x17540 + x17541;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17543 = x16203 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17544 = x17542 + x17543;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17545 = x16204 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17546 = x17544 + x17545;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17547 = x16205 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17548 = x17546 + x17547;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17549 = x16206 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17550 = x17548 + x17549;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17551 = x16207 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17552 = x17550 + x17551;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17553 = x16208 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17554 = x17552 + x17553;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17555 = x16209 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17556 = x17554 + x17555;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17557 = x16210 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17558 = x17556 + x17557;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17559 = x16211 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17560 = x17558 + x17559;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17561 = x16212 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17562 = x17560 + x17561;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17563 = x16213 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17564 = x17562 + x17563;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17565 = x16214 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17566 = x17564 + x17565;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17567 = x16215 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17568 = x17566 + x17567;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17569 = x16216 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17570 = x17568 + x17569;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17571 = x16217 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17572 = x17570 + x17571;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17573 = x16218 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17574 = x17572 + x17573;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17575 = x16219 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17576 = x17574 + x17575;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17577 = x16220 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17578 = x17576 + x17577;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17579 = x16221 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17580 = x17578 + x17579;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17581 = x16222 * x13797;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17582 = x17580 + x17581;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17583 = x16198 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17584 = x16199 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17585 = x17583 + x17584;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17586 = x16200 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17587 = x17585 + x17586;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17588 = x16201 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17589 = x17587 + x17588;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17590 = x16202 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17591 = x17589 + x17590;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17592 = x16203 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17593 = x17591 + x17592;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17594 = x16204 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17595 = x17593 + x17594;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17596 = x16205 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17597 = x17595 + x17596;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17598 = x16206 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17599 = x17597 + x17598;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17600 = x16207 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17601 = x17599 + x17600;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17602 = x16208 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17603 = x17601 + x17602;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17604 = x16209 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17605 = x17603 + x17604;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17606 = x16210 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17607 = x17605 + x17606;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17608 = x16211 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17609 = x17607 + x17608;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17610 = x16212 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17611 = x17609 + x17610;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17612 = x16213 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17613 = x17611 + x17612;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17614 = x16214 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17615 = x17613 + x17614;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17616 = x16215 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17617 = x17615 + x17616;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17618 = x16216 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17619 = x17617 + x17618;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17620 = x16217 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17621 = x17619 + x17620;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17622 = x16218 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17623 = x17621 + x17622;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17624 = x16219 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17625 = x17623 + x17624;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17626 = x16220 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17627 = x17625 + x17626;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17628 = x16221 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17629 = x17627 + x17628;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17630 = x16222 * x13798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17631 = x17629 + x17630;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17632 = x16199 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17633 = x16200 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17634 = x17632 + x17633;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17635 = x16201 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17636 = x17634 + x17635;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17637 = x16202 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17638 = x17636 + x17637;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17639 = x16203 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17640 = x17638 + x17639;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17641 = x16204 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17642 = x17640 + x17641;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17643 = x16205 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17644 = x17642 + x17643;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17645 = x16206 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17646 = x17644 + x17645;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17647 = x16207 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17648 = x17646 + x17647;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17649 = x16208 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17650 = x17648 + x17649;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17651 = x16209 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17652 = x17650 + x17651;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17653 = x16210 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17654 = x17652 + x17653;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17655 = x16211 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17656 = x17654 + x17655;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17657 = x16212 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17658 = x17656 + x17657;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17659 = x16213 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17660 = x17658 + x17659;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17661 = x16214 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17662 = x17660 + x17661;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17663 = x16215 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17664 = x17662 + x17663;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17665 = x16216 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17666 = x17664 + x17665;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17667 = x16217 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17668 = x17666 + x17667;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17669 = x16218 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17670 = x17668 + x17669;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17671 = x16219 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17672 = x17670 + x17671;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17673 = x16220 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17674 = x17672 + x17673;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17675 = x16221 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17676 = x17674 + x17675;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17677 = x16222 * x13800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17678 = x17676 + x17677;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17679 = x16200 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17680 = x16201 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17681 = x17679 + x17680;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17682 = x16202 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17683 = x17681 + x17682;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17684 = x16203 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17685 = x17683 + x17684;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17686 = x16204 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17687 = x17685 + x17686;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17688 = x16205 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17689 = x17687 + x17688;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17690 = x16206 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17691 = x17689 + x17690;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17692 = x16207 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17693 = x17691 + x17692;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17694 = x16208 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17695 = x17693 + x17694;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17696 = x16209 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17697 = x17695 + x17696;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17698 = x16210 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17699 = x17697 + x17698;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17700 = x16211 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17701 = x17699 + x17700;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17702 = x16212 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17703 = x17701 + x17702;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17704 = x16213 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17705 = x17703 + x17704;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17706 = x16214 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17707 = x17705 + x17706;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17708 = x16215 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17709 = x17707 + x17708;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17710 = x16216 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17711 = x17709 + x17710;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17712 = x16217 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17713 = x17711 + x17712;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17714 = x16218 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17715 = x17713 + x17714;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17716 = x16219 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17717 = x17715 + x17716;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17718 = x16220 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17719 = x17717 + x17718;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17720 = x16221 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17721 = x17719 + x17720;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17722 = x16222 * x13801;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17723 = x17721 + x17722;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17724 = x16201 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17725 = x16202 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17726 = x17724 + x17725;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17727 = x16203 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17728 = x17726 + x17727;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17729 = x16204 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17730 = x17728 + x17729;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17731 = x16205 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17732 = x17730 + x17731;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17733 = x16206 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17734 = x17732 + x17733;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17735 = x16207 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17736 = x17734 + x17735;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17737 = x16208 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17738 = x17736 + x17737;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17739 = x16209 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17740 = x17738 + x17739;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17741 = x16210 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17742 = x17740 + x17741;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17743 = x16211 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17744 = x17742 + x17743;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17745 = x16212 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17746 = x17744 + x17745;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17747 = x16213 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17748 = x17746 + x17747;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17749 = x16214 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17750 = x17748 + x17749;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17751 = x16215 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17752 = x17750 + x17751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17753 = x16216 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17754 = x17752 + x17753;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17755 = x16217 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17756 = x17754 + x17755;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17757 = x16218 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17758 = x17756 + x17757;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17759 = x16219 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17760 = x17758 + x17759;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17761 = x16220 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17762 = x17760 + x17761;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17763 = x16221 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17764 = x17762 + x17763;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17765 = x16222 * x13802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17766 = x17764 + x17765;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17767 = x16202 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17768 = x16203 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17769 = x17767 + x17768;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17770 = x16204 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17771 = x17769 + x17770;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17772 = x16205 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17773 = x17771 + x17772;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17774 = x16206 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17775 = x17773 + x17774;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17776 = x16207 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17777 = x17775 + x17776;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17778 = x16208 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17779 = x17777 + x17778;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17780 = x16209 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17781 = x17779 + x17780;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17782 = x16210 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17783 = x17781 + x17782;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17784 = x16211 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17785 = x17783 + x17784;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17786 = x16212 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17787 = x17785 + x17786;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17788 = x16213 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17789 = x17787 + x17788;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17790 = x16214 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17791 = x17789 + x17790;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17792 = x16215 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17793 = x17791 + x17792;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17794 = x16216 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17795 = x17793 + x17794;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17796 = x16217 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17797 = x17795 + x17796;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17798 = x16218 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17799 = x17797 + x17798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17800 = x16219 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17801 = x17799 + x17800;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17802 = x16220 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17803 = x17801 + x17802;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17804 = x16221 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17805 = x17803 + x17804;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17806 = x16222 * x13803;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17807 = x17805 + x17806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17808 = x16203 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17809 = x16204 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17810 = x17808 + x17809;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17811 = x16205 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17812 = x17810 + x17811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17813 = x16206 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17814 = x17812 + x17813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17815 = x16207 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17816 = x17814 + x17815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17817 = x16208 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17818 = x17816 + x17817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17819 = x16209 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17820 = x17818 + x17819;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17821 = x16210 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17822 = x17820 + x17821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17823 = x16211 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17824 = x17822 + x17823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17825 = x16212 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17826 = x17824 + x17825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17827 = x16213 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17828 = x17826 + x17827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17829 = x16214 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17830 = x17828 + x17829;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17831 = x16215 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17832 = x17830 + x17831;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17833 = x16216 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17834 = x17832 + x17833;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17835 = x16217 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17836 = x17834 + x17835;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17837 = x16218 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17838 = x17836 + x17837;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17839 = x16219 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17840 = x17838 + x17839;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17841 = x16220 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17842 = x17840 + x17841;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17843 = x16221 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17844 = x17842 + x17843;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17845 = x16222 * x13805;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17846 = x17844 + x17845;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17847 = x16204 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17848 = x16205 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17849 = x17847 + x17848;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17850 = x16206 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17851 = x17849 + x17850;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17852 = x16207 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17853 = x17851 + x17852;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17854 = x16208 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17855 = x17853 + x17854;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17856 = x16209 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17857 = x17855 + x17856;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17858 = x16210 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17859 = x17857 + x17858;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17860 = x16211 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17861 = x17859 + x17860;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17862 = x16212 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17863 = x17861 + x17862;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17864 = x16213 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17865 = x17863 + x17864;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17866 = x16214 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17867 = x17865 + x17866;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17868 = x16215 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17869 = x17867 + x17868;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17870 = x16216 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17871 = x17869 + x17870;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17872 = x16217 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17873 = x17871 + x17872;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17874 = x16218 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17875 = x17873 + x17874;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17876 = x16219 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17877 = x17875 + x17876;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17878 = x16220 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17879 = x17877 + x17878;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17880 = x16221 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17881 = x17879 + x17880;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17882 = x16222 * x13806;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17883 = x17881 + x17882;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17884 = x16205 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17885 = x16206 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17886 = x17884 + x17885;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17887 = x16207 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17888 = x17886 + x17887;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17889 = x16208 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17890 = x17888 + x17889;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17891 = x16209 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17892 = x17890 + x17891;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17893 = x16210 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17894 = x17892 + x17893;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17895 = x16211 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17896 = x17894 + x17895;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17897 = x16212 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17898 = x17896 + x17897;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17899 = x16213 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17900 = x17898 + x17899;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17901 = x16214 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17902 = x17900 + x17901;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17903 = x16215 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17904 = x17902 + x17903;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17905 = x16216 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17906 = x17904 + x17905;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17907 = x16217 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17908 = x17906 + x17907;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17909 = x16218 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17910 = x17908 + x17909;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17911 = x16219 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17912 = x17910 + x17911;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17913 = x16220 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17914 = x17912 + x17913;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17915 = x16221 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17916 = x17914 + x17915;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17917 = x16222 * x13807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17918 = x17916 + x17917;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17919 = x16206 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17920 = x16207 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17921 = x17919 + x17920;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17922 = x16208 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17923 = x17921 + x17922;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17924 = x16209 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17925 = x17923 + x17924;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17926 = x16210 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17927 = x17925 + x17926;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17928 = x16211 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17929 = x17927 + x17928;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17930 = x16212 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17931 = x17929 + x17930;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17932 = x16213 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17933 = x17931 + x17932;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17934 = x16214 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17935 = x17933 + x17934;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17936 = x16215 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17937 = x17935 + x17936;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17938 = x16216 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17939 = x17937 + x17938;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17940 = x16217 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17941 = x17939 + x17940;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17942 = x16218 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17943 = x17941 + x17942;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17944 = x16219 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17945 = x17943 + x17944;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17946 = x16220 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17947 = x17945 + x17946;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17948 = x16221 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17949 = x17947 + x17948;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17950 = x16222 * x13808;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17951 = x17949 + x17950;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17952 = x16207 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17953 = x16208 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17954 = x17952 + x17953;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17955 = x16209 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17956 = x17954 + x17955;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17957 = x16210 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17958 = x17956 + x17957;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17959 = x16211 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17960 = x17958 + x17959;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17961 = x16212 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17962 = x17960 + x17961;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17963 = x16213 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17964 = x17962 + x17963;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17965 = x16214 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17966 = x17964 + x17965;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17967 = x16215 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17968 = x17966 + x17967;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17969 = x16216 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17970 = x17968 + x17969;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17971 = x16217 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17972 = x17970 + x17971;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17973 = x16218 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17974 = x17972 + x17973;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17975 = x16219 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17976 = x17974 + x17975;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17977 = x16220 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17978 = x17976 + x17977;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17979 = x16221 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17980 = x17978 + x17979;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17981 = x16222 * x13810;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17982 = x17980 + x17981;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17983 = x16208 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17984 = x16209 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17985 = x17983 + x17984;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17986 = x16210 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17987 = x17985 + x17986;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17988 = x16211 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17989 = x17987 + x17988;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17990 = x16212 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17991 = x17989 + x17990;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17992 = x16213 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17993 = x17991 + x17992;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17994 = x16214 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17995 = x17993 + x17994;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17996 = x16215 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17997 = x17995 + x17996;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x17998 = x16216 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x17999 = x17997 + x17998;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18000 = x16217 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18001 = x17999 + x18000;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18002 = x16218 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18003 = x18001 + x18002;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18004 = x16219 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18005 = x18003 + x18004;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18006 = x16220 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18007 = x18005 + x18006;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18008 = x16221 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18009 = x18007 + x18008;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18010 = x16222 * x13811;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18011 = x18009 + x18010;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18012 = x16209 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18013 = x16210 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18014 = x18012 + x18013;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18015 = x16211 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18016 = x18014 + x18015;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18017 = x16212 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18018 = x18016 + x18017;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18019 = x16213 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18020 = x18018 + x18019;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18021 = x16214 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18022 = x18020 + x18021;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18023 = x16215 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18024 = x18022 + x18023;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18025 = x16216 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18026 = x18024 + x18025;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18027 = x16217 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18028 = x18026 + x18027;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18029 = x16218 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18030 = x18028 + x18029;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18031 = x16219 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18032 = x18030 + x18031;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18033 = x16220 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18034 = x18032 + x18033;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18035 = x16221 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18036 = x18034 + x18035;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18037 = x16222 * x13812;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18038 = x18036 + x18037;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18039 = x16210 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18040 = x16211 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18041 = x18039 + x18040;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18042 = x16212 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18043 = x18041 + x18042;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18044 = x16213 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18045 = x18043 + x18044;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18046 = x16214 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18047 = x18045 + x18046;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18048 = x16215 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18049 = x18047 + x18048;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18050 = x16216 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18051 = x18049 + x18050;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18052 = x16217 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18053 = x18051 + x18052;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18054 = x16218 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18055 = x18053 + x18054;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18056 = x16219 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18057 = x18055 + x18056;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18058 = x16220 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18059 = x18057 + x18058;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18060 = x16221 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18061 = x18059 + x18060;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18062 = x16222 * x13813;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18063 = x18061 + x18062;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18064 = x16211 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18065 = x16212 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18066 = x18064 + x18065;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18067 = x16213 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18068 = x18066 + x18067;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18069 = x16214 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18070 = x18068 + x18069;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18071 = x16215 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18072 = x18070 + x18071;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18073 = x16216 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18074 = x18072 + x18073;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18075 = x16217 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18076 = x18074 + x18075;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18077 = x16218 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18078 = x18076 + x18077;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18079 = x16219 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18080 = x18078 + x18079;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18081 = x16220 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18082 = x18080 + x18081;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18083 = x16221 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18084 = x18082 + x18083;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18085 = x16222 * x13815;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18086 = x18084 + x18085;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18087 = x16212 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18088 = x16213 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18089 = x18087 + x18088;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18090 = x16214 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18091 = x18089 + x18090;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18092 = x16215 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18093 = x18091 + x18092;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18094 = x16216 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18095 = x18093 + x18094;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18096 = x16217 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18097 = x18095 + x18096;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18098 = x16218 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18099 = x18097 + x18098;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18100 = x16219 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18101 = x18099 + x18100;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18102 = x16220 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18103 = x18101 + x18102;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18104 = x16221 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18105 = x18103 + x18104;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18106 = x16222 * x13816;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18107 = x18105 + x18106;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18108 = x16213 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18109 = x16214 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18110 = x18108 + x18109;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18111 = x16215 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18112 = x18110 + x18111;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18113 = x16216 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18114 = x18112 + x18113;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18115 = x16217 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18116 = x18114 + x18115;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18117 = x16218 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18118 = x18116 + x18117;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18119 = x16219 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18120 = x18118 + x18119;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18121 = x16220 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18122 = x18120 + x18121;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18123 = x16221 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18124 = x18122 + x18123;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18125 = x16222 * x13817;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18126 = x18124 + x18125;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18127 = x16214 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18128 = x16215 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18129 = x18127 + x18128;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18130 = x16216 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18131 = x18129 + x18130;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18132 = x16217 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18133 = x18131 + x18132;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18134 = x16218 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18135 = x18133 + x18134;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18136 = x16219 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18137 = x18135 + x18136;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18138 = x16220 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18139 = x18137 + x18138;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18140 = x16221 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18141 = x18139 + x18140;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18142 = x16222 * x13818;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18143 = x18141 + x18142;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18144 = x16215 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18145 = x16216 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18146 = x18144 + x18145;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18147 = x16217 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18148 = x18146 + x18147;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18149 = x16218 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18150 = x18148 + x18149;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18151 = x16219 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18152 = x18150 + x18151;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18153 = x16220 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18154 = x18152 + x18153;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18155 = x16221 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18156 = x18154 + x18155;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18157 = x16222 * x13820;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18158 = x18156 + x18157;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18159 = x16216 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18160 = x16217 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18161 = x18159 + x18160;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18162 = x16218 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18163 = x18161 + x18162;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18164 = x16219 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18165 = x18163 + x18164;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18166 = x16220 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18167 = x18165 + x18166;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18168 = x16221 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18169 = x18167 + x18168;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18170 = x16222 * x13821;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18171 = x18169 + x18170;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18172 = x16217 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18173 = x16218 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18174 = x18172 + x18173;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18175 = x16219 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18176 = x18174 + x18175;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18177 = x16220 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18178 = x18176 + x18177;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18179 = x16221 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18180 = x18178 + x18179;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18181 = x16222 * x13822;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18182 = x18180 + x18181;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18183 = x16218 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18184 = x16219 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18185 = x18183 + x18184;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18186 = x16220 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18187 = x18185 + x18186;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18188 = x16221 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18189 = x18187 + x18188;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18190 = x16222 * x13823;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18191 = x18189 + x18190;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18192 = x16219 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18193 = x16220 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18194 = x18192 + x18193;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18195 = x16221 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18196 = x18194 + x18195;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18197 = x16222 * x13825;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18198 = x18196 + x18197;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18199 = x16220 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18200 = x16221 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18201 = x18199 + x18200;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18202 = x16222 * x13826;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18203 = x18201 + x18202;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18204 = x16221 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18205 = x16222 * x13827;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:14)
        auto x18206 = x18204 + x18205;
        // loc("zirgen/circuit/rv32im/bigint.cpp":73:21)
        auto x18207 = x16222 * x13828;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18208 = x13829 - x16223;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18209 = x13832 - x16226;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18210 = x13837 - x16231;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18211 = x13844 - x16238;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18212 = x13853 - x16247;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18213 = x13864 - x16258;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18214 = x13877 - x16271;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18215 = x13892 - x16286;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18216 = x13909 - x16303;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18217 = x13928 - x16322;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18218 = x13949 - x16343;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18219 = x13972 - x16366;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18220 = x13997 - x16391;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18221 = x14024 - x16418;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18222 = x14053 - x16447;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18223 = x14084 - x16478;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18224 = x14117 - x16511;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18225 = x14152 - x16546;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18226 = x14189 - x16583;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18227 = x14228 - x16622;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18228 = x14269 - x16663;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18229 = x14312 - x16706;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18230 = x14357 - x16751;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18231 = x14404 - x16798;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18232 = x14453 - x16847;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18233 = x14504 - x16898;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18234 = x14557 - x16951;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18235 = x14612 - x17006;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18236 = x14669 - x17063;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18237 = x14728 - x17122;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18238 = x14789 - x17183;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18239 = x14852 - x17246;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18240 = x14913 - x17307;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18241 = x14972 - x17366;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18242 = x15029 - x17423;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18243 = x15084 - x17478;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18244 = x15137 - x17531;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18245 = x15188 - x17582;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18246 = x15237 - x17631;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18247 = x15284 - x17678;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18248 = x15329 - x17723;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18249 = x15372 - x17766;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18250 = x15413 - x17807;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18251 = x15452 - x17846;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18252 = x15489 - x17883;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18253 = x15524 - x17918;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18254 = x15557 - x17951;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18255 = x15588 - x17982;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18256 = x15617 - x18011;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18257 = x15644 - x18038;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18258 = x15669 - x18063;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18259 = x15692 - x18086;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18260 = x15713 - x18107;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18261 = x15732 - x18126;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18262 = x15749 - x18143;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18263 = x15764 - x18158;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18264 = x15777 - x18171;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18265 = x15788 - x18182;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18266 = x15797 - x18191;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18267 = x15804 - x18198;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18268 = x15809 - x18203;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18269 = x15812 - x18206;
        // loc("zirgen/circuit/rv32im/bigint.cpp":105:17)
        auto x18270 = x15813 - x18207;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18271 = x18208 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18272 = Fp(x18271.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18273 = x18271 - x18272;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18274 = x18273 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18275 = x18274 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18276 = x18209 + x18275;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18277 = x18276 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18278 = Fp(x18277.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18279 = x18277 - x18278;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18280 = x18279 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18281 = x18280 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18282 = x18210 + x18281;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18283 = x18282 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18284 = Fp(x18283.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18285 = x18283 - x18284;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18286 = x18285 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18287 = x18286 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18288 = x18211 + x18287;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18289 = x18288 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18290 = Fp(x18289.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18291 = x18289 - x18290;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18292 = x18291 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18293 = x18292 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18294 = x18212 + x18293;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18295 = x18294 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18296 = Fp(x18295.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18297 = x18295 - x18296;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18298 = x18297 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18299 = x18298 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18300 = x18213 + x18299;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18301 = x18300 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18302 = Fp(x18301.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18303 = x18301 - x18302;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18304 = x18303 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18305 = x18304 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18306 = x18214 + x18305;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18307 = x18306 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18308 = Fp(x18307.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18309 = x18307 - x18308;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18310 = x18309 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18311 = x18310 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18312 = x18215 + x18311;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18313 = x18312 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18314 = Fp(x18313.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18315 = x18313 - x18314;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18316 = x18315 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18317 = x18316 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18318 = x18216 + x18317;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18319 = x18318 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18320 = Fp(x18319.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18321 = x18319 - x18320;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18322 = x18321 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18323 = x18322 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18324 = x18217 + x18323;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18325 = x18324 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18326 = Fp(x18325.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18327 = x18325 - x18326;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18328 = x18327 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18329 = x18328 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18330 = x18218 + x18329;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18331 = x18330 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18332 = Fp(x18331.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18333 = x18331 - x18332;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18334 = x18333 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18335 = x18334 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18336 = x18219 + x18335;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18337 = x18336 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18338 = Fp(x18337.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18339 = x18337 - x18338;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18340 = x18339 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18341 = x18340 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18342 = x18220 + x18341;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18343 = x18342 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18344 = Fp(x18343.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18345 = x18343 - x18344;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18346 = x18345 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18347 = x18346 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18348 = x18221 + x18347;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18349 = x18348 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18350 = Fp(x18349.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18351 = x18349 - x18350;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18352 = x18351 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18353 = x18352 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18354 = x18222 + x18353;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18355 = x18354 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18356 = Fp(x18355.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18357 = x18355 - x18356;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18358 = x18357 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18359 = x18358 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18360 = x18223 + x18359;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18361 = x18360 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18362 = Fp(x18361.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18363 = x18361 - x18362;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18364 = x18363 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18365 = x18364 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18366 = x18224 + x18365;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18367 = x18366 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18368 = Fp(x18367.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18369 = x18367 - x18368;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18370 = x18369 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18371 = x18370 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18372 = x18225 + x18371;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18373 = x18372 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18374 = Fp(x18373.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18375 = x18373 - x18374;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18376 = x18375 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18377 = x18376 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18378 = x18226 + x18377;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18379 = x18378 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18380 = Fp(x18379.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18381 = x18379 - x18380;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18382 = x18381 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18383 = x18382 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18384 = x18227 + x18383;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18385 = x18384 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18386 = Fp(x18385.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18387 = x18385 - x18386;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18388 = x18387 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18389 = x18388 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18390 = x18228 + x18389;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18391 = x18390 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18392 = Fp(x18391.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18393 = x18391 - x18392;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18394 = x18393 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18395 = x18394 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18396 = x18229 + x18395;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18397 = x18396 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18398 = Fp(x18397.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18399 = x18397 - x18398;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18400 = x18399 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18401 = x18400 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18402 = x18230 + x18401;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18403 = x18402 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18404 = Fp(x18403.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18405 = x18403 - x18404;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18406 = x18405 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18407 = x18406 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18408 = x18231 + x18407;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18409 = x18408 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18410 = Fp(x18409.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18411 = x18409 - x18410;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18412 = x18411 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18413 = x18412 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18414 = x18232 + x18413;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18415 = x18414 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18416 = Fp(x18415.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18417 = x18415 - x18416;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18418 = x18417 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18419 = x18418 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18420 = x18233 + x18419;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18421 = x18420 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18422 = Fp(x18421.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18423 = x18421 - x18422;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18424 = x18423 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18425 = x18424 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18426 = x18234 + x18425;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18427 = x18426 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18428 = Fp(x18427.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18429 = x18427 - x18428;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18430 = x18429 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18431 = x18430 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18432 = x18235 + x18431;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18433 = x18432 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18434 = Fp(x18433.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18435 = x18433 - x18434;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18436 = x18435 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18437 = x18436 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18438 = x18236 + x18437;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18439 = x18438 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18440 = Fp(x18439.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18441 = x18439 - x18440;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18442 = x18441 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18443 = x18442 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18444 = x18237 + x18443;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18445 = x18444 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18446 = Fp(x18445.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18447 = x18445 - x18446;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18448 = x18447 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18449 = x18448 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18450 = x18238 + x18449;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18451 = x18450 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18452 = Fp(x18451.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18453 = x18451 - x18452;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18454 = x18453 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18455 = x18454 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18456 = x18239 + x18455;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18457 = x18456 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18458 = Fp(x18457.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18459 = x18457 - x18458;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18460 = x18459 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18461 = x18460 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18462 = x18240 + x18461;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18463 = x18462 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18464 = Fp(x18463.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18465 = x18463 - x18464;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18466 = x18465 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18467 = x18466 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18468 = x18241 + x18467;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18469 = x18468 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18470 = Fp(x18469.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18471 = x18469 - x18470;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18472 = x18471 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18473 = x18472 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18474 = x18242 + x18473;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18475 = x18474 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18476 = Fp(x18475.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18477 = x18475 - x18476;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18478 = x18477 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18479 = x18478 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18480 = x18243 + x18479;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18481 = x18480 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18482 = Fp(x18481.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18483 = x18481 - x18482;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18484 = x18483 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18485 = x18484 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18486 = x18244 + x18485;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18487 = x18486 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18488 = Fp(x18487.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18489 = x18487 - x18488;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18490 = x18489 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18491 = x18490 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18492 = x18245 + x18491;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18493 = x18492 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18494 = Fp(x18493.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18495 = x18493 - x18494;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18496 = x18495 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18497 = x18496 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18498 = x18246 + x18497;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18499 = x18498 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18500 = Fp(x18499.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18501 = x18499 - x18500;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18502 = x18501 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18503 = x18502 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18504 = x18247 + x18503;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18505 = x18504 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18506 = Fp(x18505.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18507 = x18505 - x18506;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18508 = x18507 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18509 = x18508 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18510 = x18248 + x18509;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18511 = x18510 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18512 = Fp(x18511.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18513 = x18511 - x18512;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18514 = x18513 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18515 = x18514 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18516 = x18249 + x18515;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18517 = x18516 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18518 = Fp(x18517.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18519 = x18517 - x18518;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18520 = x18519 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18521 = x18520 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18522 = x18250 + x18521;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18523 = x18522 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18524 = Fp(x18523.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18525 = x18523 - x18524;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18526 = x18525 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18527 = x18526 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18528 = x18251 + x18527;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18529 = x18528 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18530 = Fp(x18529.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18531 = x18529 - x18530;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18532 = x18531 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18533 = x18532 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18534 = x18252 + x18533;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18535 = x18534 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18536 = Fp(x18535.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18537 = x18535 - x18536;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18538 = x18537 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18539 = x18538 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18540 = x18253 + x18539;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18541 = x18540 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18542 = Fp(x18541.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18543 = x18541 - x18542;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18544 = x18543 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18545 = x18544 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18546 = x18254 + x18545;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18547 = x18546 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18548 = Fp(x18547.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18549 = x18547 - x18548;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18550 = x18549 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18551 = x18550 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18552 = x18255 + x18551;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18553 = x18552 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18554 = Fp(x18553.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18555 = x18553 - x18554;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18556 = x18555 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18557 = x18556 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18558 = x18256 + x18557;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18559 = x18558 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18560 = Fp(x18559.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18561 = x18559 - x18560;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18562 = x18561 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18563 = x18562 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18564 = x18257 + x18563;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18565 = x18564 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18566 = Fp(x18565.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18567 = x18565 - x18566;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18568 = x18567 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18569 = x18568 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18570 = x18258 + x18569;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18571 = x18570 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18572 = Fp(x18571.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18573 = x18571 - x18572;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18574 = x18573 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18575 = x18574 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18576 = x18259 + x18575;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18577 = x18576 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18578 = Fp(x18577.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18579 = x18577 - x18578;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18580 = x18579 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18581 = x18580 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18582 = x18260 + x18581;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18583 = x18582 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18584 = Fp(x18583.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18585 = x18583 - x18584;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18586 = x18585 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18587 = x18586 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18588 = x18261 + x18587;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18589 = x18588 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18590 = Fp(x18589.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18591 = x18589 - x18590;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18592 = x18591 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18593 = x18592 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18594 = x18262 + x18593;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18595 = x18594 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18596 = Fp(x18595.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18597 = x18595 - x18596;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18598 = x18597 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18599 = x18598 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18600 = x18263 + x18599;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18601 = x18600 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18602 = Fp(x18601.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18603 = x18601 - x18602;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18604 = x18603 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18605 = x18604 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18606 = x18264 + x18605;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18607 = x18606 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18608 = Fp(x18607.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18609 = x18607 - x18608;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18610 = x18609 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18611 = x18610 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18612 = x18265 + x18611;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18613 = x18612 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18614 = Fp(x18613.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18615 = x18613 - x18614;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18616 = x18615 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18617 = x18616 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18618 = x18266 + x18617;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18619 = x18618 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18620 = Fp(x18619.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18621 = x18619 - x18620;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18622 = x18621 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18623 = x18622 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18624 = x18267 + x18623;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18625 = x18624 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18626 = Fp(x18625.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18627 = x18625 - x18626;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18628 = x18627 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18629 = x18628 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18630 = x18268 + x18629;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18631 = x18630 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18632 = Fp(x18631.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18633 = x18631 - x18632;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18634 = x18633 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18635 = x18634 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18636 = x18269 + x18635;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18637 = x18636 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18638 = Fp(x18637.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18639 = x18637 - x18638;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18640 = x18639 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18641 = x18640 - x12;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18642 = x18270 + x18641;
        // loc("zirgen/circuit/rv32im/bigint.cpp":128:15)
        auto x18643 = x18642 + x2;
        // loc("zirgen/circuit/rv32im/bigint.cpp":129:16)
        auto x18644 = Fp(x18643.asUInt32() & x92.asUInt32());
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:15)
        auto x18645 = x18643 - x18644;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:14)
        auto x18646 = x18645 * x90;
        // loc("zirgen/circuit/rv32im/bigint.cpp":130:13)
        auto x18647 = x18646 - x12;
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][18 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18648 = Fp(x16191.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18648);
                reg = x18648;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18649 = Fp(x16207.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18649);
                reg = x18649;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18650 = x18275 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18651 = Fp(x18650.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18652 = Fp(x18651.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18652);
                reg = x18652;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18653 = x18323 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18654 = Fp(x18653.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18655 = Fp(x18654.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18655);
                reg = x18655;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18656 = x18371 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18657 = Fp(x18656.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18658 = Fp(x18657.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18658);
                reg = x18658;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18659 = x18419 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18660 = Fp(x18659.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18661 = Fp(x18660.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18661);
                reg = x18661;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18662 = Fp(x18272.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18662);
                reg = x18662;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18663 = Fp(x18368.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][18 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18663);
                reg = x18663;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][19 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18664 = Fp(x16192.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18664);
                reg = x18664;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18665 = Fp(x16208.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18665);
                reg = x18665;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18666 = x18275 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18667 = Fp(x18666.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18668 = x18667 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18669 = Fp(x18668.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18669);
                reg = x18669;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18670 = x18323 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18671 = Fp(x18670.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18672 = x18671 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18673 = Fp(x18672.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18673);
                reg = x18673;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18674 = x18371 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18675 = Fp(x18674.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18676 = x18675 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18677 = Fp(x18676.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18677);
                reg = x18677;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18678 = x18419 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18679 = Fp(x18678.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18680 = x18679 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18681 = Fp(x18680.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18681);
                reg = x18681;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18682 = Fp(x18278.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18682);
                reg = x18682;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18683 = Fp(x18374.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][19 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18683);
                reg = x18683;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][20 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18684 = Fp(x16193.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18684);
                reg = x18684;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18685 = Fp(x16209.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18685);
                reg = x18685;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18686 = x18281 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18687 = Fp(x18686.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18688 = Fp(x18687.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18688);
                reg = x18688;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18689 = x18329 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18690 = Fp(x18689.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18691 = Fp(x18690.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18691);
                reg = x18691;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18692 = x18377 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18693 = Fp(x18692.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18694 = Fp(x18693.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18694);
                reg = x18694;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18695 = x18425 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18696 = Fp(x18695.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18697 = Fp(x18696.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18697);
                reg = x18697;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18698 = Fp(x18284.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18698);
                reg = x18698;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18699 = Fp(x18380.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][20 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18699);
                reg = x18699;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][21 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18700 = Fp(x16194.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18700);
                reg = x18700;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18701 = Fp(x16210.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18701);
                reg = x18701;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18702 = x18281 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18703 = Fp(x18702.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18704 = x18703 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18705 = Fp(x18704.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18705);
                reg = x18705;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18706 = x18329 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18707 = Fp(x18706.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18708 = x18707 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18709 = Fp(x18708.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18709);
                reg = x18709;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18710 = x18377 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18711 = Fp(x18710.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18712 = x18711 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18713 = Fp(x18712.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18713);
                reg = x18713;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18714 = x18425 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18715 = Fp(x18714.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18716 = x18715 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18717 = Fp(x18716.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18717);
                reg = x18717;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18718 = Fp(x18290.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18718);
                reg = x18718;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18719 = Fp(x18386.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][21 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18719);
                reg = x18719;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][22 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18720 = Fp(x16195.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18720);
                reg = x18720;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18721 = Fp(x16211.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18721);
                reg = x18721;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18722 = x18287 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18723 = Fp(x18722.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18724 = Fp(x18723.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18724);
                reg = x18724;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18725 = x18335 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18726 = Fp(x18725.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18727 = Fp(x18726.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18727);
                reg = x18727;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18728 = x18383 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18729 = Fp(x18728.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18730 = Fp(x18729.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18730);
                reg = x18730;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18731 = x18431 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18732 = Fp(x18731.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18733 = Fp(x18732.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18733);
                reg = x18733;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18734 = Fp(x18296.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18734);
                reg = x18734;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18735 = Fp(x18392.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][22 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18735);
                reg = x18735;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][23 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18736 = Fp(x16196.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18736);
                reg = x18736;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18737 = Fp(x16212.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18737);
                reg = x18737;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18738 = x18287 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18739 = Fp(x18738.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18740 = x18739 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18741 = Fp(x18740.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18741);
                reg = x18741;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18742 = x18335 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18743 = Fp(x18742.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18744 = x18743 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18745 = Fp(x18744.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18745);
                reg = x18745;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18746 = x18383 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18747 = Fp(x18746.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18748 = x18747 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18749 = Fp(x18748.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18749);
                reg = x18749;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18750 = x18431 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18751 = Fp(x18750.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18752 = x18751 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18753 = Fp(x18752.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18753);
                reg = x18753;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18754 = Fp(x18302.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18754);
                reg = x18754;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18755 = Fp(x18398.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][23 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18755);
                reg = x18755;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][24 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18756 = Fp(x16197.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18756);
                reg = x18756;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18757 = Fp(x16213.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18757);
                reg = x18757;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18758 = x18293 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18759 = Fp(x18758.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18760 = Fp(x18759.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18760);
                reg = x18760;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18761 = x18341 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18762 = Fp(x18761.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18763 = Fp(x18762.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18763);
                reg = x18763;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18764 = x18389 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18765 = Fp(x18764.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18766 = Fp(x18765.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18766);
                reg = x18766;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18767 = x18437 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18768 = Fp(x18767.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18769 = Fp(x18768.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18769);
                reg = x18769;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18770 = Fp(x18308.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18770);
                reg = x18770;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18771 = Fp(x18404.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][24 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18771);
                reg = x18771;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][25 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18772 = Fp(x16198.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18772);
                reg = x18772;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18773 = Fp(x16214.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18773);
                reg = x18773;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18774 = x18293 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18775 = Fp(x18774.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18776 = x18775 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18777 = Fp(x18776.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18777);
                reg = x18777;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18778 = x18341 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18779 = Fp(x18778.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18780 = x18779 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18781 = Fp(x18780.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18781);
                reg = x18781;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18782 = x18389 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18783 = Fp(x18782.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18784 = x18783 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18785 = Fp(x18784.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18785);
                reg = x18785;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18786 = x18437 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18787 = Fp(x18786.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18788 = x18787 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18789 = Fp(x18788.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18789);
                reg = x18789;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18790 = Fp(x18314.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18790);
                reg = x18790;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18791 = Fp(x18410.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][25 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18791);
                reg = x18791;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][26 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18792 = Fp(x16199.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18792);
                reg = x18792;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18793 = Fp(x16215.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18793);
                reg = x18793;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18794 = x18299 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18795 = Fp(x18794.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18796 = Fp(x18795.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18796);
                reg = x18796;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18797 = x18347 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18798 = Fp(x18797.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18799 = Fp(x18798.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18799);
                reg = x18799;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18800 = x18395 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18801 = Fp(x18800.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18802 = Fp(x18801.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18802);
                reg = x18802;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18803 = x18443 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18804 = Fp(x18803.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18805 = Fp(x18804.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18805);
                reg = x18805;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18806 = Fp(x18320.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18806);
                reg = x18806;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18807 = Fp(x18416.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][26 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18807);
                reg = x18807;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][27 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18808 = Fp(x16200.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18808);
                reg = x18808;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18809 = Fp(x16216.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18809);
                reg = x18809;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18810 = x18299 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18811 = Fp(x18810.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18812 = x18811 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18813 = Fp(x18812.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18813);
                reg = x18813;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18814 = x18347 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18815 = Fp(x18814.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18816 = x18815 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18817 = Fp(x18816.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18817);
                reg = x18817;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18818 = x18395 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18819 = Fp(x18818.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18820 = x18819 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18821 = Fp(x18820.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18821);
                reg = x18821;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18822 = x18443 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18823 = Fp(x18822.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18824 = x18823 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18825 = Fp(x18824.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18825);
                reg = x18825;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18826 = Fp(x18326.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18826);
                reg = x18826;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18827 = Fp(x18422.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][27 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18827);
                reg = x18827;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][28 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18828 = Fp(x16201.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18828);
                reg = x18828;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18829 = Fp(x16217.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18829);
                reg = x18829;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18830 = x18305 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18831 = Fp(x18830.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18832 = Fp(x18831.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18832);
                reg = x18832;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18833 = x18353 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18834 = Fp(x18833.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18835 = Fp(x18834.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18835);
                reg = x18835;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18836 = x18401 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18837 = Fp(x18836.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18838 = Fp(x18837.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18838);
                reg = x18838;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18839 = x18449 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18840 = Fp(x18839.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18841 = Fp(x18840.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18841);
                reg = x18841;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18842 = Fp(x18332.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18842);
                reg = x18842;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18843 = Fp(x18428.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][28 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18843);
                reg = x18843;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][29 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18844 = Fp(x16202.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18844);
                reg = x18844;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18845 = Fp(x16218.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18845);
                reg = x18845;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18846 = x18305 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18847 = Fp(x18846.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18848 = x18847 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18849 = Fp(x18848.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18849);
                reg = x18849;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18850 = x18353 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18851 = Fp(x18850.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18852 = x18851 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18853 = Fp(x18852.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18853);
                reg = x18853;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18854 = x18401 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18855 = Fp(x18854.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18856 = x18855 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18857 = Fp(x18856.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18857);
                reg = x18857;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18858 = x18449 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18859 = Fp(x18858.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18860 = x18859 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18861 = Fp(x18860.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18861);
                reg = x18861;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18862 = Fp(x18338.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18862);
                reg = x18862;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18863 = Fp(x18434.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][29 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18863);
                reg = x18863;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][30 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18864 = Fp(x16203.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18864);
                reg = x18864;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18865 = Fp(x16219.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18865);
                reg = x18865;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18866 = x18311 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18867 = Fp(x18866.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18868 = Fp(x18867.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18868);
                reg = x18868;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18869 = x18359 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18870 = Fp(x18869.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18871 = Fp(x18870.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18871);
                reg = x18871;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18872 = x18407 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18873 = Fp(x18872.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18874 = Fp(x18873.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18874);
                reg = x18874;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18875 = x18455 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18876 = Fp(x18875.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18877 = Fp(x18876.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18877);
                reg = x18877;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18878 = Fp(x18344.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18878);
                reg = x18878;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18879 = Fp(x18440.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][30 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18879);
                reg = x18879;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][31 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18880 = Fp(x16204.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18880);
                reg = x18880;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18881 = Fp(x16220.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18881);
                reg = x18881;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18882 = x18311 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18883 = Fp(x18882.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18884 = x18883 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18885 = Fp(x18884.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18885);
                reg = x18885;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18886 = x18359 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18887 = Fp(x18886.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18888 = x18887 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18889 = Fp(x18888.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18889);
                reg = x18889;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18890 = x18407 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18891 = Fp(x18890.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18892 = x18891 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18893 = Fp(x18892.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18893);
                reg = x18893;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18894 = x18455 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18895 = Fp(x18894.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18896 = x18895 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18897 = Fp(x18896.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18897);
                reg = x18897;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18898 = Fp(x18350.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18898);
                reg = x18898;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18899 = Fp(x18446.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][31 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18899);
                reg = x18899;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][32 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18900 = Fp(x16205.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18900);
                reg = x18900;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18901 = Fp(x16221.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18901);
                reg = x18901;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:31)
            auto x18902 = x18317 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":296:30)
            auto x18903 = Fp(x18902.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18904 = Fp(x18903.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18904);
                reg = x18904;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:31)
            auto x18905 = x18365 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":304:30)
            auto x18906 = Fp(x18905.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18907 = Fp(x18906.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18907);
                reg = x18907;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:31)
            auto x18908 = x18413 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":314:30)
            auto x18909 = Fp(x18908.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18910 = Fp(x18909.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18910);
                reg = x18910;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:31)
            auto x18911 = x18461 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":322:30)
            auto x18912 = Fp(x18911.asUInt32() & x92.asUInt32());
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18913 = Fp(x18912.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18913);
                reg = x18913;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18914 = Fp(x18356.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18914);
                reg = x18914;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18915 = Fp(x18452.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][32 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18915);
                reg = x18915;
              }
            }
          }
        }
        if (x13535 != 0) {
          {
            // loc("zirgen/components/bytes.cpp":96:12)
            {
              auto& reg = args[2][33 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13525 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18916 = Fp(x16206.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18916);
                reg = x18916;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18917 = Fp(x16222.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18917);
                reg = x18917;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:32)
            auto x18918 = x18317 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:31)
            auto x18919 = Fp(x18918.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":298:30)
            auto x18920 = x18919 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18921 = Fp(x18920.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18921);
                reg = x18921;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:32)
            auto x18922 = x18365 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:31)
            auto x18923 = Fp(x18922.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":306:30)
            auto x18924 = x18923 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18925 = Fp(x18924.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18925);
                reg = x18925;
              }
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:32)
            auto x18926 = x18413 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:31)
            auto x18927 = Fp(x18926.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":316:30)
            auto x18928 = x18927 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18929 = Fp(x18928.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18929);
                reg = x18929;
              }
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:32)
            auto x18930 = x18461 + x12;
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:31)
            auto x18931 = Fp(x18930.asUInt32() & x1.asUInt32());
            // loc("zirgen/circuit/rv32im/bigint.cpp":324:30)
            auto x18932 = x18931 * x90;
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18933 = Fp(x18932.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18933);
                reg = x18933;
              }
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18934 = Fp(x18362.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18934);
                reg = x18934;
              }
            }
          }
          if (x13522 != 0) {
            {
              // loc("zirgen/components/bytes.cpp":96:21)
              auto x18935 = Fp(x18458.asUInt32() & x92.asUInt32());
              // loc("zirgen/components/bytes.cpp":96:12)
              {
                auto& reg = args[2][33 * steps + cycle];
                assert(reg == Fp::invalid() || reg == x18935);
                reg = x18935;
              }
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18467);
              reg = x18467;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18515);
              reg = x18515;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18563);
              reg = x18563;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][212 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18611);
              reg = x18611;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18473);
              reg = x18473;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18521);
              reg = x18521;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18569);
              reg = x18569;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][213 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18617);
              reg = x18617;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18479);
              reg = x18479;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18527);
              reg = x18527;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18575);
              reg = x18575;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][214 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18623);
              reg = x18623;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18485);
              reg = x18485;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18533);
              reg = x18533;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18581);
              reg = x18581;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][215 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18629);
              reg = x18629;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18491);
              reg = x18491;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18539);
              reg = x18539;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18587);
              reg = x18587;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][216 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18635);
              reg = x18635;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18497);
              reg = x18497;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18545);
              reg = x18545;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18593);
              reg = x18593;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][217 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18641);
              reg = x18641;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18503);
              reg = x18503;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18551);
              reg = x18551;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18599);
              reg = x18599;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][218 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18647);
              reg = x18647;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":343:31)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18509);
              reg = x18509;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":344:27)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18557);
              reg = x18557;
            }
          }
        }
        if (x13528 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":348:11)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18605);
              reg = x18605;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":351:11)
            {
              auto& reg = args[2][219 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16223);
              reg = x16223;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17307);
              reg = x17307;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18208);
              reg = x18208;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][180 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18240);
              reg = x18240;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16226);
              reg = x16226;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17366);
              reg = x17366;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18209);
              reg = x18209;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][181 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18241);
              reg = x18241;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16231);
              reg = x16231;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17423);
              reg = x17423;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18210);
              reg = x18210;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][182 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18242);
              reg = x18242;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16238);
              reg = x16238;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17478);
              reg = x17478;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18211);
              reg = x18211;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][183 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18243);
              reg = x18243;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16247);
              reg = x16247;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17531);
              reg = x17531;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18212);
              reg = x18212;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][184 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18244);
              reg = x18244;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16258);
              reg = x16258;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17582);
              reg = x17582;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18213);
              reg = x18213;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][185 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18245);
              reg = x18245;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16271);
              reg = x16271;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17631);
              reg = x17631;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18214);
              reg = x18214;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][186 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18246);
              reg = x18246;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16286);
              reg = x16286;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17678);
              reg = x17678;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18215);
              reg = x18215;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][187 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18247);
              reg = x18247;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16303);
              reg = x16303;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17723);
              reg = x17723;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18216);
              reg = x18216;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][188 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18248);
              reg = x18248;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16322);
              reg = x16322;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17766);
              reg = x17766;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18217);
              reg = x18217;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][189 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18249);
              reg = x18249;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16343);
              reg = x16343;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17807);
              reg = x17807;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18218);
              reg = x18218;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][190 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18250);
              reg = x18250;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16366);
              reg = x16366;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17846);
              reg = x17846;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18219);
              reg = x18219;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][191 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18251);
              reg = x18251;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16391);
              reg = x16391;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17883);
              reg = x17883;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18220);
              reg = x18220;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][192 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18252);
              reg = x18252;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16418);
              reg = x16418;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17918);
              reg = x17918;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18221);
              reg = x18221;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][193 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18253);
              reg = x18253;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16447);
              reg = x16447;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17951);
              reg = x17951;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18222);
              reg = x18222;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][194 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18254);
              reg = x18254;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16478);
              reg = x16478;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17982);
              reg = x17982;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18223);
              reg = x18223;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][195 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18255);
              reg = x18255;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16511);
              reg = x16511;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18011);
              reg = x18011;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18224);
              reg = x18224;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][196 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18256);
              reg = x18256;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16546);
              reg = x16546;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18038);
              reg = x18038;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18225);
              reg = x18225;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][197 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18257);
              reg = x18257;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16583);
              reg = x16583;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18063);
              reg = x18063;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18226);
              reg = x18226;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][198 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18258);
              reg = x18258;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16622);
              reg = x16622;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18086);
              reg = x18086;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18227);
              reg = x18227;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][199 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18259);
              reg = x18259;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16663);
              reg = x16663;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18107);
              reg = x18107;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18228);
              reg = x18228;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][200 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18260);
              reg = x18260;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16706);
              reg = x16706;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18126);
              reg = x18126;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18229);
              reg = x18229;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][201 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18261);
              reg = x18261;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16751);
              reg = x16751;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18143);
              reg = x18143;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18230);
              reg = x18230;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][202 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18262);
              reg = x18262;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16798);
              reg = x16798;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18158);
              reg = x18158;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18231);
              reg = x18231;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][203 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18263);
              reg = x18263;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16847);
              reg = x16847;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18171);
              reg = x18171;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18232);
              reg = x18232;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][204 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18264);
              reg = x18264;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16898);
              reg = x16898;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18182);
              reg = x18182;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18233);
              reg = x18233;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][205 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18265);
              reg = x18265;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x16951);
              reg = x16951;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18191);
              reg = x18191;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18234);
              reg = x18234;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][206 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18266);
              reg = x18266;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17006);
              reg = x17006;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18198);
              reg = x18198;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18235);
              reg = x18235;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][207 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18267);
              reg = x18267;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17063);
              reg = x17063;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18203);
              reg = x18203;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18236);
              reg = x18236;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][208 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18268);
              reg = x18268;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17122);
              reg = x17122;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18206);
              reg = x18206;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18237);
              reg = x18237;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][209 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18269);
              reg = x18269;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17183);
              reg = x17183;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18207);
              reg = x18207;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18238);
              reg = x18238;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][210 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18270);
              reg = x18270;
            }
          }
        }
        if (x13519 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":360:31)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x17246);
              reg = x17246;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":361:27)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
        if (x13520 != 0) {
          if (x13568 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":364:31)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x18239);
              reg = x18239;
            }
          }
          if (x13522 != 0) {
            // loc("zirgen/circuit/rv32im/bigint.cpp":365:27)
            {
              auto& reg = args[2][211 * steps + cycle];
              assert(reg == Fp::invalid() || reg == x95);
              reg = x95;
            }
          }
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18936 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x18936 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18936);
          reg = x18936;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18937 = args[2][119 * steps + ((cycle - 2) & mask)];
        assert(x18937 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][180 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18937);
          reg = x18937;
        }
      }
      // loc("zirgen/circuit/rv32im/bigint.cpp":379:35)
      auto x18938 = x13525 + x13528;
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18939 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x18939 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][196 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18939);
          reg = x18939;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18940 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x18940 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18940);
          reg = x18940;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18941 = args[2][120 * steps + ((cycle - 2) & mask)];
        assert(x18941 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][181 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18941);
          reg = x18941;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18942 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x18942 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][197 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18942);
          reg = x18942;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18943 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x18943 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18943);
          reg = x18943;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18944 = args[2][121 * steps + ((cycle - 2) & mask)];
        assert(x18944 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][182 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18944);
          reg = x18944;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18945 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x18945 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][198 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18945);
          reg = x18945;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18946 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x18946 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18946);
          reg = x18946;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18947 = args[2][122 * steps + ((cycle - 2) & mask)];
        assert(x18947 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][183 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18947);
          reg = x18947;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18948 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x18948 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][199 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18948);
          reg = x18948;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18949 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x18949 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18949);
          reg = x18949;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18950 = args[2][126 * steps + ((cycle - 2) & mask)];
        assert(x18950 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][184 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18950);
          reg = x18950;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18951 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x18951 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][200 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18951);
          reg = x18951;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18952 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x18952 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18952);
          reg = x18952;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18953 = args[2][127 * steps + ((cycle - 2) & mask)];
        assert(x18953 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][185 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18953);
          reg = x18953;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18954 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x18954 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][201 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18954);
          reg = x18954;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18955 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x18955 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18955);
          reg = x18955;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18956 = args[2][128 * steps + ((cycle - 2) & mask)];
        assert(x18956 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][186 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18956);
          reg = x18956;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18957 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x18957 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][202 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18957);
          reg = x18957;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18958 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x18958 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18958);
          reg = x18958;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18959 = args[2][129 * steps + ((cycle - 2) & mask)];
        assert(x18959 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][187 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18959);
          reg = x18959;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18960 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x18960 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][203 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18960);
          reg = x18960;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18961 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x18961 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18961);
          reg = x18961;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18962 = args[2][133 * steps + ((cycle - 2) & mask)];
        assert(x18962 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][188 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18962);
          reg = x18962;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18963 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x18963 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][204 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18963);
          reg = x18963;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18964 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x18964 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18964);
          reg = x18964;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18965 = args[2][134 * steps + ((cycle - 2) & mask)];
        assert(x18965 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][189 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18965);
          reg = x18965;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18966 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x18966 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][205 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18966);
          reg = x18966;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18967 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x18967 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18967);
          reg = x18967;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18968 = args[2][135 * steps + ((cycle - 2) & mask)];
        assert(x18968 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][190 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18968);
          reg = x18968;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18969 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x18969 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][206 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18969);
          reg = x18969;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18970 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x18970 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18970);
          reg = x18970;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18971 = args[2][136 * steps + ((cycle - 2) & mask)];
        assert(x18971 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][191 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18971);
          reg = x18971;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18972 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x18972 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][207 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18972);
          reg = x18972;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18973 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x18973 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18973);
          reg = x18973;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18974 = args[2][140 * steps + ((cycle - 2) & mask)];
        assert(x18974 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][192 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18974);
          reg = x18974;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18975 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x18975 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][208 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18975);
          reg = x18975;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18976 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x18976 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18976);
          reg = x18976;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18977 = args[2][141 * steps + ((cycle - 2) & mask)];
        assert(x18977 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][193 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18977);
          reg = x18977;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18978 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x18978 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][209 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18978);
          reg = x18978;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18979 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x18979 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18979);
          reg = x18979;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18980 = args[2][142 * steps + ((cycle - 2) & mask)];
        assert(x18980 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][194 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18980);
          reg = x18980;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18981 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x18981 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][210 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18981);
          reg = x18981;
        }
      }
      if (x13525 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18982 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x18982 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":373:24)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18982);
          reg = x18982;
        }
      }
      if (x13528 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18983 = args[2][143 * steps + ((cycle - 2) & mask)];
        assert(x18983 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":376:7)
        {
          auto& reg = args[2][195 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18983);
          reg = x18983;
        }
      }
      if (x18938 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x18984 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x18984 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":380:7)
        {
          auto& reg = args[2][211 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x18984);
          reg = x18984;
        }
      }
      if (x13534 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18985 = args[2][18 * steps + ((cycle - 5) & mask)];
        assert(x18985 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18986 = args[2][19 * steps + ((cycle - 5) & mask)];
        assert(x18986 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18987 = x18986 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18988 = x18985 + x18987;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18989 = x18988 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18990 = args[2][18 * steps + ((cycle - 1) & mask)];
        assert(x18990 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x18991 = args[2][180 * steps + ((cycle - 1) & mask)];
        assert(x18991 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18992 = x18989 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x18993 = x18992 + x18990;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x18994 = x18991 - x18993;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x18994 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18995 = args[2][20 * steps + ((cycle - 5) & mask)];
        assert(x18995 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x18996 = args[2][21 * steps + ((cycle - 5) & mask)];
        assert(x18996 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x18997 = x18996 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x18998 = x18995 + x18997;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x18999 = x18998 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19000 = args[2][19 * steps + ((cycle - 1) & mask)];
        assert(x19000 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19001 = args[2][181 * steps + ((cycle - 1) & mask)];
        assert(x19001 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19002 = x19001 + x18989;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19003 = x18999 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19004 = x19003 + x19000;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19005 = x19002 - x19004;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19005 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19006 = args[2][22 * steps + ((cycle - 5) & mask)];
        assert(x19006 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19007 = args[2][23 * steps + ((cycle - 5) & mask)];
        assert(x19007 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19008 = x19007 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19009 = x19006 + x19008;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19010 = x19009 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19011 = args[2][20 * steps + ((cycle - 1) & mask)];
        assert(x19011 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19012 = args[2][182 * steps + ((cycle - 1) & mask)];
        assert(x19012 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19013 = x19012 + x18999;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19014 = x19010 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19015 = x19014 + x19011;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19016 = x19013 - x19015;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19016 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19017 = args[2][24 * steps + ((cycle - 5) & mask)];
        assert(x19017 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19018 = args[2][25 * steps + ((cycle - 5) & mask)];
        assert(x19018 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19019 = x19018 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19020 = x19017 + x19019;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19021 = x19020 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19022 = args[2][21 * steps + ((cycle - 1) & mask)];
        assert(x19022 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19023 = args[2][183 * steps + ((cycle - 1) & mask)];
        assert(x19023 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19024 = x19023 + x19010;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19025 = x19021 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19026 = x19025 + x19022;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19027 = x19024 - x19026;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19027 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19028 = args[2][26 * steps + ((cycle - 5) & mask)];
        assert(x19028 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19029 = args[2][27 * steps + ((cycle - 5) & mask)];
        assert(x19029 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19030 = x19029 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19031 = x19028 + x19030;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19032 = x19031 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19033 = args[2][22 * steps + ((cycle - 1) & mask)];
        assert(x19033 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19034 = args[2][184 * steps + ((cycle - 1) & mask)];
        assert(x19034 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19035 = x19034 + x19021;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19036 = x19032 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19037 = x19036 + x19033;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19038 = x19035 - x19037;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19038 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19039 = args[2][28 * steps + ((cycle - 5) & mask)];
        assert(x19039 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19040 = args[2][29 * steps + ((cycle - 5) & mask)];
        assert(x19040 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19041 = x19040 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19042 = x19039 + x19041;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19043 = x19042 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19044 = args[2][23 * steps + ((cycle - 1) & mask)];
        assert(x19044 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19045 = args[2][185 * steps + ((cycle - 1) & mask)];
        assert(x19045 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19046 = x19045 + x19032;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19047 = x19043 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19048 = x19047 + x19044;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19049 = x19046 - x19048;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19049 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19050 = args[2][30 * steps + ((cycle - 5) & mask)];
        assert(x19050 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19051 = args[2][31 * steps + ((cycle - 5) & mask)];
        assert(x19051 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19052 = x19051 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19053 = x19050 + x19052;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19054 = x19053 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19055 = args[2][24 * steps + ((cycle - 1) & mask)];
        assert(x19055 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19056 = args[2][186 * steps + ((cycle - 1) & mask)];
        assert(x19056 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19057 = x19056 + x19043;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19058 = x19054 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19059 = x19058 + x19055;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19060 = x19057 - x19059;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19060 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19061 = args[2][32 * steps + ((cycle - 5) & mask)];
        assert(x19061 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19062 = args[2][33 * steps + ((cycle - 5) & mask)];
        assert(x19062 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19063 = x19062 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19064 = x19061 + x19063;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19065 = x19064 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19066 = args[2][25 * steps + ((cycle - 1) & mask)];
        assert(x19066 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19067 = args[2][187 * steps + ((cycle - 1) & mask)];
        assert(x19067 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19068 = x19067 + x19054;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19069 = x19065 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19070 = x19069 + x19066;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19071 = x19068 - x19070;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19071 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19072 = args[2][18 * steps + ((cycle - 4) & mask)];
        assert(x19072 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19073 = args[2][19 * steps + ((cycle - 4) & mask)];
        assert(x19073 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19074 = x19073 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19075 = x19072 + x19074;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19076 = x19075 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19077 = args[2][26 * steps + ((cycle - 1) & mask)];
        assert(x19077 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19078 = args[2][188 * steps + ((cycle - 1) & mask)];
        assert(x19078 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19079 = x19078 + x19065;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19080 = x19076 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19081 = x19080 + x19077;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19082 = x19079 - x19081;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19082 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19083 = args[2][20 * steps + ((cycle - 4) & mask)];
        assert(x19083 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19084 = args[2][21 * steps + ((cycle - 4) & mask)];
        assert(x19084 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19085 = x19084 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19086 = x19083 + x19085;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19087 = x19086 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19088 = args[2][27 * steps + ((cycle - 1) & mask)];
        assert(x19088 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19089 = args[2][189 * steps + ((cycle - 1) & mask)];
        assert(x19089 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19090 = x19089 + x19076;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19091 = x19087 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19092 = x19091 + x19088;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19093 = x19090 - x19092;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19093 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19094 = args[2][22 * steps + ((cycle - 4) & mask)];
        assert(x19094 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19095 = args[2][23 * steps + ((cycle - 4) & mask)];
        assert(x19095 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19096 = x19095 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19097 = x19094 + x19096;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19098 = x19097 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19099 = args[2][28 * steps + ((cycle - 1) & mask)];
        assert(x19099 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19100 = args[2][190 * steps + ((cycle - 1) & mask)];
        assert(x19100 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19101 = x19100 + x19087;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19102 = x19098 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19103 = x19102 + x19099;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19104 = x19101 - x19103;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19104 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19105 = args[2][24 * steps + ((cycle - 4) & mask)];
        assert(x19105 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19106 = args[2][25 * steps + ((cycle - 4) & mask)];
        assert(x19106 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19107 = x19106 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19108 = x19105 + x19107;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19109 = x19108 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19110 = args[2][29 * steps + ((cycle - 1) & mask)];
        assert(x19110 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19111 = args[2][191 * steps + ((cycle - 1) & mask)];
        assert(x19111 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19112 = x19111 + x19098;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19113 = x19109 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19114 = x19113 + x19110;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19115 = x19112 - x19114;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19115 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19116 = args[2][26 * steps + ((cycle - 4) & mask)];
        assert(x19116 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19117 = args[2][27 * steps + ((cycle - 4) & mask)];
        assert(x19117 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19118 = x19117 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19119 = x19116 + x19118;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19120 = x19119 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19121 = args[2][30 * steps + ((cycle - 1) & mask)];
        assert(x19121 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19122 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x19122 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19123 = x19122 + x19109;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19124 = x19120 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19125 = x19124 + x19121;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19126 = x19123 - x19125;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19126 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19127 = args[2][28 * steps + ((cycle - 4) & mask)];
        assert(x19127 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19128 = args[2][29 * steps + ((cycle - 4) & mask)];
        assert(x19128 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19129 = x19128 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19130 = x19127 + x19129;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19131 = x19130 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19132 = args[2][31 * steps + ((cycle - 1) & mask)];
        assert(x19132 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19133 = args[2][193 * steps + ((cycle - 1) & mask)];
        assert(x19133 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19134 = x19133 + x19120;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19135 = x19131 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19136 = x19135 + x19132;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19137 = x19134 - x19136;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19137 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19138 = args[2][30 * steps + ((cycle - 4) & mask)];
        assert(x19138 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19139 = args[2][31 * steps + ((cycle - 4) & mask)];
        assert(x19139 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19140 = x19139 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19141 = x19138 + x19140;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19142 = x19141 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19143 = args[2][32 * steps + ((cycle - 1) & mask)];
        assert(x19143 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19144 = args[2][194 * steps + ((cycle - 1) & mask)];
        assert(x19144 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19145 = x19144 + x19131;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19146 = x19142 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19147 = x19146 + x19143;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19148 = x19145 - x19147;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19148 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19149 = args[2][32 * steps + ((cycle - 4) & mask)];
        assert(x19149 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19150 = args[2][33 * steps + ((cycle - 4) & mask)];
        assert(x19150 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19151 = x19150 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19152 = x19149 + x19151;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19153 = x19152 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19154 = args[2][33 * steps + ((cycle - 1) & mask)];
        assert(x19154 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19155 = args[2][195 * steps + ((cycle - 1) & mask)];
        assert(x19155 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19156 = x19155 + x19142;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19157 = x19153 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19158 = x19157 + x19154;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19159 = x19156 - x19158;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19159 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19160 = args[2][18 * steps + ((cycle - 3) & mask)];
        assert(x19160 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19161 = args[2][19 * steps + ((cycle - 3) & mask)];
        assert(x19161 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19162 = x19161 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19163 = x19160 + x19162;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19164 = x19163 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19165 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x19165 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19166 = args[2][196 * steps + ((cycle - 1) & mask)];
        assert(x19166 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19167 = x19166 + x19153;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19168 = x19164 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19169 = x19168 + x19165;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19170 = x19167 - x19169;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19170 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19171 = args[2][20 * steps + ((cycle - 3) & mask)];
        assert(x19171 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19172 = args[2][21 * steps + ((cycle - 3) & mask)];
        assert(x19172 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19173 = x19172 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19174 = x19171 + x19173;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19175 = x19174 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19176 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x19176 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19177 = args[2][197 * steps + ((cycle - 1) & mask)];
        assert(x19177 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19178 = x19177 + x19164;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19179 = x19175 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19180 = x19179 + x19176;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19181 = x19178 - x19180;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19181 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19182 = args[2][22 * steps + ((cycle - 3) & mask)];
        assert(x19182 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19183 = args[2][23 * steps + ((cycle - 3) & mask)];
        assert(x19183 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19184 = x19183 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19185 = x19182 + x19184;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19186 = x19185 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19187 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x19187 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19188 = args[2][198 * steps + ((cycle - 1) & mask)];
        assert(x19188 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19189 = x19188 + x19175;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19190 = x19186 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19191 = x19190 + x19187;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19192 = x19189 - x19191;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19192 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19193 = args[2][24 * steps + ((cycle - 3) & mask)];
        assert(x19193 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19194 = args[2][25 * steps + ((cycle - 3) & mask)];
        assert(x19194 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19195 = x19194 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19196 = x19193 + x19195;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19197 = x19196 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19198 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x19198 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19199 = args[2][199 * steps + ((cycle - 1) & mask)];
        assert(x19199 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19200 = x19199 + x19186;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19201 = x19197 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19202 = x19201 + x19198;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19203 = x19200 - x19202;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19203 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19204 = args[2][26 * steps + ((cycle - 3) & mask)];
        assert(x19204 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19205 = args[2][27 * steps + ((cycle - 3) & mask)];
        assert(x19205 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19206 = x19205 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19207 = x19204 + x19206;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19208 = x19207 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19209 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x19209 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19210 = args[2][200 * steps + ((cycle - 1) & mask)];
        assert(x19210 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19211 = x19210 + x19197;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19212 = x19208 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19213 = x19212 + x19209;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19214 = x19211 - x19213;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19214 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19215 = args[2][28 * steps + ((cycle - 3) & mask)];
        assert(x19215 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19216 = args[2][29 * steps + ((cycle - 3) & mask)];
        assert(x19216 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19217 = x19216 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19218 = x19215 + x19217;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19219 = x19218 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19220 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x19220 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19221 = args[2][201 * steps + ((cycle - 1) & mask)];
        assert(x19221 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19222 = x19221 + x19208;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19223 = x19219 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19224 = x19223 + x19220;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19225 = x19222 - x19224;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19225 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19226 = args[2][30 * steps + ((cycle - 3) & mask)];
        assert(x19226 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19227 = args[2][31 * steps + ((cycle - 3) & mask)];
        assert(x19227 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19228 = x19227 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19229 = x19226 + x19228;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19230 = x19229 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19231 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x19231 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19232 = args[2][202 * steps + ((cycle - 1) & mask)];
        assert(x19232 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19233 = x19232 + x19219;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19234 = x19230 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19235 = x19234 + x19231;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19236 = x19233 - x19235;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19236 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19237 = args[2][32 * steps + ((cycle - 3) & mask)];
        assert(x19237 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19238 = args[2][33 * steps + ((cycle - 3) & mask)];
        assert(x19238 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19239 = x19238 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19240 = x19237 + x19239;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19241 = x19240 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19242 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x19242 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19243 = args[2][203 * steps + ((cycle - 1) & mask)];
        assert(x19243 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19244 = x19243 + x19230;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19245 = x19241 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19246 = x19245 + x19242;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19247 = x19244 - x19246;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19247 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19248 = args[2][18 * steps + ((cycle - 2) & mask)];
        assert(x19248 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19249 = args[2][19 * steps + ((cycle - 2) & mask)];
        assert(x19249 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19250 = x19249 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19251 = x19248 + x19250;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19252 = x19251 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19253 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x19253 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19254 = args[2][204 * steps + ((cycle - 1) & mask)];
        assert(x19254 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19255 = x19254 + x19241;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19256 = x19252 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19257 = x19256 + x19253;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19258 = x19255 - x19257;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19258 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19259 = args[2][20 * steps + ((cycle - 2) & mask)];
        assert(x19259 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19260 = args[2][21 * steps + ((cycle - 2) & mask)];
        assert(x19260 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19261 = x19260 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19262 = x19259 + x19261;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19263 = x19262 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19264 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x19264 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19265 = args[2][205 * steps + ((cycle - 1) & mask)];
        assert(x19265 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19266 = x19265 + x19252;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19267 = x19263 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19268 = x19267 + x19264;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19269 = x19266 - x19268;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19269 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19270 = args[2][22 * steps + ((cycle - 2) & mask)];
        assert(x19270 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19271 = args[2][23 * steps + ((cycle - 2) & mask)];
        assert(x19271 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19272 = x19271 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19273 = x19270 + x19272;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19274 = x19273 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19275 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x19275 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19276 = args[2][206 * steps + ((cycle - 1) & mask)];
        assert(x19276 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19277 = x19276 + x19263;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19278 = x19274 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19279 = x19278 + x19275;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19280 = x19277 - x19279;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19280 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19281 = args[2][24 * steps + ((cycle - 2) & mask)];
        assert(x19281 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19282 = args[2][25 * steps + ((cycle - 2) & mask)];
        assert(x19282 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19283 = x19282 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19284 = x19281 + x19283;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19285 = x19284 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19286 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x19286 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19287 = args[2][207 * steps + ((cycle - 1) & mask)];
        assert(x19287 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19288 = x19287 + x19274;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19289 = x19285 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19290 = x19289 + x19286;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19291 = x19288 - x19290;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19291 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19292 = args[2][26 * steps + ((cycle - 2) & mask)];
        assert(x19292 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19293 = args[2][27 * steps + ((cycle - 2) & mask)];
        assert(x19293 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19294 = x19293 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19295 = x19292 + x19294;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19296 = x19295 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19297 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x19297 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19298 = args[2][208 * steps + ((cycle - 1) & mask)];
        assert(x19298 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19299 = x19298 + x19285;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19300 = x19296 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19301 = x19300 + x19297;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19302 = x19299 - x19301;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19302 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19303 = args[2][28 * steps + ((cycle - 2) & mask)];
        assert(x19303 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19304 = args[2][29 * steps + ((cycle - 2) & mask)];
        assert(x19304 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19305 = x19304 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19306 = x19303 + x19305;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19307 = x19306 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19308 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x19308 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19309 = args[2][209 * steps + ((cycle - 1) & mask)];
        assert(x19309 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19310 = x19309 + x19296;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19311 = x19307 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19312 = x19311 + x19308;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19313 = x19310 - x19312;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19313 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19314 = args[2][30 * steps + ((cycle - 2) & mask)];
        assert(x19314 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19315 = args[2][31 * steps + ((cycle - 2) & mask)];
        assert(x19315 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19316 = x19315 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19317 = x19314 + x19316;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19318 = x19317 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19319 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x19319 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19320 = args[2][210 * steps + ((cycle - 1) & mask)];
        assert(x19320 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19321 = x19320 + x19307;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19322 = x19318 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19323 = x19322 + x19319;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19324 = x19321 - x19323;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19324 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19325 = args[2][32 * steps + ((cycle - 2) & mask)];
        assert(x19325 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19326 = args[2][33 * steps + ((cycle - 2) & mask)];
        assert(x19326 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":405:67)
        auto x19327 = x19326 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:63)
        auto x19328 = x19325 + x19327;
        // loc("zirgen/circuit/rv32im/bigint.cpp":404:16)
        auto x19329 = x19328 - x12;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19330 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x19330 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19331 = args[2][211 * steps + ((cycle - 1) & mask)];
        assert(x19331 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19332 = x19331 + x19318;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19333 = x19329 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19334 = x19333 + x19330;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19335 = x19332 - x19334;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19335 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19336 = args[2][212 * steps + ((cycle - 5) & mask)];
        assert(x19336 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19337 = args[2][180 * steps + ((cycle - 0) & mask)];
        assert(x19337 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19338 = x19337 + x19329;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19339 = x19336 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19340 = x19338 - x19339;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19340 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19341 = args[2][213 * steps + ((cycle - 5) & mask)];
        assert(x19341 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19342 = args[2][181 * steps + ((cycle - 0) & mask)];
        assert(x19342 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19343 = x19342 + x19336;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19344 = x19341 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19345 = x19343 - x19344;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19345 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19346 = args[2][214 * steps + ((cycle - 5) & mask)];
        assert(x19346 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19347 = args[2][182 * steps + ((cycle - 0) & mask)];
        assert(x19347 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19348 = x19347 + x19341;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19349 = x19346 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19350 = x19348 - x19349;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19350 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19351 = args[2][215 * steps + ((cycle - 5) & mask)];
        assert(x19351 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19352 = args[2][183 * steps + ((cycle - 0) & mask)];
        assert(x19352 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19353 = x19352 + x19346;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19354 = x19351 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19355 = x19353 - x19354;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19355 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19356 = args[2][216 * steps + ((cycle - 5) & mask)];
        assert(x19356 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19357 = args[2][184 * steps + ((cycle - 0) & mask)];
        assert(x19357 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19358 = x19357 + x19351;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19359 = x19356 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19360 = x19358 - x19359;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19360 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19361 = args[2][217 * steps + ((cycle - 5) & mask)];
        assert(x19361 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19362 = args[2][185 * steps + ((cycle - 0) & mask)];
        assert(x19362 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19363 = x19362 + x19356;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19364 = x19361 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19365 = x19363 - x19364;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19365 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19366 = args[2][218 * steps + ((cycle - 5) & mask)];
        assert(x19366 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19367 = args[2][186 * steps + ((cycle - 0) & mask)];
        assert(x19367 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19368 = x19367 + x19361;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19369 = x19366 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19370 = x19368 - x19369;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19370 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19371 = args[2][219 * steps + ((cycle - 5) & mask)];
        assert(x19371 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19372 = args[2][187 * steps + ((cycle - 0) & mask)];
        assert(x19372 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19373 = x19372 + x19366;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19374 = x19371 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19375 = x19373 - x19374;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19375 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19376 = args[2][212 * steps + ((cycle - 4) & mask)];
        assert(x19376 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19377 = args[2][188 * steps + ((cycle - 0) & mask)];
        assert(x19377 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19378 = x19377 + x19371;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19379 = x19376 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19380 = x19378 - x19379;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19380 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19381 = args[2][213 * steps + ((cycle - 4) & mask)];
        assert(x19381 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19382 = args[2][189 * steps + ((cycle - 0) & mask)];
        assert(x19382 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19383 = x19382 + x19376;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19384 = x19381 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19385 = x19383 - x19384;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19385 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19386 = args[2][214 * steps + ((cycle - 4) & mask)];
        assert(x19386 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19387 = args[2][190 * steps + ((cycle - 0) & mask)];
        assert(x19387 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19388 = x19387 + x19381;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19389 = x19386 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19390 = x19388 - x19389;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19390 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19391 = args[2][215 * steps + ((cycle - 4) & mask)];
        assert(x19391 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19392 = args[2][191 * steps + ((cycle - 0) & mask)];
        assert(x19392 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19393 = x19392 + x19386;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19394 = x19391 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19395 = x19393 - x19394;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19395 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19396 = args[2][216 * steps + ((cycle - 4) & mask)];
        assert(x19396 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19397 = args[2][192 * steps + ((cycle - 0) & mask)];
        assert(x19397 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19398 = x19397 + x19391;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19399 = x19396 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19400 = x19398 - x19399;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19400 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19401 = args[2][217 * steps + ((cycle - 4) & mask)];
        assert(x19401 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19402 = args[2][193 * steps + ((cycle - 0) & mask)];
        assert(x19402 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19403 = x19402 + x19396;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19404 = x19401 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19405 = x19403 - x19404;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19405 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19406 = args[2][218 * steps + ((cycle - 4) & mask)];
        assert(x19406 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19407 = args[2][194 * steps + ((cycle - 0) & mask)];
        assert(x19407 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19408 = x19407 + x19401;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19409 = x19406 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19410 = x19408 - x19409;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19410 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19411 = args[2][219 * steps + ((cycle - 4) & mask)];
        assert(x19411 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19412 = args[2][195 * steps + ((cycle - 0) & mask)];
        assert(x19412 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19413 = x19412 + x19406;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19414 = x19411 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19415 = x19413 - x19414;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19415 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19416 = args[2][212 * steps + ((cycle - 3) & mask)];
        assert(x19416 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19417 = args[2][196 * steps + ((cycle - 0) & mask)];
        assert(x19417 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19418 = x19417 + x19411;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19419 = x19416 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19420 = x19418 - x19419;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19420 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19421 = args[2][213 * steps + ((cycle - 3) & mask)];
        assert(x19421 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19422 = args[2][197 * steps + ((cycle - 0) & mask)];
        assert(x19422 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19423 = x19422 + x19416;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19424 = x19421 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19425 = x19423 - x19424;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19425 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19426 = args[2][214 * steps + ((cycle - 3) & mask)];
        assert(x19426 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19427 = args[2][198 * steps + ((cycle - 0) & mask)];
        assert(x19427 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19428 = x19427 + x19421;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19429 = x19426 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19430 = x19428 - x19429;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19430 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19431 = args[2][215 * steps + ((cycle - 3) & mask)];
        assert(x19431 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19432 = args[2][199 * steps + ((cycle - 0) & mask)];
        assert(x19432 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19433 = x19432 + x19426;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19434 = x19431 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19435 = x19433 - x19434;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19435 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19436 = args[2][216 * steps + ((cycle - 3) & mask)];
        assert(x19436 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19437 = args[2][200 * steps + ((cycle - 0) & mask)];
        assert(x19437 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19438 = x19437 + x19431;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19439 = x19436 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19440 = x19438 - x19439;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19440 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19441 = args[2][217 * steps + ((cycle - 3) & mask)];
        assert(x19441 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19442 = args[2][201 * steps + ((cycle - 0) & mask)];
        assert(x19442 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19443 = x19442 + x19436;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19444 = x19441 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19445 = x19443 - x19444;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19445 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19446 = args[2][218 * steps + ((cycle - 3) & mask)];
        assert(x19446 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19447 = args[2][202 * steps + ((cycle - 0) & mask)];
        assert(x19447 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19448 = x19447 + x19441;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19449 = x19446 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19450 = x19448 - x19449;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19450 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19451 = args[2][219 * steps + ((cycle - 3) & mask)];
        assert(x19451 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19452 = args[2][203 * steps + ((cycle - 0) & mask)];
        assert(x19452 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19453 = x19452 + x19446;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19454 = x19451 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19455 = x19453 - x19454;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19455 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19456 = args[2][212 * steps + ((cycle - 2) & mask)];
        assert(x19456 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19457 = args[2][204 * steps + ((cycle - 0) & mask)];
        assert(x19457 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19458 = x19457 + x19451;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19459 = x19456 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19460 = x19458 - x19459;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19460 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19461 = args[2][213 * steps + ((cycle - 2) & mask)];
        assert(x19461 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19462 = args[2][205 * steps + ((cycle - 0) & mask)];
        assert(x19462 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19463 = x19462 + x19456;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19464 = x19461 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19465 = x19463 - x19464;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19465 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19466 = args[2][214 * steps + ((cycle - 2) & mask)];
        assert(x19466 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19467 = args[2][206 * steps + ((cycle - 0) & mask)];
        assert(x19467 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19468 = x19467 + x19461;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19469 = x19466 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19470 = x19468 - x19469;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19470 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19471 = args[2][215 * steps + ((cycle - 2) & mask)];
        assert(x19471 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19472 = args[2][207 * steps + ((cycle - 0) & mask)];
        assert(x19472 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19473 = x19472 + x19466;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19474 = x19471 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19475 = x19473 - x19474;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19475 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19476 = args[2][216 * steps + ((cycle - 2) & mask)];
        assert(x19476 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19477 = args[2][208 * steps + ((cycle - 0) & mask)];
        assert(x19477 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19478 = x19477 + x19471;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19479 = x19476 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19480 = x19478 - x19479;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19480 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":415:64))
        auto x19481 = args[2][217 * steps + ((cycle - 2) & mask)];
        assert(x19481 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19482 = args[2][209 * steps + ((cycle - 0) & mask)];
        assert(x19482 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19483 = x19482 + x19476;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:26)
        auto x19484 = x19481 * x91;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19485 = x19483 - x19484;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19485 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("zirgen/circuit/rv32im/bigint.cpp":425:66))
        auto x19486 = args[2][210 * steps + ((cycle - 0) & mask)];
        assert(x19486 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        auto x19487 = x19486 + x19481;
        // loc("zirgen/circuit/rv32im/bigint.cpp":428:10)
        if (x19487 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/bigint.cpp:428");
      }
      if (x13520 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x19488 = args[2][171 * steps + ((cycle - 0) & mask)];
        assert(x19488 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/bigint.cpp":438:34)
        auto x19489 = x13522 * x79;
        // loc("zirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19490 = x19488 + x19489;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19491 = args[2][18 * steps + ((cycle - 0) & mask)];
        assert(x19491 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19492 = args[2][19 * steps + ((cycle - 0) & mask)];
        assert(x19492 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19493 = args[2][20 * steps + ((cycle - 0) & mask)];
        assert(x19493 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19494 = args[2][21 * steps + ((cycle - 0) & mask)];
        assert(x19494 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19491);
          reg = x19491;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19492);
          reg = x19492;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19493);
          reg = x19493;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19494);
          reg = x19494;
        }
        {
          host_args.at(0) = x19490;
          host_args.at(1) = x19491;
          host_args.at(2) = x19492;
          host_args.at(3) = x19493;
          host_args.at(4) = x19494;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19495 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19495 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19496 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19496 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19497 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19497 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19498 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19498 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19490);
          reg = x19490;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][119 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19495);
          reg = x19495;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][120 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19496);
          reg = x19496;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][121 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19497);
          reg = x19497;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][122 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19498);
          reg = x19498;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19499 = x19490 + x96;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19500 = args[2][22 * steps + ((cycle - 0) & mask)];
        assert(x19500 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19501 = args[2][23 * steps + ((cycle - 0) & mask)];
        assert(x19501 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19502 = args[2][24 * steps + ((cycle - 0) & mask)];
        assert(x19502 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19503 = args[2][25 * steps + ((cycle - 0) & mask)];
        assert(x19503 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19500);
          reg = x19500;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19501);
          reg = x19501;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19502);
          reg = x19502;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19503);
          reg = x19503;
        }
        {
          host_args.at(0) = x19499;
          host_args.at(1) = x19500;
          host_args.at(2) = x19501;
          host_args.at(3) = x19502;
          host_args.at(4) = x19503;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19504 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19504 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19505 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19505 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19506 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19506 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19507 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19507 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][123 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19499);
          reg = x19499;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][124 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][125 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][126 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19504);
          reg = x19504;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][127 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19505);
          reg = x19505;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][128 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19506);
          reg = x19506;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][129 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19507);
          reg = x19507;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19508 = x19490 + x93;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19509 = args[2][26 * steps + ((cycle - 0) & mask)];
        assert(x19509 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19510 = args[2][27 * steps + ((cycle - 0) & mask)];
        assert(x19510 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19511 = args[2][28 * steps + ((cycle - 0) & mask)];
        assert(x19511 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19512 = args[2][29 * steps + ((cycle - 0) & mask)];
        assert(x19512 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19509);
          reg = x19509;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19510);
          reg = x19510;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19511);
          reg = x19511;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19512);
          reg = x19512;
        }
        {
          host_args.at(0) = x19508;
          host_args.at(1) = x19509;
          host_args.at(2) = x19510;
          host_args.at(3) = x19511;
          host_args.at(4) = x19512;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19513 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19513 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19514 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19514 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19515 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19515 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19516 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19516 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][130 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19508);
          reg = x19508;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][131 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][132 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][133 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19513);
          reg = x19513;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][134 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19514);
          reg = x19514;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][135 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19515);
          reg = x19515;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][136 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19516);
          reg = x19516;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":438:25)
        auto x19517 = x19490 + x78;
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19518 = args[2][30 * steps + ((cycle - 0) & mask)];
        assert(x19518 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19519 = args[2][31 * steps + ((cycle - 0) & mask)];
        assert(x19519 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19520 = args[2][32 * steps + ((cycle - 0) & mask)];
        assert(x19520 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":92:10))
        auto x19521 = args[2][33 * steps + ((cycle - 0) & mask)];
        assert(x19521 != Fp::invalid());
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19518);
          reg = x19518;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19519);
          reg = x19519;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19520);
          reg = x19520;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19521);
          reg = x19521;
        }
        {
          host_args.at(0) = x19517;
          host_args.at(1) = x19518;
          host_args.at(2) = x19519;
          host_args.at(3) = x19520;
          host_args.at(4) = x19521;
          host_args.at(5) = x93;
          host(ctx, "ramWrite", "", host_args.data(), 6, host_outs.data(), 0);
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19522 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19522 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19523 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19523 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19524 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19524 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19525 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19525 != Fp::invalid());
        // loc("zirgen/components/ram.cpp":168:3)
        {
          auto& reg = args[2][137 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19517);
          reg = x19517;
        }
        // loc("zirgen/components/ram.cpp":169:3)
        {
          auto& reg = args[2][138 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x853);
          reg = x853;
        }
        // loc("zirgen/components/ram.cpp":170:3)
        {
          auto& reg = args[2][139 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][140 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19522);
          reg = x19522;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][141 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19523);
          reg = x19523;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][142 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19524);
          reg = x19524;
        }
        // loc("zirgen/components/u32.cpp":34:5)
        {
          auto& reg = args[2][143 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19525);
          reg = x19525;
        }
        // loc("zirgen/circuit/rv32im/bigint.cpp":445:10)
        auto x19526 = x19488 * x79;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19527 = x19496 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19528 = x19495 + x19527;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19529 = x19497 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19530 = x19528 + x19529;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19531 = x19498 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19532 = x19530 + x19531;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19533 = x19505 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19534 = x19504 + x19533;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19535 = x19506 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19536 = x19534 + x19535;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19537 = x19507 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19538 = x19536 + x19537;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19539 = x19514 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19540 = x19513 + x19539;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19541 = x19515 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19542 = x19540 + x19541;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19543 = x19516 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19544 = x19542 + x19543;
        // loc("./zirgen/components/u32.h":25:12)
        auto x19545 = x19523 * x91;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19546 = x19522 + x19545;
        // loc("./zirgen/components/u32.h":26:12)
        auto x19547 = x19524 * x81;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19548 = x19546 + x19547;
        // loc("./zirgen/components/u32.h":27:12)
        auto x19549 = x19525 * x80;
        // loc("./zirgen/components/u32.h":24:12)
        auto x19550 = x19548 + x19549;
        host_args.at(0) = x19526;
        host_args.at(1) = x19532;
        host_args.at(2) = x19538;
        host_args.at(3) = x19544;
        host_args.at(4) = x19550;
        host(ctx, "log", "  Writing: ioAddr = 0x%x, data = { %u, %u, %u, %u }", host_args.data(), 5, host_outs.data(), 0);
      }
      // loc("zirgen/circuit/rv32im/bigint.cpp":453:18)
      auto x19551 = x96 - x13534;
      if (x19551 != 0) {
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x19552 = x867 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19553 = Fp(x19552.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19553);
            reg = x19553;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19554 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x19554 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19555 = x19552 - x19554;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19556 = x19555 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19557 = Fp(x19556.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19557);
            reg = x19557;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19558 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x19558 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19559 = x19556 - x19558;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19560 = x19559 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19561 = Fp(x19560.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19561);
            reg = x19561;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19562 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x19562 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19563 = x19560 - x19562;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19564 = x19563 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x19565 = Fp(x19564.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19565);
            reg = x19565;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19566 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x19566 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x19567 = x19564 - x19566;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x19568 = x19567 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19568);
          reg = x19568;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19569 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x19569 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x19570 = x96 - x19569;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x19571 = x19569 * x19570;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19571);
          reg = x19571;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x19572 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x19572 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x19573 = x93 - x19569;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x19574 = x19572 * x19573;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x19574 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/bigint.cpp":455:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x66);
          reg = x66;
        }
      }
      if (x13534 != 0) {
        // loc("zirgen/circuit/rv32im/bigint.cpp":458:19)
        auto x19575 = x867 + x79;
        // loc("zirgen/circuit/rv32im/body.cpp":14:23)
        auto x19576 = x19575 + x79;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19577 = Fp(x19576.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][6 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19577);
            reg = x19577;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19578 = args[2][6 * steps + ((cycle - 0) & mask)];
        assert(x19578 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19579 = x19576 - x19578;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19580 = x19579 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19581 = Fp(x19580.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][7 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19581);
            reg = x19581;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19582 = args[2][7 * steps + ((cycle - 0) & mask)];
        assert(x19582 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19583 = x19580 - x19582;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19584 = x19583 * x90;
        {
          // loc("zirgen/components/bytes.cpp":96:21)
          auto x19585 = Fp(x19584.asUInt32() & x92.asUInt32());
          // loc("zirgen/components/bytes.cpp":96:12)
          {
            auto& reg = args[2][8 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19585);
            reg = x19585;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
        auto x19586 = args[2][8 * steps + ((cycle - 0) & mask)];
        assert(x19586 != Fp::invalid());
        // loc("zirgen/components/bytes.cpp":97:11)
        auto x19587 = x19584 - x19586;
        // loc("zirgen/components/bytes.cpp":97:10)
        auto x19588 = x19587 * x90;
        {
          // loc("zirgen/circuit/rv32im/body.cpp":17:26)
          auto x19589 = Fp(x19588.asUInt32() & x78.asUInt32());
          // loc("./zirgen/components/bits.h":68:23)
          {
            auto& reg = args[2][70 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x19589);
            reg = x19589;
          }
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19590 = args[2][70 * steps + ((cycle - 0) & mask)];
        assert(x19590 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":18:18)
        auto x19591 = x19588 - x19590;
        // loc("zirgen/circuit/rv32im/body.cpp":18:17)
        auto x19592 = x19591 * x77;
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][71 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19592);
          reg = x19592;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19593 = args[2][71 * steps + ((cycle - 0) & mask)];
        assert(x19593 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":22:23)
        auto x19594 = x96 - x19593;
        // loc("zirgen/circuit/rv32im/body.cpp":22:15)
        auto x19595 = x19593 * x19594;
        // loc("zirgen/circuit/rv32im/body.cpp":22:3)
        {
          auto& reg = args[2][98 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19595);
          reg = x19595;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
        auto x19596 = args[2][98 * steps + ((cycle - 0) & mask)];
        assert(x19596 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":23:17)
        auto x19597 = x93 - x19593;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        auto x19598 = x19596 * x19597;
        // loc("zirgen/circuit/rv32im/body.cpp":23:7)
        if (x19598 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
        // loc("zirgen/circuit/rv32im/bigint.cpp":459:5)
        {
          auto& reg = args[2][99 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x64);
          reg = x64;
        }
      }
    }
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("./zirgen/components/mux.h":49:25))
    auto x19599 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19599 != Fp::invalid());
    if (x19599 != 0) {
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("zirgen/circuit/rv32im/body.cpp":119:63))
      auto x19600 = args[2][115 * steps + ((cycle - 1) & mask)];
      assert(x19600 != Fp::invalid());
      if (x19600 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/body.cpp":121:48))
        auto x19601 = args[2][116 * steps + ((cycle - 1) & mask)];
        assert(x19601 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":121:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19601);
          reg = x19601;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/body.cpp":122:50))
        auto x19602 = args[2][117 * steps + ((cycle - 1) & mask)];
        assert(x19602 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":122:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19602);
          reg = x19602;
        }
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/15(HaltCycle)/Reg"("zirgen/circuit/rv32im/body.cpp":123:44))
        auto x19603 = args[2][118 * steps + ((cycle - 1) & mask)];
        assert(x19603 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":123:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19603);
          reg = x19603;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[8](Reg)"("zirgen/circuit/rv32im/body.cpp":126:69))
      auto x19604 = args[2][108 * steps + ((cycle - 1) & mask)];
      assert(x19604 != Fp::invalid());
      if (x19604 != 0) {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/body.cpp":129:75))
        auto x19605 = args[2][187 * steps + ((cycle - 1) & mask)];
        assert(x19605 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":130:8)
        auto x19606 = x96 - x19605;
        // loc("zirgen/circuit/rv32im/body.cpp":130:8)
        if (x19606 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:130");
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19607 = args[2][133 * steps + ((cycle - 1) & mask)];
        assert(x19607 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19608 = args[2][134 * steps + ((cycle - 1) & mask)];
        assert(x19608 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/Mux/0(ECallHalt)/Reg"("zirgen/circuit/rv32im/body.cpp":134:55))
        auto x19609 = args[2][192 * steps + ((cycle - 1) & mask)];
        assert(x19609 != Fp::invalid());
        // loc("zirgen/circuit/rv32im/body.cpp":134:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19609);
          reg = x19609;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":135:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19607);
          reg = x19607;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":136:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19608);
          reg = x19608;
        }
        host_args.at(0) = x19607;
        host(ctx, "log", "isFromEcall, set sysExitCode: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("zirgen/circuit/rv32im/body.cpp":138:5)
        args[1][104] = x19607;
        // loc("zirgen/circuit/rv32im/body.cpp":139:5)
        args[1][105] = x19608;
        {
          host_args.at(0) = x19607;
          host_args.at(1) = x867;
          host(ctx, "halt", "", host_args.data(), 2, host_outs.data(), 0);
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[12](Reg)"("zirgen/circuit/rv32im/body.cpp":145:77))
      auto x19610 = args[2][112 * steps + ((cycle - 1) & mask)];
      assert(x19610 != Fp::invalid());
      if (x19610 != 0) {
        // loc("zirgen/circuit/rv32im/body.cpp":147:5)
        {
          auto& reg = args[2][116 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x93);
          reg = x93;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":148:5)
        {
          auto& reg = args[2][117 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("zirgen/circuit/rv32im/body.cpp":149:5)
        {
          auto& reg = args[2][118 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x0);
          reg = x0;
        }
        host_args.at(0) = x93;
        host(ctx, "log", "isFromPageFault, set sysExitCode: %u", host_args.data(), 1, host_outs.data(), 0);
        // loc("zirgen/circuit/rv32im/body.cpp":151:5)
        args[1][104] = x93;
        // loc("zirgen/circuit/rv32im/body.cpp":152:5)
        args[1][105] = x95;
        {
          host_args.at(0) = x93;
          host_args.at(1) = x867;
          host(ctx, "halt", "", host_args.data(), 2, host_outs.data(), 0);
        }
      }
      // loc("zirgen/circuit/rv32im/body.cpp":14:23)
      auto x19611 = x867 + x79;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x19612 = Fp(x19611.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][6 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19612);
          reg = x19612;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x19613 = args[2][6 * steps + ((cycle - 0) & mask)];
      assert(x19613 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x19614 = x19611 - x19613;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x19615 = x19614 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x19616 = Fp(x19615.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][7 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19616);
          reg = x19616;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x19617 = args[2][7 * steps + ((cycle - 0) & mask)];
      assert(x19617 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x19618 = x19615 - x19617;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x19619 = x19618 * x90;
      {
        // loc("zirgen/components/bytes.cpp":96:21)
        auto x19620 = Fp(x19619.asUInt32() & x92.asUInt32());
        // loc("zirgen/components/bytes.cpp":96:12)
        {
          auto& reg = args[2][8 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19620);
          reg = x19620;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/BytesBody/PlonkBody/BytesPlonkElement/Reg"("zirgen/components/bytes.cpp":97:16))
      auto x19621 = args[2][8 * steps + ((cycle - 0) & mask)];
      assert(x19621 != Fp::invalid());
      // loc("zirgen/components/bytes.cpp":97:11)
      auto x19622 = x19619 - x19621;
      // loc("zirgen/components/bytes.cpp":97:10)
      auto x19623 = x19622 * x90;
      {
        // loc("zirgen/circuit/rv32im/body.cpp":17:26)
        auto x19624 = Fp(x19623.asUInt32() & x78.asUInt32());
        // loc("./zirgen/components/bits.h":68:23)
        {
          auto& reg = args[2][70 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x19624);
          reg = x19624;
        }
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19625 = args[2][70 * steps + ((cycle - 0) & mask)];
      assert(x19625 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":18:18)
      auto x19626 = x19623 - x19625;
      // loc("zirgen/circuit/rv32im/body.cpp":18:17)
      auto x19627 = x19626 * x77;
      // loc("./zirgen/components/bits.h":68:23)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x19627);
        reg = x19627;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Twit/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19628 = args[2][71 * steps + ((cycle - 0) & mask)];
      assert(x19628 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":22:23)
      auto x19629 = x96 - x19628;
      // loc("zirgen/circuit/rv32im/body.cpp":22:15)
      auto x19630 = x19628 * x19629;
      // loc("zirgen/circuit/rv32im/body.cpp":22:3)
      {
        auto& reg = args[2][98 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x19630);
        reg = x19630;
      }
      // loc("Top/mux(Mux)/body(BodyStep)/PCReg/Reg"("./zirgen/compiler/edsl/edsl.h":117:61))
      auto x19631 = args[2][98 * steps + ((cycle - 0) & mask)];
      assert(x19631 != Fp::invalid());
      // loc("zirgen/circuit/rv32im/body.cpp":23:17)
      auto x19632 = x93 - x19628;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      auto x19633 = x19631 * x19632;
      // loc("zirgen/circuit/rv32im/body.cpp":23:7)
      if (x19633 != 0) throw std::runtime_error("eqz failed at: zirgen/circuit/rv32im/body.cpp:23");
      // loc("zirgen/circuit/rv32im/body.cpp":159:3)
      {
        auto& reg = args[2][99 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x65);
        reg = x65;
      }
    }
  }
  // loc("Top/Code/OneHot/hot[6](Reg)"("./zirgen/components/mux.h":49:25))
  auto x19634 = args[0][7 * steps + ((cycle - 0) & mask)];
  assert(x19634 != Fp::invalid());
  if (x19634 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x19635 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x19635 != Fp::invalid());
    host_args.at(0) = x19635;
    host(ctx, "log", "%u: RamFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[7](Reg)"("./zirgen/components/mux.h":49:25))
  auto x19636 = args[0][8 * steps + ((cycle - 0) & mask)];
  assert(x19636 != Fp::invalid());
  if (x19636 != 0) {
    // loc("Top/Code/Reg"("./zirgen/compiler/edsl/component.h":154:27))
    auto x19637 = args[0][0 * steps + ((cycle - 0) & mask)];
    assert(x19637 != Fp::invalid());
    host_args.at(0) = x19637;
    host(ctx, "log", "%u: BytesFini", host_args.data(), 1, host_outs.data(), 0);
  }
  // loc("Top/Code/OneHot/hot[0](Reg)"("zirgen/circuit/rv32im/top.cpp":78:27))
  auto x19638 = args[0][1 * steps + ((cycle - 0) & mask)];
  assert(x19638 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/top.cpp":78:16)
  auto x19639 = x19638 + x97;
  // loc("Top/Code/OneHot/hot[2](Reg)"("zirgen/circuit/rv32im/top.cpp":78:27))
  auto x19640 = args[0][3 * steps + ((cycle - 0) & mask)];
  assert(x19640 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/top.cpp":78:16)
  auto x19641 = x19639 + x19640;
  // loc("zirgen/circuit/rv32im/top.cpp":78:16)
  auto x19642 = x19641 + x422;
  // loc("zirgen/circuit/rv32im/top.cpp":78:16)
  auto x19643 = x19642 + x475;
  // loc("zirgen/circuit/rv32im/top.cpp":78:16)
  auto x19644 = x19643 + x852;
  // loc("zirgen/circuit/rv32im/top.cpp":78:16)
  auto x19645 = x19644 + x19634;
  // loc("zirgen/circuit/rv32im/top.cpp":78:16)
  auto x19646 = x19645 + x19636;
  if (x852 != 0) {
    // loc("Top/mux(Mux)/body(BodyStep)/OneHot/hot[15](Reg)"("zirgen/circuit/rv32im/top.cpp":86:18))
    auto x19647 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19647 != Fp::invalid());
    // loc("zirgen/circuit/rv32im/top.cpp":87:5)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x19647);
      reg = x19647;
    }
  }
  // loc("zirgen/circuit/rv32im/top.cpp":89:23)
  auto x19648 = x19646 - x852;
  if (x19648 != 0) {
    // loc("zirgen/circuit/rv32im/top.cpp":89:27)
    {
      auto& reg = args[2][2 * steps + cycle];
      assert(reg == Fp::invalid() || reg == x95);
      reg = x95;
    }
  }
  // loc("Top/halted(Reg)"("./zirgen/compiler/edsl/edsl.h":117:61))
  auto x19649 = args[2][2 * steps + ((cycle - 0) & mask)];
  assert(x19649 != Fp::invalid());
  // loc("zirgen/circuit/rv32im/top.cpp":90:10)
  auto x19650 = x96 - x19649;
  if (x19640 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x422 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/ram.cpp":43:3)
      {
        auto& reg = args[2][135 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/ram.cpp":44:3)
      {
        auto& reg = args[2][136 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/ram.cpp":45:3)
      {
        auto& reg = args[2][137 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x96);
        reg = x96;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][138 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][139 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][140 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("zirgen/components/u32.cpp":28:5)
      {
        auto& reg = args[2][141 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x475 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x852 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19651 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x19651 != Fp::invalid());
    if (x19651 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19652 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x19652 != Fp::invalid());
    if (x19652 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19653 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x19653 != Fp::invalid());
    if (x19653 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19654 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x19654 != Fp::invalid());
    if (x19654 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19655 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x19655 != Fp::invalid());
    if (x19655 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19656 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x19656 != Fp::invalid());
    if (x19656 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19657 = args[2][106 * steps + ((cycle - 0) & mask)];
    assert(x19657 != Fp::invalid());
    if (x19657 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19658 = args[2][107 * steps + ((cycle - 0) & mask)];
    assert(x19658 != Fp::invalid());
    if (x19658 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19659 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x19659 != Fp::invalid());
    if (x19659 != 0) {
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x19660 = args[2][187 * steps + ((cycle - 0) & mask)];
      assert(x19660 != Fp::invalid());
      if (x19660 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x19661 = args[2][188 * steps + ((cycle - 0) & mask)];
      assert(x19661 != Fp::invalid());
      if (x19661 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x19662 = args[2][189 * steps + ((cycle - 0) & mask)];
      assert(x19662 != Fp::invalid());
      if (x19662 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x19663 = args[2][190 * steps + ((cycle - 0) & mask)];
      assert(x19663 != Fp::invalid());
      if (x19663 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
      // loc("zirgen/compiler/edsl/component.cpp":39:15)
      auto x19664 = args[2][191 * steps + ((cycle - 0) & mask)];
      assert(x19664 != Fp::invalid());
      if (x19664 != 0) {
        {
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][21 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][22 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][23 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][24 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][25 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][26 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][27 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][28 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][29 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][30 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][31 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][32 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][33 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][34 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][35 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bytes.h":45:30)
          {
            auto& reg = args[2][36 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][137 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][138 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][139 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][140 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][141 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][142 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][143 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":43:3)
          {
            auto& reg = args[2][144 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":44:3)
          {
            auto& reg = args[2][145 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/ram.cpp":45:3)
          {
            auto& reg = args[2][146 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x96);
            reg = x96;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][147 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][148 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][149 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("zirgen/components/u32.cpp":28:5)
          {
            auto& reg = args[2][150 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][76 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][77 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][78 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][79 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][80 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][81 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][82 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][83 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][84 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][85 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][86 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][87 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
          // loc("./zirgen/components/bits.h":37:46)
          {
            auto& reg = args[2][88 * steps + cycle];
            assert(reg == Fp::invalid() || reg == x95);
            reg = x95;
          }
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19665 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x19665 != Fp::invalid());
    if (x19665 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19666 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x19666 != Fp::invalid());
    if (x19666 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19667 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x19667 != Fp::invalid());
    if (x19667 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19668 = args[2][112 * steps + ((cycle - 0) & mask)];
    assert(x19668 != Fp::invalid());
    if (x19668 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19669 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x19669 != Fp::invalid());
    if (x19669 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19670 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x19670 != Fp::invalid());
    if (x19670 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19671 = args[2][115 * steps + ((cycle - 0) & mask)];
    assert(x19671 != Fp::invalid());
    if (x19671 != 0) {
      {
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][9 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][10 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][11 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][12 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][13 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][14 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][15 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][16 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][17 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][18 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][19 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][20 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][21 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][22 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][23 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][24 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][25 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][26 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][27 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][28 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][29 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][30 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][31 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][32 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][33 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][34 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][35 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bytes.h":45:30)
        {
          auto& reg = args[2][36 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][72 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][73 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][74 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][75 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][76 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][77 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][78 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][79 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][80 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][81 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][82 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][83 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][84 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][85 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][86 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][87 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
        // loc("./zirgen/components/bits.h":37:46)
        {
          auto& reg = args[2][88 * steps + cycle];
          assert(reg == Fp::invalid() || reg == x95);
          reg = x95;
        }
      }
    }
  }
  if (x19634 != 0) {
    {
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][6 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][7 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][8 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][9 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][10 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][11 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][12 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][13 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][14 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][15 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][16 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][17 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][18 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][19 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][20 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][21 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][22 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][23 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][24 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][25 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][26 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][27 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][28 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][29 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][30 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][31 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][32 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][33 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][34 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][35 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bytes.h":45:30)
      {
        auto& reg = args[2][36 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][70 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][71 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][72 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][73 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][74 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][75 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][76 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][77 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][78 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][79 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][80 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][81 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][82 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][83 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][84 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][85 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][86 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][87 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
      // loc("./zirgen/components/bits.h":37:46)
      {
        auto& reg = args[2][88 * steps + cycle];
        assert(reg == Fp::invalid() || reg == x95);
        reg = x95;
      }
    }
  }
  if (x422 != 0) {
    {
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19672 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x19672 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19673 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x19673 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19674 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x19674 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19675 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x19675 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19676 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x19676 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19677 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x19677 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19678 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x19678 != Fp::invalid());
      host_args.at(0) = x19672;
      host_args.at(1) = x19673;
      host_args.at(2) = x19674;
      host_args.at(3) = x19675;
      host_args.at(4) = x19676;
      host_args.at(5) = x19677;
      host_args.at(6) = x19678;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19679 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x19679 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19680 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x19680 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19681 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x19681 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19682 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x19682 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19683 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x19683 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19684 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x19684 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19685 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x19685 != Fp::invalid());
      host_args.at(0) = x19679;
      host_args.at(1) = x19680;
      host_args.at(2) = x19681;
      host_args.at(3) = x19682;
      host_args.at(4) = x19683;
      host_args.at(5) = x19684;
      host_args.at(6) = x19685;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19686 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x19686 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19687 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x19687 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19688 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x19688 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19689 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x19689 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19690 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x19690 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19691 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x19691 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19692 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x19692 != Fp::invalid());
      host_args.at(0) = x19686;
      host_args.at(1) = x19687;
      host_args.at(2) = x19688;
      host_args.at(3) = x19689;
      host_args.at(4) = x19690;
      host_args.at(5) = x19691;
      host_args.at(6) = x19692;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19693 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x19693 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19694 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x19694 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19695 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x19695 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19696 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x19696 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19697 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x19697 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19698 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x19698 != Fp::invalid());
      // loc("Top/mux(Mux)/ram_load(RamLoadStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19699 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x19699 != Fp::invalid());
      host_args.at(0) = x19693;
      host_args.at(1) = x19694;
      host_args.at(2) = x19695;
      host_args.at(3) = x19696;
      host_args.at(4) = x19697;
      host_args.at(5) = x19698;
      host_args.at(6) = x19699;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x475 != 0) {
    {
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19700 = args[2][114 * steps + ((cycle - 0) & mask)];
      assert(x19700 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19701 = args[2][115 * steps + ((cycle - 0) & mask)];
      assert(x19701 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19702 = args[2][116 * steps + ((cycle - 0) & mask)];
      assert(x19702 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19703 = args[2][117 * steps + ((cycle - 0) & mask)];
      assert(x19703 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19704 = args[2][118 * steps + ((cycle - 0) & mask)];
      assert(x19704 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19705 = args[2][119 * steps + ((cycle - 0) & mask)];
      assert(x19705 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19706 = args[2][120 * steps + ((cycle - 0) & mask)];
      assert(x19706 != Fp::invalid());
      host_args.at(0) = x19700;
      host_args.at(1) = x19701;
      host_args.at(2) = x19702;
      host_args.at(3) = x19703;
      host_args.at(4) = x19704;
      host_args.at(5) = x19705;
      host_args.at(6) = x19706;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19707 = args[2][121 * steps + ((cycle - 0) & mask)];
      assert(x19707 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19708 = args[2][122 * steps + ((cycle - 0) & mask)];
      assert(x19708 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19709 = args[2][123 * steps + ((cycle - 0) & mask)];
      assert(x19709 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19710 = args[2][124 * steps + ((cycle - 0) & mask)];
      assert(x19710 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19711 = args[2][125 * steps + ((cycle - 0) & mask)];
      assert(x19711 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19712 = args[2][126 * steps + ((cycle - 0) & mask)];
      assert(x19712 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19713 = args[2][127 * steps + ((cycle - 0) & mask)];
      assert(x19713 != Fp::invalid());
      host_args.at(0) = x19707;
      host_args.at(1) = x19708;
      host_args.at(2) = x19709;
      host_args.at(3) = x19710;
      host_args.at(4) = x19711;
      host_args.at(5) = x19712;
      host_args.at(6) = x19713;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19714 = args[2][128 * steps + ((cycle - 0) & mask)];
      assert(x19714 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19715 = args[2][129 * steps + ((cycle - 0) & mask)];
      assert(x19715 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19716 = args[2][130 * steps + ((cycle - 0) & mask)];
      assert(x19716 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19717 = args[2][131 * steps + ((cycle - 0) & mask)];
      assert(x19717 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19718 = args[2][132 * steps + ((cycle - 0) & mask)];
      assert(x19718 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19719 = args[2][133 * steps + ((cycle - 0) & mask)];
      assert(x19719 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19720 = args[2][134 * steps + ((cycle - 0) & mask)];
      assert(x19720 != Fp::invalid());
      host_args.at(0) = x19714;
      host_args.at(1) = x19715;
      host_args.at(2) = x19716;
      host_args.at(3) = x19717;
      host_args.at(4) = x19718;
      host_args.at(5) = x19719;
      host_args.at(6) = x19720;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19721 = args[2][135 * steps + ((cycle - 0) & mask)];
      assert(x19721 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19722 = args[2][136 * steps + ((cycle - 0) & mask)];
      assert(x19722 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19723 = args[2][137 * steps + ((cycle - 0) & mask)];
      assert(x19723 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19724 = args[2][138 * steps + ((cycle - 0) & mask)];
      assert(x19724 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19725 = args[2][139 * steps + ((cycle - 0) & mask)];
      assert(x19725 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19726 = args[2][140 * steps + ((cycle - 0) & mask)];
      assert(x19726 != Fp::invalid());
      // loc("Top/mux(Mux)/reset(ResetStep)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
      auto x19727 = args[2][141 * steps + ((cycle - 0) & mask)];
      assert(x19727 != Fp::invalid());
      host_args.at(0) = x19721;
      host_args.at(1) = x19722;
      host_args.at(2) = x19723;
      host_args.at(3) = x19724;
      host_args.at(4) = x19725;
      host_args.at(5) = x19726;
      host_args.at(6) = x19727;
      host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
    }
  }
  if (x852 != 0) {
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19728 = args[2][100 * steps + ((cycle - 0) & mask)];
    assert(x19728 != Fp::invalid());
    if (x19728 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19729 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19729 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19730 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19730 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19731 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19731 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19732 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19732 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19733 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19733 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19734 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19734 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19735 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19735 != Fp::invalid());
        host_args.at(0) = x19729;
        host_args.at(1) = x19730;
        host_args.at(2) = x19731;
        host_args.at(3) = x19732;
        host_args.at(4) = x19733;
        host_args.at(5) = x19734;
        host_args.at(6) = x19735;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19736 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19736 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19737 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19737 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19738 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19738 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19739 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19739 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19740 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19740 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19741 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19741 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19742 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19742 != Fp::invalid());
        host_args.at(0) = x19736;
        host_args.at(1) = x19737;
        host_args.at(2) = x19738;
        host_args.at(3) = x19739;
        host_args.at(4) = x19740;
        host_args.at(5) = x19741;
        host_args.at(6) = x19742;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19743 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19743 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19744 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19744 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19745 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19745 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19746 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19746 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19747 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19747 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19748 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19748 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19749 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19749 != Fp::invalid());
        host_args.at(0) = x19743;
        host_args.at(1) = x19744;
        host_args.at(2) = x19745;
        host_args.at(3) = x19746;
        host_args.at(4) = x19747;
        host_args.at(5) = x19748;
        host_args.at(6) = x19749;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19750 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19750 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19751 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19751 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19752 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19752 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19753 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19753 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19754 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19754 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19755 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19755 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/0(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19756 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19756 != Fp::invalid());
        host_args.at(0) = x19750;
        host_args.at(1) = x19751;
        host_args.at(2) = x19752;
        host_args.at(3) = x19753;
        host_args.at(4) = x19754;
        host_args.at(5) = x19755;
        host_args.at(6) = x19756;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19757 = args[2][101 * steps + ((cycle - 0) & mask)];
    assert(x19757 != Fp::invalid());
    if (x19757 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19758 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19758 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19759 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19759 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19760 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19760 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19761 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19761 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19762 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19762 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19763 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19763 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19764 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19764 != Fp::invalid());
        host_args.at(0) = x19758;
        host_args.at(1) = x19759;
        host_args.at(2) = x19760;
        host_args.at(3) = x19761;
        host_args.at(4) = x19762;
        host_args.at(5) = x19763;
        host_args.at(6) = x19764;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19765 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19765 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19766 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19766 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19767 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19767 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19768 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19768 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19769 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19769 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19770 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19770 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19771 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19771 != Fp::invalid());
        host_args.at(0) = x19765;
        host_args.at(1) = x19766;
        host_args.at(2) = x19767;
        host_args.at(3) = x19768;
        host_args.at(4) = x19769;
        host_args.at(5) = x19770;
        host_args.at(6) = x19771;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19772 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19772 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19773 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19773 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19774 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19774 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19775 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19775 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19776 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19776 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19777 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19777 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19778 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19778 != Fp::invalid());
        host_args.at(0) = x19772;
        host_args.at(1) = x19773;
        host_args.at(2) = x19774;
        host_args.at(3) = x19775;
        host_args.at(4) = x19776;
        host_args.at(5) = x19777;
        host_args.at(6) = x19778;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19779 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19779 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19780 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19780 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19781 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19781 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19782 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19782 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19783 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19783 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19784 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19784 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/1(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19785 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19785 != Fp::invalid());
        host_args.at(0) = x19779;
        host_args.at(1) = x19780;
        host_args.at(2) = x19781;
        host_args.at(3) = x19782;
        host_args.at(4) = x19783;
        host_args.at(5) = x19784;
        host_args.at(6) = x19785;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19786 = args[2][102 * steps + ((cycle - 0) & mask)];
    assert(x19786 != Fp::invalid());
    if (x19786 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19787 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19787 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19788 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19788 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19789 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19789 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19790 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19790 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19791 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19791 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19792 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19792 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19793 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19793 != Fp::invalid());
        host_args.at(0) = x19787;
        host_args.at(1) = x19788;
        host_args.at(2) = x19789;
        host_args.at(3) = x19790;
        host_args.at(4) = x19791;
        host_args.at(5) = x19792;
        host_args.at(6) = x19793;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19794 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19794 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19795 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19795 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19796 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19796 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19797 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19797 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19798 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19798 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19799 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19799 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19800 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19800 != Fp::invalid());
        host_args.at(0) = x19794;
        host_args.at(1) = x19795;
        host_args.at(2) = x19796;
        host_args.at(3) = x19797;
        host_args.at(4) = x19798;
        host_args.at(5) = x19799;
        host_args.at(6) = x19800;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19801 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19801 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19802 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19802 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19803 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19803 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19804 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19804 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19805 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19805 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19806 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19806 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19807 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19807 != Fp::invalid());
        host_args.at(0) = x19801;
        host_args.at(1) = x19802;
        host_args.at(2) = x19803;
        host_args.at(3) = x19804;
        host_args.at(4) = x19805;
        host_args.at(5) = x19806;
        host_args.at(6) = x19807;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19808 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19808 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19809 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19809 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19810 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19810 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19811 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19811 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19812 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19812 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19813 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19813 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/2(ComputeWrap)/ComputeCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19814 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19814 != Fp::invalid());
        host_args.at(0) = x19808;
        host_args.at(1) = x19809;
        host_args.at(2) = x19810;
        host_args.at(3) = x19811;
        host_args.at(4) = x19812;
        host_args.at(5) = x19813;
        host_args.at(6) = x19814;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19815 = args[2][103 * steps + ((cycle - 0) & mask)];
    assert(x19815 != Fp::invalid());
    if (x19815 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19816 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19816 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19817 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19817 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19818 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19818 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19819 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19819 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19820 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19820 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19821 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19821 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19822 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19822 != Fp::invalid());
        host_args.at(0) = x19816;
        host_args.at(1) = x19817;
        host_args.at(2) = x19818;
        host_args.at(3) = x19819;
        host_args.at(4) = x19820;
        host_args.at(5) = x19821;
        host_args.at(6) = x19822;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19823 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19823 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19824 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19824 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19825 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19825 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19826 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19826 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19827 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19827 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19828 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19828 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19829 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19829 != Fp::invalid());
        host_args.at(0) = x19823;
        host_args.at(1) = x19824;
        host_args.at(2) = x19825;
        host_args.at(3) = x19826;
        host_args.at(4) = x19827;
        host_args.at(5) = x19828;
        host_args.at(6) = x19829;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19830 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19830 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19831 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19831 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19832 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19832 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19833 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19833 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19834 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19834 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19835 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19835 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19836 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19836 != Fp::invalid());
        host_args.at(0) = x19830;
        host_args.at(1) = x19831;
        host_args.at(2) = x19832;
        host_args.at(3) = x19833;
        host_args.at(4) = x19834;
        host_args.at(5) = x19835;
        host_args.at(6) = x19836;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19837 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19837 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19838 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19838 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19839 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19839 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19840 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19840 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19841 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19841 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19842 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19842 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19843 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19843 != Fp::invalid());
        host_args.at(0) = x19837;
        host_args.at(1) = x19838;
        host_args.at(2) = x19839;
        host_args.at(3) = x19840;
        host_args.at(4) = x19841;
        host_args.at(5) = x19842;
        host_args.at(6) = x19843;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19844 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x19844 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19845 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x19845 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19846 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x19846 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19847 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x19847 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19848 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x19848 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19849 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x19849 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/3(MemIOCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19850 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x19850 != Fp::invalid());
        host_args.at(0) = x19844;
        host_args.at(1) = x19845;
        host_args.at(2) = x19846;
        host_args.at(3) = x19847;
        host_args.at(4) = x19848;
        host_args.at(5) = x19849;
        host_args.at(6) = x19850;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19851 = args[2][104 * steps + ((cycle - 0) & mask)];
    assert(x19851 != Fp::invalid());
    if (x19851 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19852 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19852 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19853 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19853 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19854 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19854 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19855 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19855 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19856 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19856 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19857 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19857 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19858 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19858 != Fp::invalid());
        host_args.at(0) = x19852;
        host_args.at(1) = x19853;
        host_args.at(2) = x19854;
        host_args.at(3) = x19855;
        host_args.at(4) = x19856;
        host_args.at(5) = x19857;
        host_args.at(6) = x19858;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19859 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19859 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19860 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19860 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19861 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19861 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19862 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19862 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19863 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19863 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19864 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19864 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19865 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19865 != Fp::invalid());
        host_args.at(0) = x19859;
        host_args.at(1) = x19860;
        host_args.at(2) = x19861;
        host_args.at(3) = x19862;
        host_args.at(4) = x19863;
        host_args.at(5) = x19864;
        host_args.at(6) = x19865;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19866 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19866 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19867 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19867 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19868 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19868 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19869 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19869 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19870 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19870 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19871 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19871 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19872 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19872 != Fp::invalid());
        host_args.at(0) = x19866;
        host_args.at(1) = x19867;
        host_args.at(2) = x19868;
        host_args.at(3) = x19869;
        host_args.at(4) = x19870;
        host_args.at(5) = x19871;
        host_args.at(6) = x19872;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19873 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19873 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19874 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19874 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19875 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19875 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19876 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19876 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19877 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19877 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19878 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19878 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/4(MultiplyCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19879 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19879 != Fp::invalid());
        host_args.at(0) = x19873;
        host_args.at(1) = x19874;
        host_args.at(2) = x19875;
        host_args.at(3) = x19876;
        host_args.at(4) = x19877;
        host_args.at(5) = x19878;
        host_args.at(6) = x19879;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19880 = args[2][105 * steps + ((cycle - 0) & mask)];
    assert(x19880 != Fp::invalid());
    if (x19880 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19881 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19881 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19882 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19882 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19883 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19883 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19884 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19884 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19885 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19885 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19886 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19886 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19887 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19887 != Fp::invalid());
        host_args.at(0) = x19881;
        host_args.at(1) = x19882;
        host_args.at(2) = x19883;
        host_args.at(3) = x19884;
        host_args.at(4) = x19885;
        host_args.at(5) = x19886;
        host_args.at(6) = x19887;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19888 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19888 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19889 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19889 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19890 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19890 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19891 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19891 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19892 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19892 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19893 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19893 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19894 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19894 != Fp::invalid());
        host_args.at(0) = x19888;
        host_args.at(1) = x19889;
        host_args.at(2) = x19890;
        host_args.at(3) = x19891;
        host_args.at(4) = x19892;
        host_args.at(5) = x19893;
        host_args.at(6) = x19894;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19895 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19895 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19896 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19896 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19897 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19897 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19898 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19898 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19899 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19899 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19900 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19900 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19901 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19901 != Fp::invalid());
        host_args.at(0) = x19895;
        host_args.at(1) = x19896;
        host_args.at(2) = x19897;
        host_args.at(3) = x19898;
        host_args.at(4) = x19899;
        host_args.at(5) = x19900;
        host_args.at(6) = x19901;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19902 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19902 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19903 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19903 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19904 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19904 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19905 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19905 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19906 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19906 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19907 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19907 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/5(DivideCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19908 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19908 != Fp::invalid());
        host_args.at(0) = x19902;
        host_args.at(1) = x19903;
        host_args.at(2) = x19904;
        host_args.at(3) = x19905;
        host_args.at(4) = x19906;
        host_args.at(5) = x19907;
        host_args.at(6) = x19908;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19909 = args[2][108 * steps + ((cycle - 0) & mask)];
    assert(x19909 != Fp::invalid());
    if (x19909 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19910 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19910 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19911 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19911 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19912 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19912 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19913 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19913 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19914 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19914 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19915 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19915 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19916 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19916 != Fp::invalid());
        host_args.at(0) = x19910;
        host_args.at(1) = x19911;
        host_args.at(2) = x19912;
        host_args.at(3) = x19913;
        host_args.at(4) = x19914;
        host_args.at(5) = x19915;
        host_args.at(6) = x19916;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19917 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19917 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19918 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19918 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19919 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19919 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19920 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19920 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19921 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19921 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19922 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19922 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19923 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19923 != Fp::invalid());
        host_args.at(0) = x19917;
        host_args.at(1) = x19918;
        host_args.at(2) = x19919;
        host_args.at(3) = x19920;
        host_args.at(4) = x19921;
        host_args.at(5) = x19922;
        host_args.at(6) = x19923;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19924 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x19924 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19925 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x19925 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19926 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x19926 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19927 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x19927 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19928 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x19928 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19929 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x19929 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19930 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x19930 != Fp::invalid());
        host_args.at(0) = x19924;
        host_args.at(1) = x19925;
        host_args.at(2) = x19926;
        host_args.at(3) = x19927;
        host_args.at(4) = x19928;
        host_args.at(5) = x19929;
        host_args.at(6) = x19930;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19931 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x19931 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19932 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x19932 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19933 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x19933 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19934 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x19934 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19935 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x19935 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19936 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x19936 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19937 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x19937 != Fp::invalid());
        host_args.at(0) = x19931;
        host_args.at(1) = x19932;
        host_args.at(2) = x19933;
        host_args.at(3) = x19934;
        host_args.at(4) = x19935;
        host_args.at(5) = x19936;
        host_args.at(6) = x19937;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19938 = args[2][144 * steps + ((cycle - 0) & mask)];
        assert(x19938 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19939 = args[2][145 * steps + ((cycle - 0) & mask)];
        assert(x19939 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19940 = args[2][146 * steps + ((cycle - 0) & mask)];
        assert(x19940 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19941 = args[2][147 * steps + ((cycle - 0) & mask)];
        assert(x19941 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19942 = args[2][148 * steps + ((cycle - 0) & mask)];
        assert(x19942 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19943 = args[2][149 * steps + ((cycle - 0) & mask)];
        assert(x19943 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/8(ECallCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19944 = args[2][150 * steps + ((cycle - 0) & mask)];
        assert(x19944 != Fp::invalid());
        host_args.at(0) = x19938;
        host_args.at(1) = x19939;
        host_args.at(2) = x19940;
        host_args.at(3) = x19941;
        host_args.at(4) = x19942;
        host_args.at(5) = x19943;
        host_args.at(6) = x19944;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19945 = args[2][109 * steps + ((cycle - 0) & mask)];
    assert(x19945 != Fp::invalid());
    if (x19945 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19946 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19946 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19947 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19947 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19948 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19948 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19949 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19949 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19950 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19950 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19951 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19951 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19952 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19952 != Fp::invalid());
        host_args.at(0) = x19946;
        host_args.at(1) = x19947;
        host_args.at(2) = x19948;
        host_args.at(3) = x19949;
        host_args.at(4) = x19950;
        host_args.at(5) = x19951;
        host_args.at(6) = x19952;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19953 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19953 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19954 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19954 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19955 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19955 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19956 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19956 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19957 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19957 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19958 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19958 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/9(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19959 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19959 != Fp::invalid());
        host_args.at(0) = x19953;
        host_args.at(1) = x19954;
        host_args.at(2) = x19955;
        host_args.at(3) = x19956;
        host_args.at(4) = x19957;
        host_args.at(5) = x19958;
        host_args.at(6) = x19959;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19960 = args[2][110 * steps + ((cycle - 0) & mask)];
    assert(x19960 != Fp::invalid());
    if (x19960 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19961 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19961 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19962 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19962 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19963 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19963 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19964 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19964 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19965 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19965 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19966 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19966 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19967 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19967 != Fp::invalid());
        host_args.at(0) = x19961;
        host_args.at(1) = x19962;
        host_args.at(2) = x19963;
        host_args.at(3) = x19964;
        host_args.at(4) = x19965;
        host_args.at(5) = x19966;
        host_args.at(6) = x19967;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19968 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19968 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19969 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19969 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19970 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19970 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19971 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19971 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19972 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19972 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19973 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19973 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/10(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19974 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19974 != Fp::invalid());
        host_args.at(0) = x19968;
        host_args.at(1) = x19969;
        host_args.at(2) = x19970;
        host_args.at(3) = x19971;
        host_args.at(4) = x19972;
        host_args.at(5) = x19973;
        host_args.at(6) = x19974;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19975 = args[2][111 * steps + ((cycle - 0) & mask)];
    assert(x19975 != Fp::invalid());
    if (x19975 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19976 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19976 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19977 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19977 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19978 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19978 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19979 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19979 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19980 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19980 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19981 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19981 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19982 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19982 != Fp::invalid());
        host_args.at(0) = x19976;
        host_args.at(1) = x19977;
        host_args.at(2) = x19978;
        host_args.at(3) = x19979;
        host_args.at(4) = x19980;
        host_args.at(5) = x19981;
        host_args.at(6) = x19982;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19983 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19983 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19984 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19984 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19985 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x19985 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19986 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x19986 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19987 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x19987 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19988 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x19988 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/11(ShaWrap)/ShaCycle/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19989 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x19989 != Fp::invalid());
        host_args.at(0) = x19983;
        host_args.at(1) = x19984;
        host_args.at(2) = x19985;
        host_args.at(3) = x19986;
        host_args.at(4) = x19987;
        host_args.at(5) = x19988;
        host_args.at(6) = x19989;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x19990 = args[2][113 * steps + ((cycle - 0) & mask)];
    assert(x19990 != Fp::invalid());
    if (x19990 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19991 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x19991 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19992 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x19992 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19993 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x19993 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19994 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x19994 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19995 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x19995 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19996 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x19996 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19997 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x19997 != Fp::invalid());
        host_args.at(0) = x19991;
        host_args.at(1) = x19992;
        host_args.at(2) = x19993;
        host_args.at(3) = x19994;
        host_args.at(4) = x19995;
        host_args.at(5) = x19996;
        host_args.at(6) = x19997;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19998 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x19998 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x19999 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x19999 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20000 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20000 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20001 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20001 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20002 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20002 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20003 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20003 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20004 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20004 != Fp::invalid());
        host_args.at(0) = x19998;
        host_args.at(1) = x19999;
        host_args.at(2) = x20000;
        host_args.at(3) = x20001;
        host_args.at(4) = x20002;
        host_args.at(5) = x20003;
        host_args.at(6) = x20004;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20005 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x20005 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20006 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x20006 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20007 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x20007 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20008 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x20008 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20009 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x20009 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20010 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x20010 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20011 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x20011 != Fp::invalid());
        host_args.at(0) = x20005;
        host_args.at(1) = x20006;
        host_args.at(2) = x20007;
        host_args.at(3) = x20008;
        host_args.at(4) = x20009;
        host_args.at(5) = x20010;
        host_args.at(6) = x20011;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20012 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x20012 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20013 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x20013 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20014 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x20014 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20015 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x20015 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20016 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x20016 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20017 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x20017 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/13(ECallCopyInCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20018 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x20018 != Fp::invalid());
        host_args.at(0) = x20012;
        host_args.at(1) = x20013;
        host_args.at(2) = x20014;
        host_args.at(3) = x20015;
        host_args.at(4) = x20016;
        host_args.at(5) = x20017;
        host_args.at(6) = x20018;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
    // loc("zirgen/compiler/edsl/component.cpp":39:15)
    auto x20019 = args[2][114 * steps + ((cycle - 0) & mask)];
    assert(x20019 != Fp::invalid());
    if (x20019 != 0) {
      {
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20020 = args[2][116 * steps + ((cycle - 0) & mask)];
        assert(x20020 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20021 = args[2][117 * steps + ((cycle - 0) & mask)];
        assert(x20021 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20022 = args[2][118 * steps + ((cycle - 0) & mask)];
        assert(x20022 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20023 = args[2][119 * steps + ((cycle - 0) & mask)];
        assert(x20023 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20024 = args[2][120 * steps + ((cycle - 0) & mask)];
        assert(x20024 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20025 = args[2][121 * steps + ((cycle - 0) & mask)];
        assert(x20025 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20026 = args[2][122 * steps + ((cycle - 0) & mask)];
        assert(x20026 != Fp::invalid());
        host_args.at(0) = x20020;
        host_args.at(1) = x20021;
        host_args.at(2) = x20022;
        host_args.at(3) = x20023;
        host_args.at(4) = x20024;
        host_args.at(5) = x20025;
        host_args.at(6) = x20026;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20027 = args[2][123 * steps + ((cycle - 0) & mask)];
        assert(x20027 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20028 = args[2][124 * steps + ((cycle - 0) & mask)];
        assert(x20028 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20029 = args[2][125 * steps + ((cycle - 0) & mask)];
        assert(x20029 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20030 = args[2][126 * steps + ((cycle - 0) & mask)];
        assert(x20030 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20031 = args[2][127 * steps + ((cycle - 0) & mask)];
        assert(x20031 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20032 = args[2][128 * steps + ((cycle - 0) & mask)];
        assert(x20032 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20033 = args[2][129 * steps + ((cycle - 0) & mask)];
        assert(x20033 != Fp::invalid());
        host_args.at(0) = x20027;
        host_args.at(1) = x20028;
        host_args.at(2) = x20029;
        host_args.at(3) = x20030;
        host_args.at(4) = x20031;
        host_args.at(5) = x20032;
        host_args.at(6) = x20033;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20034 = args[2][130 * steps + ((cycle - 0) & mask)];
        assert(x20034 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20035 = args[2][131 * steps + ((cycle - 0) & mask)];
        assert(x20035 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20036 = args[2][132 * steps + ((cycle - 0) & mask)];
        assert(x20036 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20037 = args[2][133 * steps + ((cycle - 0) & mask)];
        assert(x20037 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20038 = args[2][134 * steps + ((cycle - 0) & mask)];
        assert(x20038 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20039 = args[2][135 * steps + ((cycle - 0) & mask)];
        assert(x20039 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20040 = args[2][136 * steps + ((cycle - 0) & mask)];
        assert(x20040 != Fp::invalid());
        host_args.at(0) = x20034;
        host_args.at(1) = x20035;
        host_args.at(2) = x20036;
        host_args.at(3) = x20037;
        host_args.at(4) = x20038;
        host_args.at(5) = x20039;
        host_args.at(6) = x20040;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20041 = args[2][137 * steps + ((cycle - 0) & mask)];
        assert(x20041 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20042 = args[2][138 * steps + ((cycle - 0) & mask)];
        assert(x20042 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/Reg"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20043 = args[2][139 * steps + ((cycle - 0) & mask)];
        assert(x20043 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[0](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20044 = args[2][140 * steps + ((cycle - 0) & mask)];
        assert(x20044 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[1](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20045 = args[2][141 * steps + ((cycle - 0) & mask)];
        assert(x20045 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[2](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20046 = args[2][142 * steps + ((cycle - 0) & mask)];
        assert(x20046 != Fp::invalid());
        // loc("Top/mux(Mux)/body(BodyStep)/Mux/14(BigIntCycle)/RamBody/PlonkBody/RamPlonkElement/U32Reg/byte[3](Reg)"("./zirgen/compiler/edsl/component.h":154:27))
        auto x20047 = args[2][143 * steps + ((cycle - 0) & mask)];
        assert(x20047 != Fp::invalid());
        host_args.at(0) = x20041;
        host_args.at(1) = x20042;
        host_args.at(2) = x20043;
        host_args.at(3) = x20044;
        host_args.at(4) = x20045;
        host_args.at(5) = x20046;
        host_args.at(6) = x20047;
        host(ctx, "plonkWrite", "ram", host_args.data(), 7, host_outs.data(), 0);
      }
    }
  }
  return x19650;
}

} // namespace risc0::circuit::rv32im
// clang-format on
